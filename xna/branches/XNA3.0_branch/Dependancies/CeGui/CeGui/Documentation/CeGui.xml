<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CeGui</name>
    </assembly>
    <members>
        <member name="T:CeGui.WindowManager">
            <summary>Manages creation and lifetime of Window objects</summary>
            <remarks>
              The WindowManager is the means by which <see cref="T:CeGui.Window"/> objects are created
              and destroyed. For each sub-class of Window that is to be created, there must exist
              a <see cref="T:CeGui.Window"/> object which is registered with the
              <see cref="T:CeGui.WindowManager"/>. Additionally, the WindowManager tracks every
              Window object created, and can be used to access those Window objects by name.
            </remarks>
        </member>
        <member name="F:CeGui.WindowManager.SchemaFileName">
            <summary>Name of the XSD file to use for validation.</summary>
        </member>
        <member name="F:CeGui.WindowManager.SchemaNamespace">
            <summary>Name of the schema namespace.</summary>
        </member>
        <member name="F:CeGui.WindowManager.instance">
            <summary>Singleton instance of this class</summary>
        </member>
        <member name="M:CeGui.WindowManager.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:CeGui.WindowManager.AttachAssembly(System.Reflection.Assembly)">
            <summary>
              Registers all the classes in an assembly that derive from type Window so that
              they can be created using <see cref="M:CeGui.WindowManager.CreateWindow(System.String,System.String)"/>.
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:CeGui.WindowManager.CreateWindow(System.String,System.String)">
            <summary>
              Creates a new <see cref="T:CeGui.Window"/> object of the specified type, and gives 
              it the specified unique name.
            </summary>
            <param name="type">
              String that describes the type of Window to be created.  
              A valid <see cref="T:CeGui.Window"/> for the specified type must be registered.</param>
            <param name="name">A unique name that is to be given to the new window.</param>
            <returns>Reference to the newly created window.</returns>
            <exception cref="T:CeGui.AlreadyExistsException">
              A <see cref="T:CeGui.Window"/> object with the specified <paramref name="name"/> already exists.
            </exception>
            <exception cref="T:CeGui.UnknownObjectException">
              No <see cref="T:CeGui.Window"/> is registered for <paramref name="type"/> <see cref="T:CeGui.Window"/> objects.
            </exception>
            <exception cref="T:CeGui.GenericException">Some other error occurred (Exception message has details).</exception>
        </member>
        <member name="M:CeGui.WindowManager.AttachWindow(CeGui.Window)">
            <summary>Attaches a window to the window manager</summary>
            <param name="window">The window object to attach.</param>
            <remarks>You need to call this after you create each window if you don't use <see cref="M:CeGui.WindowManager.CreateWindow(System.String,System.String)"/>.</remarks>
        </member>
        <member name="M:CeGui.WindowManager.DestroyAllWindows">
            <summary>Destroys all <see cref="T:CeGui.Window"/> objects within the system</summary>
            <exception cref="T:CeGui.InvalidRequestException">If the factory for any window has been removed.</exception>
        </member>
        <member name="M:CeGui.WindowManager.DestroyWindow(CeGui.Window)">
            <summary>
            	Destroy the specified <see cref="T:CeGui.Window"/> object.
            </summary>
            <param name="window">Reference to the <see cref="T:CeGui.Window"/> object to be destroyed.  
            	If <paramref name="window"/> is not recognized, nothing happens.
            </param>
            <exception cref="T:CeGui.InvalidRequestException">
            	If the factory for <paramref name="window"/> has been removed.
            </exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="window"/> is null.</exception>
        </member>
        <member name="M:CeGui.WindowManager.DestroyWindow(System.String)">
            <summary>
            	Destroy the <see cref="T:CeGui.Window"/> object with the specified name.
            </summary>
            <param name="name">
            	Name of the <see cref="T:CeGui.Window"/> object to destroy.
            	If <paramref name="name"/> is not recognized, nothing happens.
            </param>
            <exception cref="T:CeGui.InvalidRequestException">
            	If the factory for <paramref name="name"/> has been removed.
            </exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is null.</exception>
        </member>
        <member name="M:CeGui.WindowManager.GetWindow(System.String)">
            <summary>
            	Return a reference to the specified <see cref="T:CeGui.Window"/> object.
            </summary>
            <param name="name">Name of the window to be returned.</param>
            <returns>A reference to a <see cref="T:CeGui.Window"/> with the specified <paramref name="name"/></returns>
            <exception cref="T:CeGui.UnknownObjectException">
            	If a window with the specified <paramref name="name"/> does not exist in the system.
            </exception>
        </member>
        <member name="M:CeGui.WindowManager.IsWindowPresent(System.String)">
            <summary>
            	Examines the list of <see cref="T:CeGui.Window"/> objects to see if one exists with the given name.
            </summary>
            <param name="name">Name of the window to look for.</param>
            <returns>
            	True if the window was found with the specified <paramref name="name"/>.
            	False if no matching window was found.
            </returns>
        </member>
        <member name="M:CeGui.WindowManager.RegisterProperties(System.Type)">
            <summary>
            Examines the list of Properties of this type to find any that are flagged to be exported.
            </summary>
            <param name="type">The type of the object to check</param>
        </member>
        <member name="M:CeGui.WindowManager.RegisterType(System.Type,System.Reflection.Assembly)">
            <summary>
            	Regster an existing widget type with the system.
            </summary>
            <param name="type"></param>
            <param name="assembly"></param>
        </member>
        <member name="M:CeGui.WindowManager.LoadWindow(System.Xml.XmlNode,System.Object,System.Collections.Hashtable,System.Xml.XmlNamespaceManager)">
            <summary>
            	Creates a window from the information contained in the XML node.
            </summary>
            <param name="windowNode">The XmlNode that contains information about the window</param>
            <param name="guiHandler">The object that will handle the gui events</param>
            <param name="eventMap">Event handlers to hookup</param>
            <returns>Returns the window that was created</returns>
        </member>
        <member name="M:CeGui.WindowManager.LoadWindowLayout(System.String)">
            <summary>
            	Loads a window layout file.
            </summary>
            <remarks>
            	This will load a layout file that follows the same format as the c++ CEGUI format.
            </remarks>
            <param name="fileName">Name of the layout file.</param>
            <returns>Returns the root window of the layout.</returns>
        </member>
        <member name="M:CeGui.WindowManager.LoadWindowLayout(System.String,System.Object)">
            <summary>
            	Loads a window layout file.
            </summary>
            <remarks>
            	This will load a layout file that follows the same format as the c++ CEGUI format.
            </remarks>
            <param name="fileName">Name of the layout file.</param>
            <param name="guiHandler">The object that will handle gui events.</param>
            <returns>Returns the root window of the layout.</returns>
        </member>
        <member name="M:CeGui.WindowManager.Dispose">
            <summary>
            	Called when the object should release and Strings.
            </summary>
        </member>
        <member name="F:CeGui.WindowManager.windowRegistry">
            <summary>The container that forms the Window registry</summary>
        </member>
        <member name="F:CeGui.WindowManager.dynamicAssemblyRefs">
            <summary>Assembly list used for compiling dynamic scripts</summary>
        </member>
        <member name="F:CeGui.WindowManager.typeMap">
            <summary>The CeGui widget types that have been registered, and the assembly each is in</summary>
        </member>
        <member name="F:CeGui.WindowManager.alternateNamesMap">
            <summary>Contains currently defined aliases for Window types</summary>
        </member>
        <member name="F:CeGui.WindowManager.mPropertyMap">
            <summary>The Properties each type of CeGui widget has</summary>
        </member>
        <member name="P:CeGui.WindowManager.Instance">
            <summary>Gets the singleton class instance.</summary>
        </member>
        <member name="T:CeGui.AlternateWidgetNameAttribute">
            <summary>
            This is an attribute intended to be attached to a widget to specify an alternate
            name to use for identifying the widget.
            </summary>
        </member>
        <member name="T:CeGui.WidgetPropertyAttribute">
            <summary>
            Base attribute class for exposing properties to the layout code.
            </summary>
        </member>
        <member name="M:CeGui.WidgetPropertyAttribute.GetValue(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Gets the string representation of the value of the property.
            </summary>
            <param name="obj">Object to check</param>
            <param name="property">Property to check</param>
            <returns>String representation of the property</returns>
        </member>
        <member name="M:CeGui.WidgetPropertyAttribute.SetValue(System.Object,System.Reflection.PropertyInfo,System.String)">
            <summary>
            Sets the property to the value represented by the string.
            </summary>
            <param name="obj">Object to set the property of</param>
            <param name="property">Property to set</param>
            <param name="value">String representation of the property.</param>
        </member>
        <member name="P:CeGui.WidgetPropertyAttribute.Name">
            <summary>
            Name of the property
            </summary>
            <value>Name of the property</value>
        </member>
        <member name="T:CeGui.StringPropertyAttribute">
            <summary>
            Specialized property class because the string object does not have a Parse method.
            </summary>
        </member>
        <member name="T:CeGui.MetricsModePropertyAttribute">
            <summary>
            Spectialized property attribute for MetricsMode properties.
            </summary>
        </member>
        <member name="T:CeGui.HorzizontalImageFormatPropertyAttribute">
            <summary>
            Spectialized property attribute for HorizontalImageFormat properties.
            </summary>
        </member>
        <member name="T:CeGui.VerticalImageFormatPropertyAttribute">
            <summary>
            Spectialized property attribute for VerticalImageFormat properties.
            </summary>
        </member>
        <member name="T:CeGui.HorizontalTextFormatPropertyAttribute">
            <summary>
            Spectialized property attribute for HorizontalTextFormat properties.
            </summary>
        </member>
        <member name="T:CeGui.VerticalTextFormatPropertyAttribute">
            <summary>
            Spectialized property attribute for VerticalTextFormat properties.
            </summary>
        </member>
        <member name="T:CeGui.GuiEventAttribute">
            <summary>
            Flags a function as an event handler
            </summary>
        </member>
        <member name="T:CeGui.SortDirectionPropertyAttribute">
            <summary>
            Specialised property attribute for SortDirection properties.
            </summary>
        </member>
        <member name="T:CeGui.GridSelectionModePropertyAttribute">
            <summary>
            Specialised property attribute for GridSelectionMode properties.
            </summary>
        </member>
        <member name="T:CeGui.FontManager">
            <summary>
            	Class providing a shared library of Font objects to the system.
            </summary>
            <remarks>
            	The FontManager is used to create, access, and destroy Font objects.  The idea is that the
            	FontManager will function as a central repository for Font objects used within the GUI system,
            	and that those Font objects can be accessed, via a unique name, by any interested party within
            	the system.
            </remarks>
        </member>
        <member name="F:CeGui.FontManager.instance">
            <summary>
            	Singlton instance of this class.
            </summary>
        </member>
        <member name="M:CeGui.FontManager.#ctor">
            <summary>
            	Default constructor.
            </summary>
        </member>
        <member name="F:CeGui.FontManager.fontList">
            <summary>
            	List of fonts created within the system.
            </summary>
        </member>
        <member name="M:CeGui.FontManager.CreateFont(System.String,System.String,System.Int32,CeGui.FontFlags)">
            <summary>
              Creates a new Font based on a true-type font, and returns a
              pointer to the new Font object.
            </summary>
            <param name="name">A unique name for the new font.</param>
            <param name="fontName">The name of the true-type font to use.</param>
            <param name="SizeF">The glyph SizeF (point-SizeF) for the new font.</param>
            <param name="flags">Additional flags to alter the creation of the font bitmap.</param>
            <returns>A reference to the newly created Font object.</returns>
            <exception cref="T:CeGui.AlreadyExistsException">
              Thrown if the font named <paramref name="name"/> already exists in the system.
            </exception>
        </member>
        <member name="M:CeGui.FontManager.GetFont(System.String)">
            <summary>
            	Returns the Font object with the specified name.
            </summary>
            <param name="name">Name of the font object to return.</param>
            <returns>A Font object with the specified name.</returns>
        </member>
        <member name="M:CeGui.FontManager.IsFontPresent(System.String)">
            <summary>
            	Checks the existence of a given font.
            </summary>
            <param name="name">The name of the Font object to look for.</param>
            <returns>true if a Font object named <paramref name="name"/> exists in the system, false if no such font exists.</returns>
        </member>
        <member name="P:CeGui.FontManager.Instance">
            <summary>
            	Gets the singleton class instance.
            </summary>
            <value></value>
        </member>
        <member name="M:CeGui.BaseDimension.GetValue(CeGui.Window)">
            <summary>
            	Return a value that represents this dimension as absolute pixels.
            </summary>
            <param name="wnd">Window object that may be used by the specialised class to aid in calculating the final value.</param>
            <returns>float value which represents, in pixels, the same value as this BaseDim.</returns>
        </member>
        <member name="M:CeGui.BaseDimension.GetValue(CeGui.Window,CeGui.Rect)">
            <summary>
            	Return a value that represents this dimension as absolute pixels.
            </summary>
            <param name="wnd">
            	Window object that may be used by the specialised class to aid in 
            	calculating the final value (typically would be used to obtain window/widget dimensions).
            </param>
            <param name="container">
            	Rect object which describes an area to be considered as the base area when calculating the 
            	final value.  Basically this means that relative values are calculated from the dimensions 
            	of this Rect.
            </param>
            <returns>float value which represents, in pixels, the same value as this BaseDim.</returns>
        </member>
        <member name="T:CeGui.Widgets.BaseButton">
            <summary>
            Summary description for BaseButton.
            </summary>
            C++ Version Sync
            .cpp:	1.6
            .h:		1.6
        </member>
        <member name="T:CeGui.Window">
            <summary>
                Definition of a Window class.
            </summary>
        </member>
        <member name="T:CeGui.PropertySet">
            <summary>Contains a collection of Property objects</summary>
        </member>
        <member name="M:CeGui.PropertySet.#ctor">
            <summary>Initializes a new instance of PropertySet</summary>
        </member>
        <member name="M:CeGui.PropertySet.AddProperty(CeGui.Property)">
            <summary>Adds a new Property to the PropertySet</summary>
            <param name="property">Property to be added to the PropertySet</param>
        </member>
        <member name="M:CeGui.PropertySet.RemoveProperty(System.String)">
            <summary>Removes a Property from the PropertySet</summary>
            <param name="name">
              String containing the name of the Property to be removed. If Property
              'name' is not in the set, nothing happens
            </param>
        </member>
        <member name="M:CeGui.PropertySet.ClearProperties">
            <summary>Removes all Properties from the PropertySet</summary>
        </member>
        <member name="M:CeGui.PropertySet.IsPropertyPresent(System.String)">
            <summary>Checks to see if a Property with the given name is in the PropertySet</summary>
            <param name="name">String containing the name of the Property to check for</param>
            <returns>
              true if a Property named 'name' is in the PropertySet. false if no Property named
              'name' is in the PropertySet
            </returns>
        </member>
        <member name="M:CeGui.PropertySet.GetPropertyHelp(System.String)">
            <summary>Return the help text for the specified Property</summary>
            <param name="name">
              String holding the name of the Property who's help text is to be returned
            </param>
            <returns>String containing the help text for the Property 'name'</returns>
        </member>
        <member name="M:CeGui.PropertySet.GetProperty(System.String)">
            <summary>Gets the current value of the specified Property</summary>
            <param name="name">
              String containing the name of the Property who's value is to be returned
            </param>
            <returns>String containing a textual representation of the requested Property</returns>
        </member>
        <member name="M:CeGui.PropertySet.SetProperty(System.String,System.String)">
            <summary>Sets the current value of a Property</summary>
            <param name="name">
              String containing the name of the Property who's value is to be set
            </param>
            <param name="value">
              String containing a textual representation of the new value for the Property
            </param>
        </member>
        <member name="M:CeGui.PropertySet.IsPropertyDefault(System.String)">
            <summary>Returns whether a Property is at it's default value</summary>
            <param name="name">
              String containing the name of the Property who's default state is to be tested
            </param>
            <returns>
              - true if the property has it's default value
              - false if the property has been modified from it's default value
            </returns>
        </member>
        <member name="M:CeGui.PropertySet.GetPropertyDefault(System.String)">
            <summary>Returns the default value of a Property as a String</summary>
            <param name="name">
              String containing the name of the Property who's default string is to be returned
            </param>
            <returns>
              String containing a textual representation of the default value for this property
            </returns>
        </member>
        <member name="F:CeGui.PropertySet.properties">
            <summary>The properties contained in this set</summary>
        </member>
        <member name="F:CeGui.Window.type">
            <summary>
            String holding the type name for the Window (is also the name of the WindowFactory that created us)
            </summary>
        </member>
        <member name="F:CeGui.Window.name">
            <summary>
            	GuiSystem unique name of this window.
            </summary>
        </member>
        <member name="F:CeGui.Window.falagardType">
            <summary>
            Type name of the window as defined in a Falagard mapping.
            </summary>
        </member>
        <member name="F:CeGui.Window.lookName">
            <summary>
            Name of the Look assigned to this window (if any).
            </summary>
        </member>
        <member name="F:CeGui.Window.children">
            <summary>
                List of child windows attached to this window.
            </summary>
        </member>
        <member name="F:CeGui.Window.drawList">
            <summary>
            Child window objects arranged in rendering order.
            </summary>
        </member>
        <member name="F:CeGui.Window.metricsMode">
            <summary>
            	Holds the active metrics mode for this window.
            </summary>
        </member>
        <member name="F:CeGui.Window.captureWindow">
            <summary>
                Window that has captured inputs.
            </summary>
        </member>
        <member name="F:CeGui.Window.oldCapture">
            <summary>
                Previous window to have mouse capture.
            </summary>
        </member>
        <member name="F:CeGui.Window.parent">
            <summary>
                This window's parent window.
            </summary>
        </member>
        <member name="F:CeGui.Window.font">
            <summary>
            	Holds reference to the Window object's current Font.
            </summary>
        </member>
        <member name="F:CeGui.Window.text">
            <summary>
                Text / label/ caption for this window.
            </summary>
        </member>
        <member name="F:CeGui.Window.id">
            <summary>
                Optional user defined ID for this window.
            </summary>
        </member>
        <member name="F:CeGui.Window.alpha">
            <summary>
            	Alpha transparency setting for the Window.
            </summary>
        </member>
        <member name="F:CeGui.Window.absArea">
            <summary>
            	This Window objects area (pixels relative to parent.
            TODO: convert this over to a UDim/URect structure
            </summary>
        </member>
        <member name="F:CeGui.Window.relArea">
            <summary>
            	This Window objects area (decimal fractions relative to parent).
            </summary>
        </member>
        <member name="F:CeGui.Window.pixelSize">
            <summary>
            Current constrained pixel SizeF of the window.
            </summary>
        </member>
        <member name="F:CeGui.Window.mouseCursor">
            <summary>
            	Holds reference to the Window objects current mouse cursor image.
            </summary>
        </member>
        <member name="F:CeGui.Window.userData">
            <summary>
            Holds pointer to some user assigned data.
            </summary>
        </member>
        <member name="F:CeGui.Window.userStrings">
            <summary>
            Holds a collection of named user string values.
            </summary>
        </member>
        <member name="F:CeGui.Window.horzAlignment">
            <summary>
            Specifies the base for horizontal alignment.
            </summary>
        </member>
        <member name="F:CeGui.Window.vertAlignment">
            <summary>
            Specifies the base for vertical alignment.
            </summary>
        </member>
        <member name="M:CeGui.Window.PerformChildWindowLayout">
            <summary>
            
            </summary>
        </member>
        <member name="M:CeGui.Window.AddProperty(CeGui.PropertyDefinition)">
            <summary>
            
            </summary>
            <param name="definition"></param>
        </member>
        <member name="F:CeGui.Window.minSize">
            <summary>
            	Current minimum SizeF for the window (this is always stored in pixels).
            </summary>
        </member>
        <member name="F:CeGui.Window.maxSize">
            <summary>
            	Current maximum SizeF for the window (this is always stored in pixels).
            </summary>
        </member>
        <member name="F:CeGui.Window.isEnabled">
            <summary>
                True when window is enabled.
            </summary>
        </member>
        <member name="F:CeGui.Window.isVisible">
            <summary>
                True if window is visible (not hidden).
            </summary>
        </member>
        <member name="F:CeGui.Window.isActive">
            <summary>
                True if the window is active (has input focus).
            </summary>
        </member>
        <member name="F:CeGui.Window.isClippedByParent">
            <summary>
                True if this window is to be kept within it's parents area.
            </summary>
        </member>
        <member name="F:CeGui.Window.isDestroyedByParent">
            <summary>
            	True when Window will be auto-destroyed by parent.
            </summary>
        </member>
        <member name="F:CeGui.Window.isAlwaysOnTop">
            <summary>
                True if this is a top-most window (i.e. Always on top).
            </summary>
        </member>
        <member name="F:CeGui.Window.inheritsAlpha">
            <summary>
            	True if the Window inherits alpha from the parent Window.
            </summary>
        </member>
        <member name="F:CeGui.Window.restoreOldCapture">
            <summary>
                True if window should restore any 'old' capture when it releases capture.
            </summary>
        </member>
        <member name="F:CeGui.Window.zOrderingEnabled">
            <summary>
            true if the Window responds to z-order change requests.
            </summary>
        </member>
        <member name="F:CeGui.Window.wantsMultiClicks">
            <summary>
            true if the Window wishes to hear about multi-click mouse events.
            </summary>
        </member>
        <member name="F:CeGui.Window.distCapturedInputs">
            <summary>
            true if unhandled captured inputs should be distributed to child windows.
            </summary>
        </member>
        <member name="F:CeGui.Window.riseOnClick">
            <summary>
            True if the window should come to the front of the z order in respose to a left mouse button down event.
            </summary>
        </member>
        <member name="F:CeGui.Window.autoRepeat">
            <summary>
            true if button will auto-repeat mouse button down events while mouse button is held down,
            </summary>
        </member>
        <member name="F:CeGui.Window.repeatDelay">
            <summary>
            seconds before first repeat event is fired
            </summary>
        </member>
        <member name="F:CeGui.Window.repeatRate">
            <summary>
            secons between further repeats after delay has expired.
            </summary>
        </member>
        <member name="F:CeGui.Window.repeating">
            <summary>
            implements repeating - is true after delay has elapsed,
            </summary>
        </member>
        <member name="F:CeGui.Window.repeatElapsed">
            <summary>
            implements repeating - tracks time elapsed.
            </summary>
        </member>
        <member name="F:CeGui.Window.repeatButton">
            <summary>
            Button we're tracking (implication of this is that we only support one button at a time).
            </summary>
        </member>
        <member name="F:CeGui.Window.tooltipText">
            <summary>
            Text string used as tip for this window.
            </summary>
        </member>
        <member name="F:CeGui.Window.weOwnTip">
            <summary>
            true if this Window created the custom Tooltip.
            </summary>
        </member>
        <member name="F:CeGui.Window.inheritsTipText">
            <summary>
            true if the Window inherits tooltip text from its parent (when none set for itself).
            </summary>
        </member>
        <member name="F:CeGui.Window.renderCache">
            <summary>
            Object which acts as a cache for Images to be drawn by this Window.
            </summary>
        </member>
        <member name="F:CeGui.Window.needsRedraw">
            <summary>
            true if window image cache needs to be regenerated.
            </summary>
        </member>
        <member name="M:CeGui.Window.#ctor(System.String,System.String)">
            <summary>
                Constructor for Window base class
            </summary>
            <param name="type">String object holding Window type (usually provided by WindowFactory).</param>
            <param name="name">String object holding unique name for the Window.</param>
        </member>
        <member name="M:CeGui.Window.DrawSelf(System.Single)">
            <summary>
                Perform the actual rendering for this Window.
            </summary>
            <param name="z">float value specifying the base Z co-ordinate that should be used when rendering.</param>
        </member>
        <member name="M:CeGui.Window.SetLookNFeel(System.String,System.String)">
            <summary>
            Set the LookNFeel that shoule be used for this window
            </summary>
            <param name="falagardType"></param>
            <param name="look">name of LookNFeel</param>
        </member>
        <member name="M:CeGui.Window.MoveTo(System.Single,System.Single)">
            <summary>
            Set position of window
            </summary>
            <param name="x">window's left edge</param>
            <param name="y">window's top edge</param>
        </member>
        <member name="M:CeGui.Window.Resize(System.Single,System.Single)">
            <summary>
            Set size of window
            </summary>
            <param name="width">window's width</param>
            <param name="height">window's height</param>
        </member>
        <member name="M:CeGui.Window.Activate">
            <summary>
            	Activate the Window giving it input focus and bringing it to the top of all non always-on-top Windows.
            </summary>
            <remarks>
            	A Window cannot be programmatically 'disabled', as such.  To disable a Window, you must activate another one.
            </remarks>
        </member>
        <member name="M:CeGui.Window.AddChild(System.String)">
            <summary>
            	Add the named Window as a child of this Window.  If the Window \a name is already attached to a Window, it is detached before
            	being added to this Window.
            </summary>
            <param name="name">The name of the Window to be added.</param>
        </member>
        <member name="M:CeGui.Window.AddChild(CeGui.Window)">
            <summary>
                Add the specified Window as a child of this Window.  If the Window \a window is already attached to a Window, it is detached before
                being added to this Window.
            </summary>
            <param name="window">Reference to a window to add as a child.</param>
        </member>
        <member name="M:CeGui.Window.RemoveChild(System.String)">
            <summary>
            	Removes the child window with the specified name.
            </summary>
            <param name="name">Name of the child window to remove.</param>
        </member>
        <member name="M:CeGui.Window.RemoveChild(System.Int32)">
            <summary>
            	Removes the child window with the specified ID.
            </summary>
            <param name="id">ID of the child to remove.</param>
        </member>
        <member name="M:CeGui.Window.RemoveChild(CeGui.Window)">
            <summary>
                Removes 'window' from this window's child list.
            </summary>
            <param name="window">Reference to a window to add as a child.</param>
        </member>
        <member name="M:CeGui.Window.GetChild(System.String)">
            <summary>
            	Return a reference to the child window with the specified name.
            </summary>
            <remarks>
            	This function will throw an exception if no child object with the given name is attached.  This decision
            	was made (over returning 'null' if no window was found) so that client code can assume that if the call
            	returns it has a valid window pointer.  We provide the <see cref="M:CeGui.Window.IsChild(System.String)"/> functions for checking if a given window
            	is attached.
            </remarks>
            <param name="name">The name of the child window to return.</param>
            <returns>Window object attached to this window that has the specified <paramref name="name"/>.</returns>
            <exception cref="T:CeGui.UnknownObjectException">Thrown if no window named <paramref name="name"/> is attached to this Window.</exception>
        </member>
        <member name="M:CeGui.Window.GetChild(System.Int32)">
            <summary>
            	Return a reference to the first attached child window with the specified ID.
            </summary>
            <remarks>
            	This function will throw an exception if no child object with the given ID is attached.  This decision
            	was made (over returning 'null' if no window was found) so that client code can assume that if the call
            	returns it has a valid window pointer.  We provide the <see cref="M:CeGui.Window.IsChild(System.Int32)"/> functions for checking if a given window
            	is attached.
            </remarks>
            <param name="id">The ID of the child window to return.</param>
            <returns>The (first) Window object attached to this window that has the specified <paramref name="id"/>.</returns>
            <exception cref="T:CeGui.UnknownObjectException">Thrown if no window named <paramref name="name"/> is attached to this Window.</exception>
        </member>
        <member name="M:CeGui.Window.GetChildAtIndex(System.Int32)">
            <summary>
                Gets a reference to the child window at the specified index.
            </summary>
            <param name="index">Index of the child to retreive.</param>
            <returns>The child at the specified index, or null if the index is out of bounds.</returns>
        </member>
        <member name="M:CeGui.Window.GetChildAtPosition(System.Drawing.PointF)">
            <summary>
                Returns the child Window that is 'hit' by the given position
            </summary>
            <param name="position">Point that describes the position to check in screen pixels.</param>
            <returns>Child located at the specified position, or null if none exists.</returns>
        </member>
        <member name="M:CeGui.Window.IsChild(System.String)">
            <summary>
            	returns whether a Window with the specified name is currently 
            	attached to this Window as a child.
            </summary>
            <param name="name">The name of the Window to look for.</param>
            <returns>True if a Window named <paramref name="name" /> is currently attached to this Window as a child, else false.</returns>
        </member>
        <member name="M:CeGui.Window.IsChild(System.Int32)">
            <summary>
            	Returns whether at least one window with the given ID code is attached as a child.
            </summary>
            <remarks>
            	ID codes are client assigned and may or may not be unique, and as such, the return from this function
            	will only have meaning to the client code.
            </remarks>
            <param name="id">ID code to look for.</param>
            <returns>
            	True if a child window was found with the ID code <paramref name="id" />, 
            	or false if no child window was found with that id.
            </returns>
        </member>
        <member name="M:CeGui.Window.IsChild(CeGui.Window)">
            <summary>
                Returns true if <paramref name="window"/> is a child window of 'this'.
            </summary>
            <param name="window">Window to look for.</param>
            <returns>True if <paramref name="window"/> is a child of 'this'.</returns>
        </member>
        <member name="M:CeGui.Window.IsAncestor(System.String)">
            <summary>
                Returns true if the Window named <paramref name="name"/> is some ancestor of 'this'.
            </summary>
            <param name="name">Name of the Window to look for.</param>
            <returns>True if a Window named <paramref name="name"/> is an ancestor of 'this'.</returns>
        </member>
        <member name="M:CeGui.Window.IsAncestor(System.Int32)">
            <summary>
                Returns true if the Window with ID <paramref name="id"/> is some ancestor of 'this'.
            </summary>
            <param name="id">ID of the Window to look for.</param>
            <returns>True if a Window with ID <paramref name="id"/> is an ancestor of 'this'.</returns>
        </member>
        <member name="M:CeGui.Window.IsAncestor(CeGui.Window)">
            <summary>
                Returns true is <paramref name="window"/> is some ancestor of 'this'.
            </summary>
            <param name="window">Window to look for.</param>
            <returns>True if <paramref name="window"/> is an ancestor of 'this'.</returns>
        </member>
        <member name="M:CeGui.Window.IsHit(System.Drawing.PointF)">
            <summary>
                check if the given position would hit this window.
            </summary>
            <param name="position">Point describing the position to check in screen pixels.</param>
            <returns>True if the given point is within this window's area.</returns>
        </member>
        <member name="M:CeGui.Window.MoveToBack">
            <summary>
            	Move the Window to the bottom of the Z order.
            </summary>
            <remarks>
            	- If the window is non always-on-top the Window is sent to the very bottom of its sibling windows and the process repeated for all ancestors.
            	- If the window is always-on-top, the Window is sent to the bottom of all sibling always-on-top windows and the process repeated for all ancestors.
            </remarks>
        </member>
        <member name="M:CeGui.Window.MoveToFront">
            <summary>
            	Move the Window to the top of the z order.
            </summary>
            <remarks>
            	- If the Window is a non always-on-top window it is moved the the top of all other non always-on-top sibling windows, and the process
            	repeated for all ancestors.
            	- If the Window is an always-on-top window it is moved to the of of all sibling Windows, and the process repeated for all ancestors.
            </remarks>
        </member>
        <member name="M:CeGui.Window.Destroy">
            <summary>
            Unhooks this window and all it's children from the environment
            </summary>
        </member>
        <member name="M:CeGui.Window.CleanupChildren">
            <summary>
            	Cleanup child windows.
            </summary>
        </member>
        <member name="M:CeGui.Window.AddChildImpl(CeGui.Window)">
            <summary>
            	Add given window to child list at an appropriate position.
            </summary>
            <param name="window">Window to add.</param>
        </member>
        <member name="M:CeGui.Window.RemoveChildImpl(CeGui.Window)">
            <summary>
            	Remove given window from child list.
            </summary>
            <param name="window">Window to remove.</param>
        </member>
        <member name="M:CeGui.Window.OnZChangedImpl">
            <summary>
            	Notify 'this' and all siblings of a ZOrder change event.
            </summary>
        </member>
        <member name="M:CeGui.Window.GetWindowSizeImpl(CeGui.Window)">
            <summary>
            	Gets the SizeF of the specified window.
            </summary>
            <param name="window">Window to get the SizeF for.</param>
        </member>
        <member name="M:CeGui.Window.AbsoluteToRelativeImpl(CeGui.Window,CeGui.Rect)">
            <summary>
            
            </summary>
            <param name="window"></param>
            <param name="Rect"></param>
            <returns></returns>
        </member>
        <member name="M:CeGui.Window.AbsoluteToRelativeImpl(CeGui.Window,System.Drawing.SizeF)">
            <summary>
            
            </summary>
            <param name="window"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:CeGui.Window.AbsoluteToRelativeImpl(CeGui.Window,System.Drawing.PointF)">
            <summary>
            
            </summary>
            <param name="window"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:CeGui.Window.AbsoluteToRelativeXImpl(CeGui.Window,System.Single)">
            <summary>
            
            </summary>
            <param name="window"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:CeGui.Window.AbsoluteToRelativeYImpl(CeGui.Window,System.Single)">
            <summary>
            
            </summary>
            <param name="window"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:CeGui.Window.RelativeToAbsoluteImpl(CeGui.Window,CeGui.Rect)">
            <summary>
            
            </summary>
            <param name="window"></param>
            <param name="Rect"></param>
            <returns></returns>
        </member>
        <member name="M:CeGui.Window.RelativeToAbsoluteImpl(CeGui.Window,System.Drawing.SizeF)">
            <summary>
            
            </summary>
            <param name="window"></param>
            <param name="Size"></param>
            <returns></returns>
        </member>
        <member name="M:CeGui.Window.RelativeToAbsoluteImpl(CeGui.Window,System.Drawing.PointF)">
            <summary>
            
            </summary>
            <param name="window"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:CeGui.Window.RelativeToAbsoluteXImpl(CeGui.Window,System.Single)">
            <summary>
            
            </summary>
            <param name="window"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:CeGui.Window.RelativeToAbsoluteYImpl(CeGui.Window,System.Single)">
            <summary>
            
            </summary>
            <param name="window"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:CeGui.Window.AbsoluteToRelativeX(System.Single)">
            <summary>
            	Convert the given X co-ordinate from absolute to relative metrics.
            </summary>
            <param name="val">X co-ordinate specified in pixels relative to this Window (so 0 is this windows left edge).</param>
            <returns>A relative metric value that is equivalent to <paramref name="val"/>, given the Window objects current width.</returns>
        </member>
        <member name="M:CeGui.Window.AbsoluteToRelativeY(System.Single)">
            <summary>
            	Convert the given Y co-ordinate from absolute to relative metrics.
            </summary>
            <param name="val">Y co-ordinate specified in pixels relative to this Window (so 0 is this windows top edge).</param>
            <returns>A relative metric value that is equivalent to <paramref name="val"/>, given the Window objects current height.</returns>
        </member>
        <member name="M:CeGui.Window.AbsoluteToRelative(System.Drawing.PointF)">
            <summary>
            	Convert the given position from absolute to relative metrics.
            </summary>
            <param name="point">Point that describes a position specified in pixels relative to this Window (so 0,0 is this windows top-left corner).</param>
            <returns>A Point describing a relative metric position that is equivalent to <paramref name="point"/>, given the Window objects current SizeF.</returns>
        </member>
        <member name="M:CeGui.Window.AbsoluteToRelative(System.Drawing.SizeF)">
            <summary>
            	Convert the given SizeF from absolute to relative metrics.
            </summary>
            <param name="size">SizeF that describes a SizeF specified in pixels.</param>
            <returns>A SizeF object describing a relative metric SizeF that is equivalent to <paramref name="SizeF"/>, given the Window objects current SizeF.</returns>
        </member>
        <member name="M:CeGui.Window.AbsoluteToRelative(CeGui.Rect)">
            <summary>
            	Convert the given area from absolute to relative metrics.
            </summary>
            <param name="Rect">Rect describing the area specified in pixels relative to this Window.</param>
            <returns>A Rect describing a relative metric area that is equivalent to <paramref name="Rect"/>, given the Window objects current SizeF.</returns>
        </member>
        <member name="M:CeGui.Window.RelativeToAbsoluteX(System.Single)">
            <summary>
            	Convert the given X co-ordinate from relative to absolute metrics.
            </summary>
            <param name="val">X co-ordinate specified in pixels relative to this Window (so 0 is this windows left edge).</param>
            <returns>An absolute  metric value that is equivalent to <paramref name="val"/>, given the Window objects current width.</returns>
        </member>
        <member name="M:CeGui.Window.RelativeToAbsoluteY(System.Single)">
            <summary>
            	Convert the given Y co-ordinate from relative to absolute metrics.
            </summary>
            <param name="val">Y co-ordinate specified in pixels relative to this Window (so 0 is this windows top edge).</param>
            <returns>An absolute metric value that is equivalent to <paramref name="val"/>, given the Window objects current height.</returns>
        </member>
        <member name="M:CeGui.Window.RelativeToAbsolute(System.Drawing.PointF)">
            <summary>
            	Convert the given position from relative to absolute metrics.
            </summary>
            <param name="point">Point that describes a position specified in pixels relative to this Window (so 0,0 is this windows top-left corner).</param>
            <returns>A Point describing a absolute metric position that is equivalent to <paramref name="point"/>, given the Window objects current SizeF.</returns>
        </member>
        <member name="M:CeGui.Window.RelativeToAbsolute(System.Drawing.SizeF)">
            <summary>
            	Convert the given SizeF from relative to absolute metrics.
            </summary>
            <param name="size">SizeF that describes a SizeF specified in pixels.</param>
            <returns>A SizeF object describing an absolute metric SizeF that is equivalent to <paramref name="SizeF"/>, given the Window objects current SizeF.</returns>
        </member>
        <member name="M:CeGui.Window.RelativeToAbsolute(CeGui.Rect)">
            <summary>
            	Convert the given area from relative to absolute metrics.
            </summary>
            <param name="Rect">Rect describing the area specified in pixels relative to this Window.</param>
            <returns>A Rect describing an absolute metric area that is equivalent to <paramref name="Rect"/>, given the Window objects current SizeF.</returns>
        </member>
        <member name="M:CeGui.Window.WindowToScreenX(System.Single)">
            <summary>
            	Convert a window co-ordinate value, specified in whichever metrics mode is active, to a screen relative pixel co-ordinate.
            </summary>
            <param name="x">x co-ordinate value to be converted.</param>
            <returns>float value describing a screen co-ordinate that is equivalent to window co-ordinate <paramref name="x"/>.</returns>
        </member>
        <member name="M:CeGui.Window.WindowToScreenY(System.Single)">
            <summary>
            	Convert a window co-ordinate value, specified in whichever metrics mode is active, to a screen relative pixel co-ordinate.
            </summary>
            <param name="y">y co-ordinate value to be converted.</param>
            <returns>float value describing a screen co-ordinate that is equivalent to window co-ordinate <paramref name="y"/>.</returns>
        </member>
        <member name="M:CeGui.Window.WindowToScreen(System.Drawing.PointF)">
            <summary>
            	Convert a window co-ordinate position, specified in whichever metrics mode is active, to a screen relative pixel co-ordinate position.
            </summary>
            <param name="point">Point describing the position to be converted.</param>
            <returns>Point object describing a screen co-ordinate position that is equivalent to window co-ordinate position <paramref name="point"/>.</returns>
        </member>
        <member name="M:CeGui.Window.WindowToScreen(System.Drawing.SizeF)">
            <summary>
            	Convert a window SizeF value, specified in whichever metrics mode is active, to a SizeF in pixels.
            </summary>
            <param name="size">SizeF describing the SizeF to be converted.</param>
            <returns>SizeF describing describing a SizeF in pixels that is equivalent to the window based <paramref name="Rect"/>.</returns>
        </member>
        <member name="M:CeGui.Window.WindowToScreen(CeGui.Rect)">
            <summary>
            	Convert a window area, specified in whichever metrics mode is active, to a screen area.
            </summary>
            <param name="Rect">Rect describing the area to be converted.</param>
            <returns>Rect describing a screen area that is equivalent to window area <paramref name="Rect"/>.</returns>
        </member>
        <member name="M:CeGui.Window.ScreenToWindowX(System.Single)">
            <summary>
            	Convert a screen relative pixel co-ordinate value to a window co-ordinate value, specified in whichever metrics mode is active.
            </summary>
            <param name="x">x co-ordinate value to be converted.</param>
            <returns>float value describing a window co-ordinate value that is equivalent to screen co-ordinate <paramref name="x"/>.</returns>
        </member>
        <member name="M:CeGui.Window.ScreenToWindowY(System.Single)">
            <summary>
            	Convert a screen relative pixel co-ordinate value to a window co-ordinate value, specified in whichever metrics mode is active.
            </summary>
            <param name="y">y co-ordinate value to be converted.</param>
            <returns>float value describing a window co-ordinate value that is equivalent to screen co-ordinate <paramref name="y"/>.</returns>
        </member>
        <member name="M:CeGui.Window.ScreenToWindow(System.Drawing.PointF)">
            <summary>
            	Convert a screen relative pixel position to a window co-ordinate position, specified in whichever metrics mode is active.
            </summary>
            <param name="point">Point describing the position to be converted.</param>
            <returns>Point describing a window co-ordinate position that is equivalent to screen co-ordinate <paramref name="point"/>.</returns>
        </member>
        <member name="M:CeGui.Window.ScreenToWindow(System.Drawing.SizeF)">
            <summary>
            	Convert a pixel screen SizeF to a window based SizeF, specified in whichever metrics mode is active.
            </summary>
            <param name="size">SizeF describing the area to be converted.</param>
            <returns>SizeF object describing a window based SizeF that is equivalent to screen based SizeF <paramref name="SizeF"/>.</returns>
        </member>
        <member name="M:CeGui.Window.ScreenToWindow(CeGui.Rect)">
            <summary>
            	Convert a screen area to a window area, specified in whichever metrics mode is active.
            </summary>
            <param name="Rect">Rect describing the area to be converted.</param>
            <returns>Rect object describing a window area that is equivalent to screen area <paramref name="Rect"/>.</returns>
        </member>
        <member name="M:CeGui.Window.CopyToClipboard">
            <summary>
                Copy information to the clipboard.
            </summary>
        </member>
        <member name="M:CeGui.Window.CutToClipboard">
            <summary>
            
            </summary>
        </member>
        <member name="M:CeGui.Window.PasteFromClipboard">
            <summary>
            
            </summary>
        </member>
        <member name="M:CeGui.Window.Render">
            <summary>
                Causes the Window object to render itself and all of it's attached children
            </summary>
        </member>
        <member name="M:CeGui.Window.RequestRedraw">
            <summary>
            	Signal the System object to redraw (at least) this Window on the next render cycle.
            </summary>
        </member>
        <member name="M:CeGui.Window.Initialize">
            <summary>
                Complete initialiZation of window (required so derived classes can affect initialisation).
            </summary>
            <remarks>
                *MUST* be called before this window is used.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:CeGui.Window.Enable">
            <summary>
                Enables this window.
            </summary>
        </member>
        <member name="M:CeGui.Window.Disable">
            <summary>
                Disable this window.
            </summary>
        </member>
        <member name="M:CeGui.Window.Show">
            <summary>
                Show this window (make visible).
            </summary>
        </member>
        <member name="M:CeGui.Window.Hide">
            <summary>
                Hide this window.
            </summary>
        </member>
        <member name="M:CeGui.Window.CaptureInput">
            <summary>
                Capture input to this window.
            </summary>
        </member>
        <member name="M:CeGui.Window.ReleaseInput">
            <summary>
                Releases the capture of input from this window.
            </summary>
            <remarks>
            	If this Window does not have inputs captured, nothing happens.
            </remarks>
        </member>
        <member name="M:CeGui.Window.SetAreaRect(CeGui.Rect)">
            <summary>
            	Set the current area for the Window, this allows for setting of position and SizeF at the same time.  
            	Interpretation of the input value <paramref name="area"/> is dependant upon the current metrics system set for the Window.
            </summary>
            <param name="area">Rect that describes the new area for Window, in units consistent with the current metrics mode.</param>
        </member>
        <member name="M:CeGui.Window.SetFont(System.String)">
            <summary>
            	Set the font used by this Window.
            </summary>
            <param name="name">
            	Name of a Font object to be used by this Window.  
            	If <paramref name="name"/> is null or "", the default font will be used.
            </param>
            <exception cref="T:CeGui.UnknownObjectException">If the font with the specified name does not exist in the system.</exception>
        </member>
        <member name="M:CeGui.Window.SetFont(CeGui.Font)">
            <summary>
            	Set the font used by this Window.
            </summary>
            <param name="font">
            	Font object to be used by this Window.  
            	If <paramref name="font"/> is null, the default font will be used.
            </param>
        </member>
        <member name="M:CeGui.Window.SetMouseCursor(System.String,System.String)">
            <summary>
            	Set the mouse cursor image to be used when the mouse enters this window.	
            </summary>
            <param name="imagesetName">The name of the Imageset that contains the image to be used.</param>
            <param name="imageName">The name of the Image on <paramref name="imageset"/> that is to be used.</param>
        </member>
        <member name="M:CeGui.Window.SetMouseCursor(CeGui.Image)">
            <summary>
            	Sets the mouse cursor to use when the mouse is within this window.
            </summary>
            <param name="image">Mouse cursor image to use.</param>
        </member>
        <member name="M:CeGui.Window.SetRestoreCapture(System.Boolean)">
            <summary>
                Sets the 'restore old capture' mode to on / off.
            </summary>
            <remarks>
                Also sets the mode on all child controls. <p/>
                Note: Intended for use by composite control sub-classes.
            </remarks>
            <param name="restore">On or off.</param>
        </member>
        <member name="M:CeGui.Window.OnSized(CeGui.GuiEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.Sized"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnMoved(CeGui.GuiEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.Moved"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnTextChanged(CeGui.WindowEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.TextChanged"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnFontChanged(CeGui.GuiEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.FontChanged"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnAlphaChanged(CeGui.GuiEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.AlphaChanged"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnIDChanged(CeGui.GuiEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.IDChanged"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnShown(CeGui.GuiEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.Shown"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnHidden(CeGui.GuiEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.Hidden"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnEnabled(CeGui.GuiEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.Enabled"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnDisabled(CeGui.GuiEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.Disabled"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnMetricsChanged(CeGui.GuiEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.MetricsChanged"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnClippingChanged(CeGui.GuiEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.ClippingChanged"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnParentDestroyChanged(CeGui.GuiEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.ParentDestroyChanged"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnInheritsAlphaChanged(CeGui.GuiEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.InheritsAlphaChanged"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnAlwaysOnTopChanged(CeGui.GuiEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.AlwaysOnTopChanged"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnCaptureGained(CeGui.GuiEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.CaptureGained"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnCaptureLost(CeGui.GuiEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.CaptureLost"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnRenderingStarted(CeGui.GuiEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.RenderingStarted"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnRenderingEnded(CeGui.GuiEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.RenderingEnded"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnZChanged(CeGui.GuiEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.ZChanged"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnDestructionStarted(CeGui.GuiEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.DestructionStarted"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnActivated(CeGui.WindowEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.Activated"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnDeactivated(CeGui.WindowEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.Deactivated"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnParentSized(CeGui.WindowEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.ParentSized"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnChildAdded(CeGui.WindowEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.ChildAdded"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnChildRemoved(CeGui.WindowEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.ChildRemoved"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnMouseEnters(CeGui.MouseEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.MouseEnters"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnMouseLeaves(CeGui.MouseEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.MouseLeaves"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnMouseMove(CeGui.MouseEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.MouseMove"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnMouseWheel(CeGui.MouseEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.MouseWheel"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnMouseButtonsDown(CeGui.MouseEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.MouseButtonsDown"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnMouseButtonsUp(CeGui.MouseEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.MouseButtonsUp"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnMouseClicked(CeGui.MouseEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.MouseClicked"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnMouseDoubleClicked(CeGui.MouseEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.MouseDoubleClicked"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnMouseTripleClicked(CeGui.MouseEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.MouseTripleClicked"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnKeyDown(CeGui.KeyEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.KeyDown"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnKeyUp(CeGui.KeyEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.KeyUp"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.OnCharacter(CeGui.KeyEventArgs)">
            <summary>
                 Event trigger method for the <see cref="E:CeGui.Window.Character"/> event.
            </summary>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CeGui.Window.Dispose">
            <summary>
            Part of implementation of IDisposable
            </summary>
        </member>
        <member name="P:CeGui.Window.VerticalAlignment">
            <summary>
            Get the vertical alignment.
            
            Returns the vertical alignment for the window.  This setting affects how the windows position is
            interpreted relative to its parent.
            </summary>
            <value>
            One of the VerticalAlignment enumerated values.
            </value>
        </member>
        <member name="P:CeGui.Window.HorizontalAlignment">
            <summary>
            Get the horizontal alignment.
            
            Returns the horizontal alignment for the window.  This setting affects how the windows position is
            interpreted relative to its parent.
            </summary>
            <value>
            One of the HorizontalAlignment enumerated values.
            </value>
        </member>
        <member name="P:CeGui.Window.DestroyedByParent">
            <summary>
            	Get/Set whether or not this Window will automatically be destroyed when its parent Window is destroyed.
            </summary>
            <value>
            	true to have the Window auto-destroyed when its parent is destroyed (default), or false to have the Window
            	remain after its parent is destroyed.
            </value>
        </member>
        <member name="P:CeGui.Window.EffectiveAlpha">
            <summary>
            	Gets the effective alpha value that will be used when rendering this window, taking into account inheritance of parent
            	window(s) alpha.
            </summary>
            <value>The effective alpha that will be applied to this Window when rendering.  Will be between 0.0f and 1.0f.</value>
        </member>
        <member name="P:CeGui.Window.Font">
            <summary>
            	Returns the reference to the active Font for this window.
            </summary>
            <value>
            	Reference to the Font being used by this Window.  
            	If the window has no assigned font, the default font is returned.
            </value>
        </member>
        <member name="P:CeGui.Window.InheritsAlpha">
            <summary>
            	Get/Set whether this Window will inherit alpha from its parent windows.
            </summary>
            <value>true if the Window should use inherited alpha, or false if the Window should have an independant alpha value.</value>
        </member>
        <member name="P:CeGui.Window.AlwaysOnTop">
            <summary>
                Gets/Sets whether this window is 'always on top' or not.
            </summary>
            <value>
            	true if this Window is always show on top of other normal windows.  
            	false if the Window has normal z-order behavior.
            </value>
        </member>
        <member name="P:CeGui.Window.IsEnabled">
            <summary>
                Returns true if this window is in a disabled state.
            </summary>
        </member>
        <member name="P:CeGui.Window.IsDisabled">
            <summary>
                Returns true if this window is in a disabled state.
            </summary>
        </member>
        <member name="P:CeGui.Window.Visible">
            <summary>
                Returns true if this window is visible (not hidden).
            </summary>
        </member>
        <member name="P:CeGui.Window.IsActive">
            <summary>
                Returns true if this window is active. 
            </summary>
            <remarks>
                The active window is always the front most window.
            </remarks>
        </member>
        <member name="P:CeGui.Window.IsClippedByParent">
            <summary>
                Returns true if this window is to be clipped by it's parent.
            </summary>
        </member>
        <member name="P:CeGui.Window.Width">
            <summary>
                Gets/Sets the width of the window (in unspecified units).
            </summary>
        </member>
        <member name="P:CeGui.Window.Height">
            <summary>
                Gets/Sets the height of the window (in unspecified units).
            </summary>
            <remarks>
            	Interpretation of the value is dependant upon the current metrics system set for the Window.
            </remarks>
        </member>
        <member name="P:CeGui.Window.X">
            <summary>
                Get/Set the x position of the window.
            </summary>
            <remarks>Interpretation of return value depends upon the metric type in use by this window.</remarks>
            <value>
            	float value that specifies the x position of the Window relative to it's parent, depending on the metrics system in use for this
            	Window, this value will specify either pixels or a decimal fraction of the width of the parent Window.
            </value>
        </member>
        <member name="P:CeGui.Window.Y">
            <summary>
                Get/Set the y position of the window.
            </summary>
            <remarks>Interpretation of return value depends upon the metric type in use by this window.</remarks>
            <value>
            	float value that specifies the y position of the Window relative to it's parent, depending on the metrics system in use for this
            	Window, this value will specify either pixels or a decimal fraction of the width of the parent Window.
            </value>
        </member>
        <member name="P:CeGui.Window.ID">
            <summary>
                Gets/Sets the ID assigned to this window.
            </summary>
        </member>
        <member name="P:CeGui.Window.MaximumSize">
            <summary>
            	Get/Set the maximum SizeF for this window.
            </summary>
            <value>
            	SizeF describing the maximum SizeF for the window.  For absolute metrics, the SizeF values are in screen pixels,
            	for relative metrics the SizeF values are relative to the display SizeF.
            </value>
        </member>
        <member name="P:CeGui.Window.MinimumSize">
            <summary>
            	Set the minimum SizeF for this window.
            </summary>
            <value>
            	SizeF describing the minimum SizeF for the window.  For absolute metrics, the SizeF values are in screen pixels,
            	for relative metrics the SizeF values are relative to the display SizeF
            </value>
        </member>
        <member name="P:CeGui.Window.MetricsMode">
            <summary>
            	Gets/Sets the current metrics mode employed by the window.
            </summary>
            <value>One of the values of the <see cref="P:CeGui.Window.MetricsMode"/> enumerated type, that describes the metrics mode to be used by the Window.</value>
        </member>
        <member name="P:CeGui.Window.Cursor">
            <summary>
            	Get a reference to the mouse cursor image to use when the mouse is within this window.
            </summary>
        </member>
        <member name="P:CeGui.Window.Name">
            <summary>
            	The name of this window.
            </summary>
            <value>The unique name of this window.</value>
        </member>
        <member name="P:CeGui.Window.Parent">
            <summary>
                Gets/Sets a reference to this window's parent window.
            </summary>
        </member>
        <member name="P:CeGui.Window.ChildCount">
            <summary>
                Gets the number of child windows attached to this window.
            </summary>
        </member>
        <member name="P:CeGui.Window.ActiveChild">
            <summary>
                Gets a reference to the top-most active child window starting at 'this'.
            </summary>
            <remarks>
                Returns 'this' if it is 'this' window which is active.
                Returns null if neither this window nor any children are active.
            </remarks>
        </member>
        <member name="P:CeGui.Window.Alpha">
            <summary>
            	Get/Set the current alpha value for this window.
            </summary>
            <remarks>
            	The alpha value set for any given window may or may not be the final alpha value that is used when rendering.  All window
            	objects, by default, inherit alpha from thier parent window(s) - this will blend child windows, relatively, down the line of
            	inheritance.  This behavior can be overridden via <see cref="P:CeGui.Window.InheritsAlpha"/>.  To return the true alpha value that will be
            	applied when rendering, use <see cref="P:CeGui.Window.EffectiveAlpha"/>.
            </remarks>
        </member>
        <member name="P:CeGui.Window.InnerRect">
            <summary>
            	Gets a Rect describing the clipped inner area for this window.
            </summary>
            <value>Rect describing, in appropriately clipped screen pixel co-ordinates, the window object's inner Rect area.</value>
        </member>
        <member name="P:CeGui.Window.IsCapturedByThis">
            <summary>
                Returns true if input is captured by 'this'.
            </summary>
        </member>
        <member name="P:CeGui.Window.IsCapturedByAncestor">
            <summary>
                Returns true if input is capptured by some ancestor of 'this'.
            </summary>
        </member>
        <member name="P:CeGui.Window.IsCapturedByChild">
            <summary>
                Returns true if input is captured by a child of 'this'.
            </summary>
        </member>
        <member name="P:CeGui.Window.PixelRect">
            <summary>
            	Gets a Rect describing the Window area in screen space.
            </summary>
            <remarks>
            	This has been made virtual to ease some customisations that require more specialised clipping requirements.
            </remarks>
            <value>
            	Rect object that describes the area covered by the Window.  The values in the returned Rect are in screen pixels.  The
            	returned Rect is clipped as appropriate and depending upon the 'ClippedByParent' setting.
            </value>
        </member>
        <member name="P:CeGui.Window.Position">
            <summary>
            	Get/Set the position of the window.
            </summary>
            <remarks>Interpretation of return value depends upon the metric type in use by this window.</remarks>
            <value>
            	Point that describes the position of the Window relative to it's parent, depending on the metrics system in use for this
            	Window, the values in the Point will specify either pixels or decimal fractions of the total width and height of the parent.
            </value>
        </member>
        <member name="P:CeGui.Window.Rect">
            <summary>
            	Gets a Rect object that describes the Window area.
            </summary>
            <value>
            	Rect that describes the area covered by the Window.  The values in the returned Rect are in whatever form is set
            	as the current metric type.  The returned Rect is unclipped and relative to the Window objects parent.
            </value>
        </member>
        <member name="P:CeGui.Window.Size">
            <summary>
            	Get/Set the SizeF of the window.
            </summary>
            <remarks>Interpretation of return value depends upon the metric type in use by this window.</remarks>
            <value>
            	SizeF that describes the dimensions of the Window.  Depending upon the metrics system in use for this window, the
            	values will either be in pixels, or as decimal fractions of the width and height of the parent Window.
            </value>
        </member>
        <member name="P:CeGui.Window.Text">
            <summary>
                Gets/Sets the window's text string.
            </summary>
        </member>
        <member name="P:CeGui.Window.UnclippedInnerRect">
            <summary>
            	Return a Rect that describes, unclipped, the inner Rect for this window.  The inner Rect is
            	typically an area that excludes some frame or other rendering that should not be touched by subsequent rendering.
            </summary>
            <value>
            	Rect that describes, in unclipped screen pixel co-ordinates, the window object's inner Rect area.
            </value>
        </member>
        <member name="P:CeGui.Window.UnclippedPixelRect">
            <summary>
            	Gets a Rect describing the Window area unclipped, in screen space.
            </summary>
            <value>
            	Rect that describes the area covered by the Window.  The values in the returned 
            	Rect are in screen pixels.  The returned Rect is fully unclipped.
            </value>
        </member>
        <member name="P:CeGui.Window.CaptureWindow">
            <summary>
                Returns a references to the window that currently has input capture, or null if none.
            </summary>
        </member>
        <member name="P:CeGui.Window.AbsoluteX">
            <summary>
            	Return the window X position in absolute metrics.
            </summary>
            <value>float value describing this windows X position, relative to the parent window, in absolute metrics.</value>
        </member>
        <member name="P:CeGui.Window.AbsoluteY">
            <summary>
            	Return the window Y position in absolute metrics.
            </summary>
            <value>float value describing this windows Y position, relative to the parent window, in absolute metrics.</value>
        </member>
        <member name="P:CeGui.Window.AbsoluteSize">
            <summary>
            	Return the window SizeF in absolute metrics.
            </summary>
            <value>SizeF describing this windows SizeF in absolute metrics.</value>
        </member>
        <member name="P:CeGui.Window.AbsoluteWidth">
            <summary>
            	Return the window width in absolute metrics.
            </summary>
            <value>float value describing this windows width in absolute metrics.</value>
        </member>
        <member name="P:CeGui.Window.AbsoluteHeight">
            <summary>
            	Return the window height in absolute metrics.
            </summary>
            <value>float value describing this windows height in absolute metrics.</value>
        </member>
        <member name="E:CeGui.Window.Sized">
            <summary>
            	Window SizeF has changed.
            </summary>
        </member>
        <member name="E:CeGui.Window.Moved">
            <summary>
                Window position has changed.
            </summary>
        </member>
        <member name="E:CeGui.Window.TextChanged">
            <summary>
            	Text string for the Window has changed.
            </summary>
        </member>
        <member name="E:CeGui.Window.FontChanged">
            <summary>
                Font object for the Window has been changed.
            </summary>
        </member>
        <member name="E:CeGui.Window.AlphaChanged">
            <summary>
                Alpha blend value for the Window has changed.
            </summary>
        </member>
        <member name="E:CeGui.Window.IDChanged">
            <summary>
                Client assigned ID code for the Window has changed.
            </summary>
        </member>
        <member name="E:CeGui.Window.Shown">
            <summary>
                Window has been made visible.
            </summary>
        </member>
        <member name="E:CeGui.Window.Hidden">
            <summary>
                Window has been hidden from view.
            </summary>
        </member>
        <member name="E:CeGui.Window.Enabled">
            <summary>
                Window has been enabled (interaction is possible).
            </summary>
        </member>
        <member name="E:CeGui.Window.Disabled">
            <summary>
                Window has been disabled (interaction is no longer possible).
            </summary>
        </member>
        <member name="E:CeGui.Window.MetricsChanged">
            <summary>
                Active metrics mode has been modified.
            </summary>
        </member>
        <member name="E:CeGui.Window.ClippingChanged">
            <summary>
                Clipping by parent mode has been modified.
            </summary>
        </member>
        <member name="E:CeGui.Window.ParentDestroyChanged">
            <summary>
                Destruction by parent mode has been modified.
            </summary>
        </member>
        <member name="E:CeGui.Window.InheritsAlphaChanged">
            <summary>
                Alpha inherited from parent mode has been modified.
            </summary>
        </member>
        <member name="E:CeGui.Window.AlwaysOnTopChanged">
            <summary>
                Always on top mode has been modified.
            </summary>
        </member>
        <member name="E:CeGui.Window.CaptureGained">
            <summary>
                Window has captured all inputs.
            </summary>
        </member>
        <member name="E:CeGui.Window.CaptureLost">
            <summary>
                Window has lost it's capture on inputs.
            </summary>
        </member>
        <member name="E:CeGui.Window.RenderingStarted">
            <summary>
                Rendering of the Window has started.
            </summary>
        </member>
        <member name="E:CeGui.Window.RenderingEnded">
            <summary>
                Rendering for the Window has finished.
            </summary>
        </member>
        <member name="E:CeGui.Window.ZChanged">
            <summary>
                The z-order of the window has changed.
            </summary>
        </member>
        <member name="E:CeGui.Window.DestructionStarted">
            <summary>
                Destruction of the Window is about to begin.
            </summary>
        </member>
        <member name="E:CeGui.Window.Activated">
            <summary>
            	Window has been activated (has input focus).
            </summary>
        </member>
        <member name="E:CeGui.Window.Deactivated">
            <summary>
            	Window has been deactivated (loses input focus).
            </summary>
        </member>
        <member name="E:CeGui.Window.ParentSized">
            <summary>
            	Parent of this Window has been re-sized.
            </summary>
        </member>
        <member name="E:CeGui.Window.ChildAdded">
            <summary>
            	A child Window has been added.
            </summary>
        </member>
        <member name="E:CeGui.Window.ChildRemoved">
            <summary>
            	A child window has been removed.
            </summary>
        </member>
        <member name="E:CeGui.Window.MouseEnters">
            <summary>
            	Mouse cursor has entered the Window.
            </summary>
        </member>
        <member name="E:CeGui.Window.MouseLeaves">
            <summary>
            	Mouse cursor has left the Window.
            </summary>
        </member>
        <member name="E:CeGui.Window.MouseMove">
            <summary>
            	Mouse cursor was moved within the area of the Window.
            </summary>
        </member>
        <member name="E:CeGui.Window.MouseWheel">
            <summary>
            	Mouse wheel was scrolled within the Window.
            </summary>
        </member>
        <member name="E:CeGui.Window.MouseButtonsDown">
            <summary>
            	A mouse button was pressed down within the Window.
            </summary>
        </member>
        <member name="E:CeGui.Window.MouseButtonsUp">
            <summary>
            	A mouse button was released within the Window.
            </summary>
        </member>
        <member name="E:CeGui.Window.MouseClicked">
            <summary>
            	A mouse button was clicked (down then up) within the Window.
            </summary>
        </member>
        <member name="E:CeGui.Window.MouseDoubleClicked">
            <summary>
            	A mouse button was double-clicked within the Window.
            </summary>
        </member>
        <member name="E:CeGui.Window.MouseTripleClicked">
            <summary>
            	A mouse button was triple-clicked within the Window.
            </summary>
        </member>
        <member name="E:CeGui.Window.KeyDown">
            <summary>
            	A key on the keyboard was pressed.
            </summary>
        </member>
        <member name="E:CeGui.Window.KeyUp">
            <summary>
            	A key on the keyboard was released.
            </summary>
        </member>
        <member name="E:CeGui.Window.Character">
            <summary>
            	A text character was typed on the keyboard.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.BaseButton.DefaultNormalLabelColor">
            <summary>
            	Default color used when rendering label text in normal state.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.BaseButton.DefaultHoverLabelColor">
            <summary>
            	Default color used when rendering label text in hover / highlight state.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.BaseButton.DefaultPushedLabelColor">
            <summary>
            	Default color used when rendering label text in pushed state.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.BaseButton.DefaultDisabledLabelColor">
            <summary>
            	Default color used when rendering label text in disabled state.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.BaseButton.isPushed">
            <summary>
            	true when this button is pushed.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.BaseButton.isHovering">
            <summary>
            	true when the button is in 'hover' state and requires the hover rendering.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.BaseButton.normalColor">
            <summary>
            	Color used for label text when rendering in normal state.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.BaseButton.hoverColor">
            <summary>
            	Color used for label text when rendering in highlighted state.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.BaseButton.pushedColor">
            <summary>
            	Color used for label text when rendering in pushed state.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.BaseButton.disabledColor">
            <summary>
            	Color used for label text when rendering in disabled state.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.BaseButton.#ctor(System.String,System.String)">
            <summary>
            	Constructor.
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="M:CeGui.Widgets.BaseButton.UpdateInternalState(System.Drawing.PointF)">
            <summary>
            	Update the internal state of the widget with the mouse at the given position.
            </summary>
            <param name="mousePosition">The location of the mouse cursor (in screen pixel co-ordinates).</param>
        </member>
        <member name="M:CeGui.Widgets.BaseButton.DrawNormal(System.Single)">
            <summary>
            	Render the button-type widget in it's 'normal' state.
            </summary>
            <param name="z">float value specifying the base Z co-ordinate that should be used when rendering.</param>
        </member>
        <member name="M:CeGui.Widgets.BaseButton.DrawHover(System.Single)">
            <summary>
            	Render the button-type widget in it's 'hover' (highlighted) state.
            </summary>
            <param name="z">float value specifying the base Z co-ordinate that should be used when rendering.</param>
        </member>
        <member name="M:CeGui.Widgets.BaseButton.DrawPushed(System.Single)">
            <summary>
            	Render the button-type widget in it's 'pushed' state.
            </summary>
            <param name="z">float value specifying the base Z co-ordinate that should be used when rendering.</param>
        </member>
        <member name="M:CeGui.Widgets.BaseButton.DrawDisabled(System.Single)">
            <summary>
            	Render the button-type widget in it's 'disabled' state.
            </summary>
            <param name="z">float value specifying the base Z co-ordinate that should be used when rendering.</param>
        </member>
        <member name="M:CeGui.Widgets.BaseButton.DrawSelf(System.Single)">
            <summary>
            	Perform the rendering for this widget.
            </summary>
            <param name="z">float value specifying the base Z co-ordinate that should be used when rendering.</param>
        </member>
        <member name="P:CeGui.Widgets.BaseButton.IsHovering">
            <summary>
            	Returns true if user is hovering over this widget (or it's pushed and user is not over it for highlight).
            </summary>
            <value>true if the user is hovering or if the button is pushed and the mouse is not over the button.  Otherwise return false.</value>
        </member>
        <member name="P:CeGui.Widgets.BaseButton.IsPushed">
            <summary>
            	Returns true if the button widget is in the pushed state.
            </summary>
            <value>true if the button-type widget is pushed, false if the widget is not pushed.</value>
        </member>
        <member name="P:CeGui.Widgets.BaseButton.NormalTextColor">
            <summary>
            	Get/Set the text label color used for normal rendering.
            </summary>
            <value>Color value.</value>
        </member>
        <member name="P:CeGui.Widgets.BaseButton.HoverTextColor">
            <summary>
            	Get/Set the text label color used for hovered state rendering.
            </summary>
            <value>Color value.</value>
        </member>
        <member name="P:CeGui.Widgets.BaseButton.PushedTextColor">
            <summary>
            	Get/Set the text label color used for pushed state rendering.
            </summary>
            <value>Color value.</value>
        </member>
        <member name="P:CeGui.Widgets.BaseButton.DisabledTextColor">
            <summary>
            	Get/Set the text label color used for disabled state rendering.
            </summary>
            <value>Color value.</value>
        </member>
        <member name="T:CeGui.RenderableFrame">
            <summary>
            	A higher order GUI entity that represents a renderable frame.
            </summary>
            <remarks>
            	This class is intended to be used where a (usually top-level) GUI element needs to draw a frame that is constructed from
            	a collection of Images.  It is possible to specify the image to use for each of the four corners, which are placed appropriately
            	at their natural SizeF, and the images for the four edges, which are stretched to cover the area between any corner images.  Any
            	of the Images may be omitted, in which case that part of the frame is not drawn.  If the GUI element uses only one image for its
            	frame (usually stretched over the entire area of the element) then a better choice would be to use a RenderableImage, or perform the
            	rendering directly instead.
            </remarks>
        </member>
        <member name="T:CeGui.RenderableElement">
            <summary>
            	Base class for all renderable elements.
            </summary>
        </member>
        <member name="F:CeGui.RenderableElement.next">
            <summary>
            	Link to another RenderableElement.
            </summary>
        </member>
        <member name="F:CeGui.RenderableElement.colors">
            <summary>
            	Colors to be used for this element.
            </summary>
        </member>
        <member name="F:CeGui.RenderableElement.area">
            <summary>
            	Currently defined area for this element.
            </summary>
        </member>
        <member name="M:CeGui.RenderableElement.#ctor">
            <summary>
            	Constructor.
            </summary>
        </member>
        <member name="M:CeGui.RenderableElement.Draw(CeGui.Vector3,CeGui.Rect)">
            <summary>
            	Draw the element chain starting with this element.
            </summary>
            <param name="position">
            	Vector3 object describing the base position to be used when rendering the element chain.  Each element
            	in the chain will be offset from this position by it's own internal position setting.
            </param>
            <param name="clipRect">Rect describing the clipping area.  No rendering will appear outside this area.</param>
        </member>
        <member name="M:CeGui.RenderableElement.SetColors(CeGui.ColourRect)">
            <summary>
            	Sets the colors to be applied when rendering the element.
            </summary>
            <param name="colors">ColorRect object describing the colors to be used.</param>
        </member>
        <member name="M:CeGui.RenderableElement.SetColors(CeGui.Colour,CeGui.Colour,CeGui.Colour,CeGui.Colour)">
            <summary>
            	Sets the colors to be applied when rendering the element.
            </summary>
            <param name="topLeft">Color to be applied to the top-left corner of each Image used in the element.</param>
            <param name="topRight">Color to be applied to the top-right corner of each Image used in the element.</param>
            <param name="bottomLeft">Color to be applied to the bottom-left corner of each Image used in the element.</param>
            <param name="bottomRight">Color to be applied to the bottom-right corner of each Image used in the element.</param>
        </member>
        <member name="M:CeGui.RenderableElement.DrawImpl(CeGui.Vector3,CeGui.Rect)">
            <summary>
            	This function performs the required rendering for this element.
            </summary>
            <param name="position">Vector3 describing the final rendering position for the object.</param>
            <param name="clipRect">Rect describing the clipping area for the rendering.  No rendering will be performed outside this area.</param>
        </member>
        <member name="P:CeGui.RenderableElement.Colors">
            <summary>
            	Get the rendering colors set for this RenderableElement.
            </summary>
            <value>ColourRect describing the colors to be used when rendering this RenderableElement.</value>
        </member>
        <member name="P:CeGui.RenderableElement.NextElement">
            <summary>
            	Get/Set another REnderableElement to this one.
            </summary>
            <remarks>
            	The linked element will be drawn whenever this element is drawn using the same base position and clipping area
            	as provided when the <see cref="M:CeGui.RenderableElement.Draw(CeGui.Vector3,CeGui.Rect)"/> method is called.  Whole chains of Renderable Elements can be
            	created using this system.
            </remarks>
            <value>Reference of a RenderableElement object that will be linked to this element.</value>
        </member>
        <member name="P:CeGui.RenderableElement.Position">
            <summary>
            	Get/Set the offset position of this RenderableElement.
            </summary>
            <value>
            	Point describing the offset position that this RenderableElement is to be rendered at.  This
            	value is added to whatever position is specified when the <see cref="M:CeGui.RenderableElement.Draw(CeGui.Vector3,CeGui.Rect)"/> method 
            	is called to obtain the final rendering position.
            </value>
        </member>
        <member name="P:CeGui.RenderableElement.Rect">
            <summary>
            	Get/Set the area for the element.
            </summary>
            <value>Rect describing the pixel area (offset from some unknown location) of the frame.</value>
        </member>
        <member name="P:CeGui.RenderableElement.Size">
            <summary>
            	Get/Set the SizeF of this element.
            </summary>
            <value>SizeF object describing the current SizeF of the RenderableElement.</value>
        </member>
        <member name="F:CeGui.RenderableFrame.topLeft">
            <summary>
            	Image to draw for the top-left corner.
            </summary>
        </member>
        <member name="F:CeGui.RenderableFrame.topRight">
            <summary>
            	Image to draw for the top-right corner.
            </summary>
        </member>
        <member name="F:CeGui.RenderableFrame.bottomLeft">
            <summary>
            	Image to draw for the bottom-left corner.
            </summary>
        </member>
        <member name="F:CeGui.RenderableFrame.bottomRight">
            <summary>
            	Image to draw for the bottom-right corner.
            </summary>
        </member>
        <member name="F:CeGui.RenderableFrame.left">
            <summary>
            	Image to draw for the left edge.
            </summary>
        </member>
        <member name="F:CeGui.RenderableFrame.top">
            <summary>
            	Image to draw for the right edge.
            </summary>
        </member>
        <member name="F:CeGui.RenderableFrame.right">
            <summary>
            	Image to draw for the top edge.
            </summary>
        </member>
        <member name="F:CeGui.RenderableFrame.bottom">
            <summary>
            	Image to draw for the bottom edge.
            </summary>
        </member>
        <member name="M:CeGui.RenderableFrame.#ctor">
            <summary>
            	Default constructor.
            </summary>
        </member>
        <member name="M:CeGui.RenderableFrame.SetImages(CeGui.Image,CeGui.Image,CeGui.Image,CeGui.Image,CeGui.Image,CeGui.Image,CeGui.Image,CeGui.Image)">
            <summary>
            	Specify the Image objects to use for each part of the frame.
            </summary>
            <remarks>
            	'null' may be used for any parameter to omit any part of the frame.
            </remarks>
            <param name="topLeft">Reference to an Image object to render as the top-left corner of the frame.</param>
            <param name="topRight">Reference to an Image object to render as the top-right corner of the frame.</param>
            <param name="bottomLeft">Reference to an Image object to render as the bottom-left corner of the frame.</param>
            <param name="bottomRight">Reference to an Image object to render as the bottom-right corner of the frame.</param>
            <param name="left">Reference to an Image object to render as the left corner of the frame.</param>
            <param name="top">Reference to an Image object to render as the top corner of the frame.</param>
            <param name="right">Reference to an Image object to render as the right corner of the frame.</param>
            <param name="bottom">Reference to an Image object to render as the bottom corner of the frame.</param>
        </member>
        <member name="M:CeGui.RenderableFrame.DrawImpl(CeGui.Vector3,CeGui.Rect)">
            <summary>
            
            </summary>
            <param name="position"></param>
            <param name="clipRect"></param>
        </member>
        <member name="T:CeGui.ImagerySection">
            <summary>
            Class that encapsulates a re-usable collection of imagery specifications.
            </summary>
        </member>
        <member name="F:CeGui.ImagerySection.name">
            <summary>
            Holds the name of the ImagerySection.
            </summary>
        </member>
        <member name="F:CeGui.ImagerySection.masterColors">
            <summary>
            Master colours for the the ImagerySection (combined with colours of each ImageryComponent).
            </summary>
        </member>
        <member name="F:CeGui.ImagerySection.frames">
            <summary>
            Collection of FrameComponent objects to be drawn for this ImagerySection.
            </summary>
        </member>
        <member name="F:CeGui.ImagerySection.images">
            <summary>
            Collection of ImageryComponent objects to be drawn for this ImagerySection.
            </summary>
        </member>
        <member name="F:CeGui.ImagerySection.texts">
            <summary>
            Collection of TextComponent objects to be drawn for this ImagerySection.
            </summary>
        </member>
        <member name="F:CeGui.ImagerySection.colorPropertyName">
            <summary>
            name of property to fetch colours from.
            </summary>
        </member>
        <member name="F:CeGui.ImagerySection.colorPropertyIsRect">
            <summary>
            true if the colour property will fetch a full ColourRect.
            </summary>
        </member>
        <member name="M:CeGui.ImagerySection.#ctor">
            <summary>
            Constructors
            </summary>
        </member>
        <member name="M:CeGui.ImagerySection.#ctor(System.String)">
            <summary>
            ImagerySection constructor.  Name must be supplied, masterColours are set to 0xFFFFFFFF by default.
            </summary>
            <param name="name">Name of the new ImagerySection.</param>
        </member>
        <member name="M:CeGui.ImagerySection.Render(CeGui.Window,System.Single,CeGui.ColourRect,CeGui.Rect,System.Boolean)">
            <summary>
            Render this ImagerySection.
            </summary>
            <param name="srcWindow">Window to use when calculating pixel values from BaseDim values.</param>
            <param name="base_z">base level z value to use for all imagery in the layer.</param>
            <param name="modcols">ColourRect specifying colours to be modulated with the ImagerySection's master colours.  May be 0.</param>
            <param name="clipper"></param>
            <param name="clipToDisplay"></param>
        </member>
        <member name="M:CeGui.ImagerySection.Render(CeGui.Window,System.Single,CeGui.ColourRect,CeGui.Rect)">
            <summary>
            Render this ImagerySection.
            </summary>
            <param name="srcWindow">Window to use when calculating pixel values from BaseDim values.</param>
            <param name="base_z">base level z value to use for all imagery in the layer.</param>
            <param name="modcols">ColourRect specifying colours to be modulated with the ImagerySection's master colours.  May be 0.</param>
            <param name="clipper"></param>
        </member>
        <member name="M:CeGui.ImagerySection.Render(CeGui.Window,System.Single,CeGui.ColourRect)">
            <summary>
            Render this ImagerySection.
            </summary>
            <param name="srcWindow">Window to use when calculating pixel values from BaseDim values.</param>
            <param name="base_z">base level z value to use for all imagery in the layer.</param>
            <param name="modcols">ColourRect specifying colours to be modulated with the ImagerySection's master colours.  May be 0.</param>
        </member>
        <member name="M:CeGui.ImagerySection.Render(CeGui.Window,System.Single)">
            <summary>
            Render this ImagerySection.
            </summary>
            <param name="srcWindow">Window to use when calculating pixel values from BaseDim values.</param>
            <param name="base_z">base level z value to use for all imagery in the layer.</param>
        </member>
        <member name="M:CeGui.ImagerySection.Render(CeGui.Window,CeGui.Rect,System.Single,CeGui.ColourRect,CeGui.Rect,System.Boolean)">
            <summary>
            Render this ImagerySection.
            </summary>
            <param name="srcWindow">Window to use when calculating pixel values from BaseDim values.</param>
            <param name="baseRect">Rect to use when calculating pixel values from BaseDim values.</param>
            <param name="base_z">base level z value to use for all imagery in the layer.</param>
            <param name="modcols">ColourRect specifying colours to be modulated with the ImagerySection's master colours.  May be 0.</param>
            <param name="clipper"></param>
            <param name="clipToDisplay"></param>
        </member>
        <member name="M:CeGui.ImagerySection.Render(CeGui.Window,CeGui.Rect,System.Single,CeGui.ColourRect,CeGui.Rect)">
            <summary>
            Render this ImagerySection.
            </summary>
            <param name="srcWindow">Window to use when calculating pixel values from BaseDim values.</param>
            <param name="baseRect">Rect to use when calculating pixel values from BaseDim values.</param>
            <param name="base_z">base level z value to use for all imagery in the layer.</param>
            <param name="modcols">ColourRect specifying colours to be modulated with the ImagerySection's master colours.  May be 0.</param>
            <param name="clipper"></param>
        </member>
        <member name="M:CeGui.ImagerySection.Render(CeGui.Window,CeGui.Rect,System.Single,CeGui.ColourRect)">
            <summary>
            Render this ImagerySection.
            </summary>
            <param name="srcWindow">Window to use when calculating pixel values from BaseDim values.</param>
            <param name="baseRect">Rect to use when calculating pixel values from BaseDim values.</param>
            <param name="base_z">base level z value to use for all imagery in the layer.</param>
            <param name="modcols">ColourRect specifying colours to be modulated with the ImagerySection's master colours.  May be 0.</param>
        </member>
        <member name="M:CeGui.ImagerySection.Render(CeGui.Window,CeGui.Rect,System.Single)">
            <summary>
            Render this ImagerySection.
            </summary>
            <param name="srcWindow">Window to use when calculating pixel values from BaseDim values.</param>
            <param name="baseRect">Rect to use when calculating pixel values from BaseDim values.</param>
            <param name="base_z">base level z value to use for all imagery in the layer.</param>
        </member>
        <member name="M:CeGui.ImagerySection.AddImageryComponent(CeGui.ImageryComponent)">
            <summary>
            Add an ImageryComponent to this ImagerySection.
            </summary>
            <param name="image">ImageryComponent to be added to the section (a copy is made)</param>
        </member>
        <member name="M:CeGui.ImagerySection.ClearImageryComponents">
            <summary>
            Clear all ImageryComponents from this ImagerySection.
            </summary>
        </member>
        <member name="M:CeGui.ImagerySection.AddTextComponent(CeGui.TextComponent)">
            <summary>
            Add a TextComponent to this ImagerySection.
            </summary>
            <param name="text">TextComponent to be added to the section (a copy is made)</param>
        </member>
        <member name="M:CeGui.ImagerySection.ClearTextComponents">
            <summary>
            Clear all TextComponents from this ImagerySection.
            </summary>
        </member>
        <member name="M:CeGui.ImagerySection.AddFrameComponent(CeGui.FrameComponent)">
            <summary>
            Add a FrameComponent to this ImagerySection.
            </summary>
            <param name="frame">FrameComponent to be added to the section (a copy is made)</param>
        </member>
        <member name="M:CeGui.ImagerySection.ClearFrameComponents">
            <summary>
            Clear all FrameComponents from this ImagerySection.
            </summary>
        </member>
        <member name="M:CeGui.ImagerySection.GetBoundingRect(CeGui.Window)">
            <summary>
            Return smallest Rect that could contain all imagery within this section.
            </summary>
            <param name="wnd"></param>
            <returns></returns>
        </member>
        <member name="M:CeGui.ImagerySection.GetBoundingRect(CeGui.Window,CeGui.Rect)">
            <summary>
            Return smallest Rect that could contain all imagery within this section.
            </summary>
            <param name="wnd"></param>
            <param name="Rect">section of window to examine</param>
            <returns></returns>
        </member>
        <member name="M:CeGui.ImagerySection.InitMasterColorRect(CeGui.Window,CeGui.ColourRect)">
             <summary>
                Helper method to initialise a ColourRect with appropriate values according to the way the
                ImagerySection is set up.
            
                This will try and get values from multiple places:
                    - a property attached to \a wnd
                    - or the integral d_masterColours value.
             </summary>
             <param name="wnd"></param>
             <param name="cr"></param>
        </member>
        <member name="P:CeGui.ImagerySection.MasterColors">
            <summary>
            Return the current master colours set for this ImagerySection.
            </summary>
        </member>
        <member name="P:CeGui.ImagerySection.Name">
            <summary>
            Return the name of this ImagerySection.
            </summary>
        </member>
        <member name="P:CeGui.ImagerySection.MasterColorPropertySource">
            <summary>
            Set the name of the property where master colour values can be obtained.
            </summary>
        </member>
        <member name="P:CeGui.ImagerySection.MasterColorPropertyIsRect">
            <summary>
            Set whether the master colours property source represents a full ColourRect.
            </summary>
        </member>
        <member name="T:CeGui.ModifierKeys">
            <summary>Keys that modify the default behavior of gui elements when pressed</summary>
        </member>
        <member name="F:CeGui.ModifierKeys.None">
            <summary>No modifier is being applied</summary>
        </member>
        <member name="F:CeGui.ModifierKeys.Control">
            <summary>One of the control keys is being held</summary>
        </member>
        <member name="F:CeGui.ModifierKeys.Alt">
            <summary>One of the alternate keys is being held</summary>
        </member>
        <member name="F:CeGui.ModifierKeys.Shift">
            <summary>One of the shift keys is being held</summary>
        </member>
        <member name="F:CeGui.ModifierKeys.CapsLock">
            <summary>The caps lock key is being held</summary>
        </member>
        <member name="T:CeGui.LoggingLevel">
            <summary>Various levels of logging during runtime</summary>
        </member>
        <member name="F:CeGui.LoggingLevel.Errors">
            <summary>Only actual error conditions will be logged</summary>
        </member>
        <member name="F:CeGui.LoggingLevel.Standard">
            <summary>Basic events will be logged (default level)</summary>
        </member>
        <member name="F:CeGui.LoggingLevel.Informative">
            <summary>Useful tracing (object creations etc) information will be logged</summary>
        </member>
        <member name="F:CeGui.LoggingLevel.Insane">
            <summary>
              Mostly everything gets logged (use for heavy tracing only, log WILL be big)
            </summary>
        </member>
        <member name="T:CeGui.HorizontalImageFormat">
            <summary>
            	Horizontal formatting options for a <see cref="T:CeGui.RenderableImage"/>.
            </summary>
        </member>
        <member name="F:CeGui.HorizontalImageFormat.LeftAligned">
            <summary>
            	Image will be rendered at it's natural SizeF and with it's left edge aligned
              with the left edge of the RenderableImage Rect.
            </summary>
        </member>
        <member name="F:CeGui.HorizontalImageFormat.RightAligned">
            <summary>
            	Image will be rendered at it's natural SizeF and with it's right edge aligned
              with the right edge of the RenderableImage Rect.
            </summary>
        </member>
        <member name="F:CeGui.HorizontalImageFormat.Centered">
            <summary>
            	Image will be rendered at it's natural SizeF and horizontally centered
              within the RenderableImage Rect.
            </summary>
        </member>
        <member name="F:CeGui.HorizontalImageFormat.Stretched">
            <summary>
            	Image will be horizontally stretched to cover the entire width of
              the RenderableImage Rect.
            </summary>
        </member>
        <member name="F:CeGui.HorizontalImageFormat.Tiled">
            <summary>
            	Image will be tiled horizontally across the width of the RenderableImage Rect.
              The rightmost tile will be clipped to remain within the Rect.
            </summary>
        </member>
        <member name="T:CeGui.HorizontalTextFormat">
            <summary>
            	Contains valid formatting types that can be specified when rendering text into
              a <see cref="T:CeGui.Rect"/> area (the formatting Rect).
            </summary>
        </member>
        <member name="F:CeGui.HorizontalTextFormat.Left">
            <summary>
            	All text is printed on a single line.
            	The left-most character is aligned with the left edge of the formatting Rect.
            </summary>
        </member>
        <member name="F:CeGui.HorizontalTextFormat.Right">
            <summary>
            	All text is printed on a single line.
            	The right-most character is aligned with the right edge of the formatting Rect.
            </summary>
        </member>
        <member name="F:CeGui.HorizontalTextFormat.Center">
            <summary>
            	All text is printed on a single line.
            	The text is centred horizontally in the formatting Rect.
            </summary>
        </member>
        <member name="F:CeGui.HorizontalTextFormat.WordWrapLeft">
            <summary>
            	Text is broken into multiple lines no wider than the formatting Rect.
            	The left-most character of each line is aligned with the left edge of the formatting Rect.
            </summary>
        </member>
        <member name="F:CeGui.HorizontalTextFormat.WordWrapRight">
            <summary>
            	Text is broken into multiple lines no wider than the formatting Rect.
            	The right-most character of each line is aligned with the right edge of
              the formatting Rect.
            </summary>
        </member>
        <member name="F:CeGui.HorizontalTextFormat.WordWrapCentered">
            <summary>
            	Text is broken into multiple lines no wider than the formatting Rect.
            	Each line is centred horizontally in the formatting Rect.
            </summary>
        </member>
        <member name="T:CeGui.VerticalTextFormat">
            <summary>
            	Vertical formatting options for a static text widgets.
            </summary>
        </member>
        <member name="F:CeGui.VerticalTextFormat.Top">
            <summary>
            	Text is output with the top of first line of text aligned with the top edge of the widget.
            </summary>
        </member>
        <member name="F:CeGui.VerticalTextFormat.Bottom">
            <summary>
            	Text is output with the bottom of last line of text aligned with the bottom edge of
              the widget.
            </summary>
        </member>
        <member name="F:CeGui.VerticalTextFormat.Centered">
            <summary>
            	Text is output vertically centered within the widget.
            </summary>
        </member>
        <member name="T:CeGui.VerticalImageFormat">
            <summary>
            	Vertical formatting options for a <see cref="T:CeGui.RenderableImage"/>.
            </summary>
        </member>
        <member name="F:CeGui.VerticalImageFormat.TopAligned">
            <summary>
            	Image will be rendered at it's natural size and with it's top edge aligned with
              the top edge of the RenderableImage Rect.
            </summary>
        </member>
        <member name="F:CeGui.VerticalImageFormat.BottomAligned">
            <summary>
            	Image will be rendered at it's natural size and with it's bottom edge aligned with
              the bottom edge of the RenderableImage Rect.
            </summary>
        </member>
        <member name="F:CeGui.VerticalImageFormat.Centered">
            <summary>
            	Image will be rendered at it's natural size and vertically centered within
              the RenderableImage Rect.
            </summary>
        </member>
        <member name="F:CeGui.VerticalImageFormat.Stretched">
            <summary>
            	Image will be vertically stretched to cover the entire height of
              the RenderableImage Rect.
            </summary>
        </member>
        <member name="F:CeGui.VerticalImageFormat.Tiled">
            <summary>
            	Image will be tiled vertically down the height of the RenderableImage Rect.
              The bottommost tile will be clipped to remain within the Rect.
            </summary>
        </member>
        <member name="T:CeGui.MetricsMode">
            <summary>
            	Mode used for Window SizeF and position metrics.
            </summary>
            <remarks>
            	Position information for a Window is always 'relative' to it's parent even in Absolute mode.
            	In Relative mode, layout is maintained for different screen resolutions, and also offers the
            	ability for child windows to properly adjust their layout as their parent is sized.
            </remarks>
        </member>
        <member name="F:CeGui.MetricsMode.Relative">
            <summary>
            	Metrics are specified as a decimal fraction of parent Window SizeF.
            </summary>
        </member>
        <member name="F:CeGui.MetricsMode.Absolute">
            <summary>
            	Metrics are specified as whole pixels.
            </summary>
        </member>
        <member name="F:CeGui.MetricsMode.Inherited">
            <summary>
            	Metrics are inherited from parent.
            </summary>
        </member>
        <member name="T:CeGui.VerticalAlignment">
            <summary>
              Enumerated type used when specifying vertical alignments.
            </summary>
        </member>
        <member name="F:CeGui.VerticalAlignment.Top">
            <summary>
              Elements position specifies an offset of it's top edge from the top edge of it's parent.
            </summary>
        </member>
        <member name="F:CeGui.VerticalAlignment.Center">
            <summary>
              Elements position specifies an offset of it's vertical centre from
              the vertical centre of it's parent.
            </summary>
        </member>
        <member name="F:CeGui.VerticalAlignment.Bottom">
            <summary>
              Elements position specifies an offset of it's bottom edge from the bottom edge of it's parent.
            </summary>
        </member>
        <member name="T:CeGui.HorizontalAlignment">
            <summary>
              Enumerated type used when specifying horizontal alignments.
            </summary>
        </member>
        <member name="F:CeGui.HorizontalAlignment.Left">
            <summary>
              Elements position specifies an offset of it's left edge from the left edge of it's parent.
            </summary>
        </member>
        <member name="F:CeGui.HorizontalAlignment.Center">
            <summary>
              Elements position specifies an offset of it's horizontal centre from
              the horizontal centre of it's parent.
            </summary>
        </member>
        <member name="F:CeGui.HorizontalAlignment.Right">
            <summary>
              Elements position specifies an offset of it's right edge from the right edge of
              it's parent.
            </summary>
        </member>
        <member name="T:CeGui.SizingLocation">
            <summary>
            	The set of possible locations for the mouse on a frame windows sizing border.
            </summary>
        </member>
        <member name="F:CeGui.SizingLocation.None">
            <summary>
            	Position is not a sizing location.
            </summary>
        </member>
        <member name="F:CeGui.SizingLocation.TopLeft">
            <summary>
            	Position will size from the top-left.
            </summary>
        </member>
        <member name="F:CeGui.SizingLocation.TopRight">
            <summary>
            	Position will size from the top-right.
            </summary>
        </member>
        <member name="F:CeGui.SizingLocation.BottomLeft">
            <summary>
            	Position will size from the bottom left.
            </summary>
        </member>
        <member name="F:CeGui.SizingLocation.BottomRight">
            <summary>
            	Position will size from the bottom right.
            </summary>
        </member>
        <member name="F:CeGui.SizingLocation.Top">
            <summary>
            	Position will size from the top.
            </summary>
        </member>
        <member name="F:CeGui.SizingLocation.Left">
            <summary>
            	Position will size from the left.
            </summary>
        </member>
        <member name="F:CeGui.SizingLocation.Bottom">
            <summary>
            	Position will size from the bottom.
            </summary>
        </member>
        <member name="F:CeGui.SizingLocation.Right">
            <summary>
            	Position will size from the right.
            </summary>
        </member>
        <member name="T:CeGui.SortDirection">
            <summary>
              Enumeration of possible values for sorting direction
              as used with ListHeaderSegment, ListHeader, and MultiColumnList classes.
            </summary>
        </member>
        <member name="F:CeGui.SortDirection.None">
            <summary>Items should not be sorted</summary>
        </member>
        <member name="F:CeGui.SortDirection.Ascending">
            <summary>Items should be sorted in ascending order</summary>
        </member>
        <member name="F:CeGui.SortDirection.Descending">
            <summary>Items should be sorted in descending order</summary>
        </member>
        <member name="T:CeGui.GridSelectionMode">
            <summary>
              Enumerated values for the selection modes
              possible with a Multi-column list / grid widget.
            </summary>
        </member>
        <member name="F:CeGui.GridSelectionMode.RowSingle">
            <summary>
              Any single row may be selected. All items in the row are selected.
            </summary>
        </member>
        <member name="F:CeGui.GridSelectionMode.RowMultiple">
            <summary>
              Multiple rows may be selected. All items in the row are selected.
            </summary>
        </member>
        <member name="F:CeGui.GridSelectionMode.CellSingle">
            <summary>
              Any single cell may be selected.
            </summary>
        </member>
        <member name="F:CeGui.GridSelectionMode.CellMultiple">
            <summary>
              Multiple cells bay be selected.
            </summary>
        </member>
        <member name="F:CeGui.GridSelectionMode.NominatedColumnSingle">
            <summary>
              Any single item in a nominated column may be selected.
            </summary>
        </member>
        <member name="F:CeGui.GridSelectionMode.NominatedColumnMultiple">
            <summary>
              Multiple items in a nominated column may be selected.
            </summary>
        </member>
        <member name="F:CeGui.GridSelectionMode.ColumnSingle">
            <summary>
              Any single column may be selected. All items in the column are selected.
            </summary>
        </member>
        <member name="F:CeGui.GridSelectionMode.ColumnMultiple">
            <summary>
              Multiple columns may be selected. All items in the column are selected.
            </summary>
        </member>
        <member name="F:CeGui.GridSelectionMode.NominatedRowSingle">
            <summary>
              Any single item in a nominated row may be selected.
            </summary>
        </member>
        <member name="F:CeGui.GridSelectionMode.NominatedRowMultiple">
            <summary>
              Multiple items in a nominated row may be selected.
            </summary>
        </member>
        <member name="T:CeGui.TextFormatting">
            <summary>
              Enumerated type that contains valid formatting types that can be specified when
              rendering text into a Rect area (the formatting Rect).
            </summary>
        </member>
        <member name="F:CeGui.TextFormatting.LeftAligned">
            <summary>
              All text is printed on a single line. The left-most character is aligned with
              the left edge of the formatting Rect.
            </summary>
        </member>
        <member name="F:CeGui.TextFormatting.RightAligned">
            <summary>
              All text is printed on a single line. The right-most character is aligned with
              the right edge of the formatting Rect.
            </summary>
        </member>
        <member name="F:CeGui.TextFormatting.Centred">
            <summary>
              All text is printed on a single line. The text is centred horizontally in
              the formatting Rect.
            </summary>
        </member>
        <member name="F:CeGui.TextFormatting.Justified">
            <summary>
              All text is printed on a single line. The left-most and right-most characters
              are aligned with the edges of the formatting Rect.
            </summary>
        </member>
        <member name="F:CeGui.TextFormatting.WordWrapLeftAligned">
            <summary>
              Text is broken into multiple lines no wider than the formatting Rect.
              The left-most character of each line is aligned with the left edge of
              the formatting Rect.
            </summary>
        </member>
        <member name="F:CeGui.TextFormatting.WordWrapRightAligned">
            <summary>
              Text is broken into multiple lines no wider than the formatting Rect.
              The right-most character of each line is aligned with the right edge of
              the formatting Rect.
            </summary>
        </member>
        <member name="F:CeGui.TextFormatting.WordWrapCentred">
            <summary>
              Text is broken into multiple lines no wider than the formatting Rect.
              Each line is centred horizontally in the formatting Rect.
            </summary>
        </member>
        <member name="F:CeGui.TextFormatting.WordWrapJustified">
            <summary>
              Text is broken into multiple lines no wider than the formatting Rect.
              The left-most and right-most characters of each line are aligned with
              the edges of the formatting Rect.
            </summary>
        </member>
        <member name="T:CeGui.FontFlags">
            <summary>
            	Available options for use when creating fonts.
            </summary>
        </member>
        <member name="F:CeGui.FontFlags.None">
            <summary>
            	No options.
            </summary>
        </member>
        <member name="F:CeGui.FontFlags.Bold">
            <summary>
            	Bold glyphs.
            </summary>
        </member>
        <member name="T:CeGui.Widgets.Slider">
            <summary>
            	Summary description for Slider.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Slider.thumb">
            <summary>
            	Widget used to represent the 'thumb' of the slider.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Slider.currentValue">
            <summary>
            	Current slider value.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Slider.maxValue">
            <summary>
            	Slider maximum value (minimum is fixed at 0).
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Slider.step">
            <summary>
            	Amount to adjust slider by when clicked (and not dragged).
            </summary>
        </member>
        <member name="M:CeGui.Widgets.Slider.#ctor(System.String,System.String)">
            <summary>
            	Constructor.
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="M:CeGui.Widgets.Slider.CreateThumb">
            <summary>
            	Create a Thumb based widget to use as the thumb for this slider.
            </summary>
            <returns>A custom Thumb widget for this slider.</returns>
        </member>
        <member name="M:CeGui.Widgets.Slider.GetAdjustDirectionFromPoint(System.Drawing.PointF)">
            <summary>
            	Given window location <paramref name="point"/>, return a value indicating what change should be 
            	made to the slider.
            </summary>
            <param name="point">Point object describing a pixel position in window space.</param>
            <returns>
            	- -1 to indicate slider should be moved to a lower setting.
            	-  0 to indicate slider should not be moved.
            	- +1 to indicate slider should be moved to a higher setting.
            </returns>
        </member>
        <member name="M:CeGui.Widgets.Slider.GetValueFromThumb">
            <summary>
            	Return value that best represents current slider value given the current location of the thumb.
            </summary>
            <returns>float value that, given the thumb widget position, best represents the current value for the slider.</returns>
        </member>
        <member name="M:CeGui.Widgets.Slider.LayoutComponentWidgets">
            <summary>
            	Layout the slider component widgets.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.Slider.UpdateThumb">
            <summary>
            	Update the SizeF and location of the thumb to properly represent the current state of the slider.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.Slider.Initialize">
            <summary>
            	Intialize this slider widget.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.Slider.OnValueChanged(CeGui.WindowEventArgs)">
            <summary>
            	Triggered when the slider value changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.Slider.OnMouseButtonsDown(CeGui.MouseEventArgs)">
            <summary>
            	Handler for when the mouse button is pressed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:CeGui.Widgets.Slider.OnMouseWheel(CeGui.MouseEventArgs)">
            <summary>
            	Steps the slider thumb when scrolling the mouse.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.Slider.OnSized(CeGui.GuiEventArgs)">
            <summary>
            	Handler for when the SizeF of the slider widget changes.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:CeGui.Widgets.Slider.ThumbMovedHandler(System.Object,CeGui.WindowEventArgs)">
            <summary>
            	Handler for notification when our thumb is moved.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="P:CeGui.Widgets.Slider.MaxValue">
            <summary>
            	Get/Set the maximum value for the slider.
            </summary>
            <remarks>Note that the minimum value is fixed at 0.</remarks>
            <value>float value specifying the maximum value for this slider widget.</value>
        </member>
        <member name="P:CeGui.Widgets.Slider.Step">
            <summary>
            	Get/Set the current click step setting for the slider.
            </summary>
            <remarks>
            	The click step SizeF is the amount the slider value will be adjusted when the widget
            	is clicked wither side of the slider thumb.
            </remarks>
            <value>float value representing the click step setting to use.</value>
        </member>
        <member name="P:CeGui.Widgets.Slider.Value">
            <summary>
            	Get/Set the current value of the slider.
            </summary>
            <value>Float value of the slider.</value>
        </member>
        <member name="E:CeGui.Widgets.Slider.ValueChanged">
            <summary>
            	Event fired when the slider value changes.
            </summary>
        </member>
        <member name="T:CeGui.WindowProperties.ID">
            <summary>Property to access window ID field</summary>
            <remarks>
              This property offers access to the client specified ID for the window
            </remarks>
        </member>
        <member name="T:CeGui.Property">
            <summary>
              An abstract class that defines the interface to access object properties by name
            </summary>
            <remarks>
              Property objects allow (via a PropertySet) access to certain properties of objects
              by using simple get/set functions and the name of the property to be accessed.
            </remarks>
        </member>
        <member name="M:CeGui.Property.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>Creates a new Property object</summary>
            <param name="name">String containing the name of the new Property</param>
            <param name="help">String containing a description of the Property and it's usage</param>
            <param name="defaultValue">
              String holding the textual representation of the default value for this Property
            </param>
            <param name="writesXml">
              Specifies whether the writeXMLToStream method should do anything for this Property.
              This enables selectivity in what properties within a PropertySet will get output as XML.
            </param>
        </member>
        <member name="M:CeGui.Property.#ctor(System.String,System.String,System.String)">
            <summary>Creates a new Property object</summary>
            <param name="name">String containing the name of the new Property</param>
            <param name="help">String containing a description of the Property and it's usage</param>
            <param name="defaultValue">
              String holding the textual representation of the default value for this Property
            </param>
        </member>
        <member name="M:CeGui.Property.#ctor(System.String,System.String)">
            <summary>Creates a new Property object</summary>
            <param name="name">String containing the name of the new Property</param>
            <param name="help">String containing a description of the Property and it's usage</param>
        </member>
        <member name="M:CeGui.Property.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="reciever">target object</param>
            <returns>
              A string containing a textual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.Property.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="reciever">target object</param>
            <param name="val">
              A string that contains a textual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="M:CeGui.Property.IsDefault(CeGui.PropertySet)">
            <summary>Returns whether the property is at it's default value</summary>
            <param name="receiver">Pointer to the target object.</param>
            <returns>
              - true if the property has its default value.
              - false if the property has been modified from its default value.
            </returns>
        </member>
        <member name="M:CeGui.Property.GetDefault(CeGui.PropertySet)">
            <summary>Returns the default value of the Property as a String</summary>
            <param name="receiver">target object</param>
            <returns>
              String object containing a textual representation of the default
              value for this property
            </returns>
        </member>
        <member name="F:CeGui.Property.name">
            <summary>String that stores the Property name</summary>
        </member>
        <member name="F:CeGui.Property.help">
            <summary>String that stores the Property help text</summary>
        </member>
        <member name="F:CeGui.Property.def">
            <summary>String that stores the Property default value string</summary>
        </member>
        <member name="F:CeGui.Property.writeXml">
            <summary>Specifies whether writeXMLToStream should do anything for this property</summary>
        </member>
        <member name="P:CeGui.Property.Help">
            <summary>A String that describes the purpose and usage of this Property</summary>
        </member>
        <member name="P:CeGui.Property.Name">
            <summary>The name of this Property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.ID.#ctor">
            <summary>Initializes a new instance of the ID property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.ID.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="reciever">target object</param>
            <returns>
              A string containing a textual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.ID.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="reciever">target object</param>
            <param name="val">
              A string that contains a textual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.Alpha">
            <summary>Property to access window alpha setting</summary>
            <remarks>
              This property offers access to the alpha-blend setting for the window
            </remarks>
        </member>
        <member name="M:CeGui.WindowProperties.Alpha.#ctor">
            <summary>Initializes a new instance of the Alpha property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.Alpha.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="reciever">target object</param>
            <returns>
              A string containing a textual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.Alpha.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="reciever">target object</param>
            <param name="val">
              A string that contains a textual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.Font">
            <summary>Property to access window Font setting</summary>
            <remarks>
              This property offers access to the current Font setting for the window
            </remarks>
        </member>
        <member name="M:CeGui.WindowProperties.Font.#ctor">
            <summary>Initializes a new instance of the font property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.Font.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="reciever">target object</param>
            <returns>
              A string containing a textual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.Font.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="reciever">target object</param>
            <param name="val">
              A string that contains a textual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.Text">
            <summary>Property to access window text setting</summary>
            <remarks>
              This property offers access to the current text for the window
            </remarks>
        </member>
        <member name="M:CeGui.WindowProperties.Text.#ctor">
            <summary>Initializes a new instance of the Text property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.Text.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="reciever">target object</param>
            <returns>
              A string containing a textual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.Text.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="reciever">target object</param>
            <param name="val">
              A string that contains a textual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.MouseCursorImage">
            <summary>Property to access window mouse cursor setting</summary>
            <remarks>
              This property offers access to the current mouse cursor image for the window
            </remarks>
        </member>
        <member name="M:CeGui.WindowProperties.MouseCursorImage.#ctor">
            <summary>Initializes a new instance of the MouseCursorImage property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.MouseCursorImage.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="reciever">target object</param>
            <returns>
              A string containing a MouseCursorImageual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.MouseCursorImage.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="reciever">target object</param>
            <param name="val">
              A string that contains a MouseCursorImageual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="M:CeGui.WindowProperties.MouseCursorImage.IsDefault(CeGui.PropertySet)">
            <summary>Returns whether the property is at it's default value</summary>
            <param name="receiver">Pointer to the target object.</param>
            <returns>
              - true if the property has its default value.
              - false if the property has been modified from its default value.
            </returns>
        </member>
        <member name="T:CeGui.WindowProperties.ClippedByParent">
            <summary>Property to access window "clipped by parent" setting</summary>
            <remarks>
              This property offers access to the clipped by parent setting for the window
            </remarks>
        </member>
        <member name="M:CeGui.WindowProperties.ClippedByParent.#ctor">
            <summary>Initializes a new instance of the ClippedByParent property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.ClippedByParent.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="reciever">target object</param>
            <returns>
              A string containing a ClippedByParentual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.ClippedByParent.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="reciever">target object</param>
            <param name="val">
              A string that contains a ClippedByParentual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.InheritsAlpha">
            <summary>Property to access window "Inherits Alpha" setting</summary>
            <remarks>
              This property offers access to the inherits alpha setting for the window
            </remarks>
        </member>
        <member name="M:CeGui.WindowProperties.InheritsAlpha.#ctor">
            <summary>Initializes a new instance of the InheritsAlpha property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.InheritsAlpha.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="reciever">target object</param>
            <returns>
              A string containing a InheritsAlphaual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.InheritsAlpha.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="reciever">target object</param>
            <param name="val">
              A string that contains a InheritsAlphaual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.AlwaysOnTop">
            <summary>Property to access window "Always-On-Top" setting</summary>
            <remarks>
              This property offers access to the always on top / topmost setting for the window
            </remarks>
        </member>
        <member name="M:CeGui.WindowProperties.AlwaysOnTop.#ctor">
            <summary>Initializes a new instance of the AlwaysOnTop property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.AlwaysOnTop.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="reciever">target object</param>
            <returns>
              A string containing a AlwaysOnTopual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.AlwaysOnTop.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="reciever">target object</param>
            <param name="val">
              A string that contains a AlwaysOnTopual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.Disabled">
            <summary>Property to access window Disabled setting</summary>
            <remarks>
              This property offers access to the enabled / disabled setting for the window
            </remarks>
        </member>
        <member name="M:CeGui.WindowProperties.Disabled.#ctor">
            <summary>Initializes a new instance of the Disabled property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.Disabled.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="reciever">target object</param>
            <returns>
              A string containing a Disabledual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.Disabled.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="reciever">target object</param>
            <param name="val">
              A string that contains a Disabledual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="M:CeGui.WindowProperties.Disabled.IsDefault(CeGui.PropertySet)">
            <summary>Returns whether the property is at it's default value</summary>
            <param name="receiver">Pointer to the target object.</param>
            <returns>
              - true if the property has its default value.
              - false if the property has been modified from its default value.
            </returns>
        </member>
        <member name="T:CeGui.WindowProperties.Visible">
            <summary>Property to access window Visible setting</summary>
            <remarks>
              This property offers access to the visible setting for the window
            </remarks>
        </member>
        <member name="M:CeGui.WindowProperties.Visible.#ctor">
            <summary>Initializes a new instance of the Visible property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.Visible.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="reciever">target object</param>
            <returns>
              A string containing a Visibleual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.Visible.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="reciever">target object</param>
            <param name="val">
              A string that contains a Visibleual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="M:CeGui.WindowProperties.Visible.IsDefault(CeGui.PropertySet)">
            <summary>Returns whether the property is at it's default value</summary>
            <param name="receiver">Pointer to the target object.</param>
            <returns>
              - true if the property has its default value.
              - false if the property has been modified from its default value.
            </returns>
        </member>
        <member name="T:CeGui.WindowProperties.RestoreOldCapture">
            <summary>Property to access window Restore Old Capture setting</summary>
            <remarks>
              This property offers access to the restore old capture setting for the window.
              This setting is of generally limited use, its primary purpose is for certain
              operations required for compound widgets.
            </remarks>
        </member>
        <member name="M:CeGui.WindowProperties.RestoreOldCapture.#ctor">
            <summary>Initializes a new instance of the RestoreOldCapture property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.RestoreOldCapture.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="reciever">target object</param>
            <returns>
              A string containing a RestoreOldCaptureual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.RestoreOldCapture.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="reciever">target object</param>
            <param name="val">
              A string that contains a RestoreOldCaptureual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.DestroyedByParent">
            <summary>Property to access window Destroyed by Parent setting</summary>
            <remarks>
              This property offers access to the destroyed by parent setting for the window
            </remarks>
        </member>
        <member name="M:CeGui.WindowProperties.DestroyedByParent.#ctor">
            <summary>Initializes a new instance of the DestroyedByParent property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.DestroyedByParent.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="reciever">target object</param>
            <returns>
              A string containing a DestroyedByParentual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.DestroyedByParent.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="reciever">target object</param>
            <param name="val">
              A string that contains a DestroyedByParentual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.ZOrderChangeEnabled">
            <summary>Property to access window Z-Order changing enabled setting</summary>
            <remarks>
              This property offers access to the setting that controls whether z-order
              changes are enabled for the window.
            </remarks>
        </member>
        <member name="M:CeGui.WindowProperties.ZOrderChangeEnabled.#ctor">
            <summary>Initializes a new instance of the ZOrderChangeEnabled property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.ZOrderChangeEnabled.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="reciever">target object</param>
            <returns>
              A string containing a ZOrderChangeEnabledual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.ZOrderChangeEnabled.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="reciever">target object</param>
            <param name="val">
              A string that contains a ZOrderChangeEnabledual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.WantsMultiClickEvents">
            <summary>
              Property to control whether the window will receive double/triple-click events
            </summary>
            <remarks>
              This property offers access to the setting that controls whether a window will
              receive double-click and triple-click events, or whether the window will receive
              multiple single mouse button down events instead
            </remarks>
        </member>
        <member name="M:CeGui.WindowProperties.WantsMultiClickEvents.#ctor">
            <summary>Initializes a new instance of the WantsMultiClickEvents property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.WantsMultiClickEvents.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="reciever">target object</param>
            <returns>
              A string containing a WantsMultiClickEventsual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.WantsMultiClickEvents.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="reciever">target object</param>
            <param name="val">
              A string that contains a WantsMultiClickEventsual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.MouseButtonDownAutoRepeat">
            <summary>
              Property to control whether the window will receive autorepeat mouse button down events
            </summary>
            <remarks>
              This property offers access to the setting that controls whether a window will receive
              autorepeat mouse button down events
            </remarks>
        </member>
        <member name="M:CeGui.WindowProperties.MouseButtonDownAutoRepeat.#ctor">
            <summary>Initializes a new instance of the MouseButtonDownAutoRepeat property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.MouseButtonDownAutoRepeat.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="reciever">target object</param>
            <returns>
              A string containing a MouseButtonDownAutoRepeatual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.MouseButtonDownAutoRepeat.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="reciever">target object</param>
            <param name="val">
              A string that contains a MouseButtonDownAutoRepeatual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.AutoRepeatDelay">
            <summary>
              Property to access window autorepeat delay value
            </summary>
            <remarks>
              This property offers access to the value that controls the initial delay for autorepeat
              mouse button down events
            </remarks>
        </member>
        <member name="M:CeGui.WindowProperties.AutoRepeatDelay.#ctor">
            <summary>Initializes a new instance of the AutoRepeatDelay property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.AutoRepeatDelay.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="reciever">target object</param>
            <returns>
              A string containing a AutoRepeatDelayual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.AutoRepeatDelay.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="reciever">target object</param>
            <param name="val">
              A string that contains a AutoRepeatDelayual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.AutoRepeatRate">
            <summary>
              Property to access window autorepeat rate value
            </summary>
            <remarks>
              This property offers access to the value that controls the generation rate for
              autorepeat mouse button down events.
            </remarks>
        </member>
        <member name="M:CeGui.WindowProperties.AutoRepeatRate.#ctor">
            <summary>Initializes a new instance of the AutoRepeatRate property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.AutoRepeatRate.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="receiver">target object</param>
            <returns>
              A string containing a AutoRepeatRateual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.AutoRepeatRate.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="receiver">target object</param>
            <param name="val">
              A string that contains a AutoRepeatRateual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.DistributeCapturedInputs">
            <summary>
              Property to access whether inputs are passed to child windows when input is
              captured to this window
            </summary>
        </member>
        <member name="M:CeGui.WindowProperties.DistributeCapturedInputs.#ctor">
            <summary>Initializes a new instance of the DistributeCapturedInputs property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.DistributeCapturedInputs.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="receiver">target object</param>
            <returns>
              A string containing a DistributeCapturedInputsual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.DistributeCapturedInputs.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="receiver">target object</param>
            <param name="val">
              A string that contains a DistributeCapturedInputsual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.CustomTooltipType">
            <summary>
              Property to access the custom tooltip for this Window
            </summary>
        </member>
        <member name="M:CeGui.WindowProperties.CustomTooltipType.#ctor">
            <summary>Initializes a new instance of the CustomTooltipType property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.CustomTooltipType.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="receiver">target object</param>
            <returns>
              A string containing a CustomTooltipTypeual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.CustomTooltipType.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="receiver">target object</param>
            <param name="val">
              A string that contains a CustomTooltipTypeual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.Tooltip">
            <summary>
              Property to access the tooltip text for this Window
            </summary>
        </member>
        <member name="M:CeGui.WindowProperties.Tooltip.#ctor">
            <summary>Initializes a new instance of the Tooltip property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.Tooltip.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="receiver">target object</param>
            <returns>
              A string containing a Tooltipual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.Tooltip.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="receiver">target object</param>
            <param name="val">
              A string that contains a Tooltipual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.InheritsTooltipText">
            <summary>
              Property to access whether the window inherits its tooltip text from its parent
              when it has no tooltip text of its own
            </summary>
        </member>
        <member name="M:CeGui.WindowProperties.InheritsTooltipText.#ctor">
            <summary>Initializes a new instance of the InheritsTooltipText property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.InheritsTooltipText.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="receiver">target object</param>
            <returns>
              A string containing a InheritsTooltipTextual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.InheritsTooltipText.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="receiver">target object</param>
            <param name="val">
              A string that contains a InheritsTooltipTextual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.RiseOnClick">
            <summary>
              Property to access whether the window rises to the top of the z order when clicked
            </summary>
        </member>
        <member name="M:CeGui.WindowProperties.RiseOnClick.#ctor">
            <summary>Initializes a new instance of the RiseOnClick property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.RiseOnClick.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="receiver">target object</param>
            <returns>
              A string containing a RiseOnClickual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.RiseOnClick.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="receiver">target object</param>
            <param name="val">
              A string that contains a RiseOnClickual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.VerticalAlignment">
            <summary>
              Property to access the vertical alignment setting for the window
            </summary>
        </member>
        <member name="M:CeGui.WindowProperties.VerticalAlignment.#ctor">
            <summary>Initializes a new instance of the VerticalAlignment property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.VerticalAlignment.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="receiver">target object</param>
            <returns>
              A string containing a VerticalAlignmentual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.VerticalAlignment.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="receiver">target object</param>
            <param name="val">
              A string that contains a VerticalAlignmentual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.HorizontalAlignment">
            <summary>
              Property to access the horizontal alignment setting for the window
            </summary>
        </member>
        <member name="M:CeGui.WindowProperties.HorizontalAlignment.#ctor">
            <summary>Initializes a new instance of the HorizontalAlignment property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.HorizontalAlignment.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="receiver">target object</param>
            <returns>
              A string containing a HorizontalAlignmentual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.HorizontalAlignment.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="receiver">target object</param>
            <param name="val">
              A string that contains a HorizontalAlignmentual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.UnifiedAreaRect">
            <summary>
              Property to access the unified area rectangle of the window
            </summary>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedAreaRect.#ctor">
            <summary>Initializes a new instance of the UnifiedAreaRect property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedAreaRect.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="receiver">target object</param>
            <returns>
              A string containing a UnifiedAreaRectual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedAreaRect.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="receiver">target object</param>
            <param name="val">
              A string that contains a UnifiedAreaRectual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.UnifiedPosition">
            <summary>
              Property to access the unified position of the window
            </summary>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedPosition.#ctor">
            <summary>Initializes a new instance of the UnifiedPosition property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedPosition.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="receiver">target object</param>
            <returns>
              A string containing a UnifiedPositionual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedPosition.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="receiver">target object</param>
            <param name="val">
              A string that contains a UnifiedPositionual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.UnifiedXPosition">
            <summary>
              Property to access the unified position x-coordinate of the window
            </summary>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedXPosition.#ctor">
            <summary>Initializes a new instance of the UnifiedXPosition property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedXPosition.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="receiver">target object</param>
            <returns>
              A string containing a UnifiedPositionual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedXPosition.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="receiver">target object</param>
            <param name="val">
              A string that contains a UnifiedPositionual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.UnifiedYPosition">
            <summary>
              Property to access the unified position y-coordinate of the window
            </summary>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedYPosition.#ctor">
            <summary>Initializes a new instance of the UnifiedYPosition property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedYPosition.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="receiver">target object</param>
            <returns>
              A string containing a UnifiedPositionual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedYPosition.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="receiver">target object</param>
            <param name="val">
              A string that contains a UnifiedPositionual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.UnifiedSize">
            <summary>
              Property to access the unified size of the window
            </summary>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedSize.#ctor">
            <summary>Initializes a new instance of the UnifiedSize property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedSize.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="receiver">target object</param>
            <returns>
              A string containing a UnifiedPositionual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedSize.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="receiver">target object</param>
            <param name="val">
              A string that contains a UnifiedPositionual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.UnifiedWidth">
            <summary>
              Property to access the unified width of the window
            </summary>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedWidth.#ctor">
            <summary>Initializes a new instance of the UnifiedWidth property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedWidth.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="receiver">target object</param>
            <returns>
              A string containing a UnifiedPositionual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedWidth.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="receiver">target object</param>
            <param name="val">
              A string that contains a UnifiedPositionual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.UnifiedHeight">
            <summary>
              Property to access the unified height of the window
            </summary>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedHeight.#ctor">
            <summary>Initializes a new instance of the UnifiedHeight property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedHeight.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="receiver">target object</param>
            <returns>
              A string containing a UnifiedPositionual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedHeight.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="receiver">target object</param>
            <param name="val">
              A string that contains a UnifiedPositionual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.UnifiedMinSize">
            <summary>
              Property to access the unified minimum size of the window
            </summary>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedMinSize.#ctor">
            <summary>Initializes a new instance of the UnifiedMinSize property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedMinSize.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="receiver">target object</param>
            <returns>
              A string containing a UnifiedPositionual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedMinSize.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="receiver">target object</param>
            <param name="val">
              A string that contains a UnifiedPositionual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.UnifiedMaxSize">
            <summary>
              Property to access the unified maximum size of the window
            </summary>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedMaxSize.#ctor">
            <summary>Initializes a new instance of the UnifiedMinSize property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedMaxSize.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="receiver">target object</param>
            <returns>
              A string containing a UnifiedPositionual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.UnifiedMaxSize.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="receiver">target object</param>
            <param name="val">
              A string that contains a UnifiedPositionual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.MousePassThroughEnabled">
            <summary>
              Property to access whether the window ignores mouse events and pass them through to any
              windows behind it.
            </summary>
        </member>
        <member name="M:CeGui.WindowProperties.MousePassThroughEnabled.#ctor">
            <summary>Initializes a new instance of the MousePassThroughEnabled property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.MousePassThroughEnabled.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="receiver">target object</param>
            <returns>
              A string containing a UnifiedPositionual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.MousePassThroughEnabled.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="receiver">target object</param>
            <param name="val">
              A string that contains a UnifiedPositionual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="T:CeGui.WindowProperties.WindowRenderer">
            <summary>
              roperty to access/change the assigned window renderer object
            </summary>
        </member>
        <member name="M:CeGui.WindowProperties.WindowRenderer.#ctor">
            <summary>Initializes a new instance of the WindowRenderer property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.WindowRenderer.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="receiver">target object</param>
            <returns>
              A string containing a UnifiedPositionual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.WindowRenderer.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="receiver">target object</param>
            <param name="val">
              A string that contains a UnifiedPositionual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="M:CeGui.WindowProperties.WindowRenderer.WriteXmlToStream(CeGui.PropertyReceiver,System.Xml.Serialization.XmlSerializer)">
            <summary>Writes the property into an Xml stream</summary>
            <param name="receiver">No idea what this parameter could ever be good for</param>
            <param name="xmlStream">Stream into which the property is written</param>
        </member>
        <member name="T:CeGui.WindowProperties.LookNFeel">
            <summary>
              Property to access/change the assigned look'n'feel
            </summary>
        </member>
        <member name="M:CeGui.WindowProperties.LookNFeel.#ctor">
            <summary>Initializes a new instance of the LookNFeel property</summary>
        </member>
        <member name="M:CeGui.WindowProperties.LookNFeel.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="receiver">target object</param>
            <returns>
              A string containing a UnifiedPositionual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.WindowProperties.LookNFeel.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="receiver">target object</param>
            <param name="val">
              A string that contains a UnifiedPositionual representation of the new value to
              assign to the property
            </param>
        </member>
        <member name="M:CeGui.WindowProperties.LookNFeel.WriteXmlToStream(CeGui.PropertyReceiver,System.Xml.Serialization.XmlSerializer)">
            <summary>Writes the property into an Xml stream</summary>
            <param name="receiver">No idea what this parameter could ever be good for</param>
            <param name="xmlStream">Stream into which the property is written</param>
        </member>
        <member name="T:CeGui.Colour">
            <summary>Class representing colour values within the system</summary>
        </member>
        <member name="M:CeGui.Colour.#ctor(System.Single,System.Single,System.Single)">
            <summary>Initializes the color from seperate R, G and B values</summary>
            <remarks>Alpha defaults to 1.0f</remarks>
            <param name="red">Red component</param>
            <param name="green">Green component</param>
            <param name="blue">Blue component</param>
        </member>
        <member name="M:CeGui.Colour.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>Initializes the color from seperate R, G, B and alpha values</summary>
            <param name="red">Red component</param>
            <param name="green">Green component</param>
            <param name="blue">Blue component</param>
            <param name="alpha">Alpha component</param>
        </member>
        <member name="M:CeGui.Colour.#ctor(System.Int32)">
            <summary>Constructor for creating a color from a hex (HTML) value</summary>
            <param name="hexValue">Color value in the format 0xAARRGGBB</param>
        </member>
        <member name="M:CeGui.Colour.#ctor(System.UInt32)">
            <summary>Constructor for creating a color from a hex (HTML) value</summary>
            <param name="hexValue">Color value in the format 0xAARRGGBB</param>
        </member>
        <member name="M:CeGui.Colour.op_Multiply(CeGui.Colour,CeGui.Colour)">
            <summary>Modulates a color by another color</summary>
            <param name="left">Color to be modulated</param>
            <param name="right">Color to modulate by</param>
            <returns>The modulated color</returns>
        </member>
        <member name="M:CeGui.Colour.op_Multiply(CeGui.Colour,System.Single)">
            <summary>Multiplies the components of a color by a factor</summary>
            <param name="color">Color whose components are to be multiplied</param>
            <param name="factor">Factor to multiply by</param>
            <returns>The product of the multiplication</returns>
        </member>
        <member name="M:CeGui.Colour.op_Addition(CeGui.Colour,CeGui.Colour)">
            <summary>Adds a color to another color</summary>
            <param name="left">Color to add to</param>
            <param name="right">Color to add</param>
            <returns>The sum of the two colors</returns>
        </member>
        <member name="M:CeGui.Colour.op_Subtraction(CeGui.Colour,CeGui.Colour)">
            <summary>Subtracts a color from another color</summary>
            <param name="left">Color to subtract from</param>
            <param name="right">Color to subtract</param>
            <returns>The color that resulted from the subtraction</returns>
        </member>
        <member name="M:CeGui.Colour.ToARGB">
            <summary>Returns this color as a 32-bit 0xAARRGGBB integer</summary>
            <returns>A 32-bit 0xAARRGGBB representation of this color object.</returns>
        </member>
        <member name="M:CeGui.Colour.op_Implicit(System.Drawing.Color)~CeGui.Colour">
            <summary>Implicit conversion from System.Drawing.Color</summary>
            <param name="color">Color that will be converted to a CeGui.Colour</param>
            <returns>The matching CeGui.Colour for the System.Drawing.Color</returns>
        </member>
        <member name="M:CeGui.Colour.op_Implicit(CeGui.Colour)~System.Drawing.Color">
            <summary>Implicit conversion to System.Drawing.Color</summary>
            <param name="colour">CeGui.Color that will be converted</param>
            <returns>The matching System.Drawing.Color for the CeGui.Colour</returns>
        </member>
        <member name="M:CeGui.Colour.SetHsl(System.Single,System.Single,System.Single)">
            <summary>Sets the color from hue, saturation and luminance parameters</summary>
            <param name="hue">Hue used to define the color tone</param>
            <param name="saturation">Saturation used to define the intensity of the color</param>
            <param name="luminance">Luminance used to define the lightness of the color</param>
        </member>
        <member name="M:CeGui.Colour.SetHsl(System.Single,System.Single,System.Single,System.Single)">
            <summary>Sets the color from hue, saturation and luminance parameters</summary>
            <param name="hue">Hue used to define the color tone</param>
            <param name="saturation">Saturation used to define the intensity of the color</param>
            <param name="luminance">Luminance used to define the lightness of the color</param>
            <param name="alpha">Opacity of the color ranging from 0.0f to 1.0f</param>
        </member>
        <member name="M:CeGui.Colour.Invert">
            <summary>Inverts the colour's rgb values</summary>
        </member>
        <member name="M:CeGui.Colour.InvertWithAlpha">
            <summary>Inverts the colour's rgb and alpha values</summary>
        </member>
        <member name="M:CeGui.Colour.ToString">
            <summary>Returns a string representation of the color in 0xAARRGGBB format</summary>
            <returns>A string 0xAARRGGBB representation of this color object.</returns>
        </member>
        <member name="M:CeGui.Colour.Parse(System.String)">
            <summary>
              Parses the string representation of a color and returns the corresponding
              Color object.
            </summary>
            <param name="data">String representation of the Color "AARRGGBB".</param>
            <returns>A Color object with the correspoding color value.</returns>
        </member>
        <member name="M:CeGui.Colour.op_Inequality(CeGui.Colour,CeGui.Colour)">
            <summary>Checks two unified dimensions for inequality</summary>
            <param name="first">First dimension to be compared</param>
            <param name="second">Second dimension to be compared</param>
            <returns>True if the instances differ or exactly one reference is set to null</returns>
        </member>
        <member name="M:CeGui.Colour.op_Equality(CeGui.Colour,CeGui.Colour)">
            <summary>Checks two unified dimensions for equality</summary>
            <param name="first">First dimension to be compared</param>
            <param name="second">Second dimension to be compared</param>
            <returns>True if both instances are equal or both references are null</returns>
        </member>
        <member name="M:CeGui.Colour.Equals(System.Object)">
            <summary>Checks whether another instance is equal to this instance</summary>
            <param name="other">Other instance to compare to this instance</param>
            <returns>True if the other instance is equal to this instance</returns>
        </member>
        <member name="M:CeGui.Colour.Equals(CeGui.Colour)">
            <summary>Checks whether another instance is equal to this instance</summary>
            <param name="other">Other instance to compare to this instance</param>
            <returns>True if the other instance is equal to this instance</returns>
        </member>
        <member name="M:CeGui.Colour.GetHashCode">
            <summary>Obtains a hash code of this instance</summary>
            <returns>The hash code of the instance</returns>
        </member>
        <member name="M:CeGui.Colour.calculateArgb">
            <summary>Computes the argb value of this color</summary>
            <returns>This color's argb value</returns>
        </member>
        <member name="F:CeGui.Colour.alpha">
            <summary>Alpha component [0.0, 1.0]</summary>
        </member>
        <member name="F:CeGui.Colour.red">
            <summary>Red component [0.0, 1.0]</summary>
        </member>
        <member name="F:CeGui.Colour.green">
            <summary>Green component [0.0, 1.0]</summary>
        </member>
        <member name="F:CeGui.Colour.blue">
            <summary>Blue component [0.0, 1.0]</summary>
        </member>
        <member name="F:CeGui.Colour.argbValid">
            <summary>Whether the cached ARGB value is still up-to-date</summary>
        </member>
        <member name="F:CeGui.Colour.argb">
            <summary>Cached argb value, needs to be recomputed if argbValid is false</summary>
        </member>
        <member name="P:CeGui.Colour.Hue">
            <summary>The hue of this color</summary>
        </member>
        <member name="P:CeGui.Colour.Saturation">
            <summary>The saturation of this color</summary>
        </member>
        <member name="P:CeGui.Colour.Lumination">
            <summary>The luminance of this color</summary>
        </member>
        <member name="P:CeGui.Colour.Red">
            <summary>The red component of the value in range from 0.0 to 1.0</summary>
        </member>
        <member name="P:CeGui.Colour.Green">
            <summary>The green component of the value in range from 0.0 to 1.0</summary>
        </member>
        <member name="P:CeGui.Colour.Blue">
            <summary>The blue component of the value in range from 0.0 to 1.0</summary>
        </member>
        <member name="P:CeGui.Colour.Alpha">
            <summary>The alpha component of the value in range from 0.0 to 1.0</summary>
        </member>
        <member name="T:CeGui.FalagardComponentBase">
            <summary>
            Common base class used for renderable components within an ImagerySection.
            </summary>
        </member>
        <member name="F:CeGui.FalagardComponentBase.area">
            <summary>
            Destination area for this component.
            </summary>
        </member>
        <member name="F:CeGui.FalagardComponentBase.colors">
            <summary>
            base colours to be applied when rendering the image component.
            </summary>
        </member>
        <member name="F:CeGui.FalagardComponentBase.colorPropertyName">
            <summary>
            name of property to fetch colours from.
            </summary>
        </member>
        <member name="F:CeGui.FalagardComponentBase.colorPropertyIsRect">
            <summary>
            true if the colour property will fetch a full ColourRect.
            </summary>
        </member>
        <member name="F:CeGui.FalagardComponentBase.vertFormatPropertyName">
            <summary>
            name of property to fetch vertical formatting setting from.
            </summary>
        </member>
        <member name="F:CeGui.FalagardComponentBase.horzFormatPropertyName">
            <summary>
            name of property to fetch horizontal formatting setting from.
            </summary>
        </member>
        <member name="M:CeGui.FalagardComponentBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CeGui.FalagardComponentBase.Render(CeGui.Window,System.Single,CeGui.ColourRect,CeGui.Rect,System.Boolean)">
            <summary>
            Render this component.  More correctly, the component is cached for rendering.
            </summary>
            <param name="srcWindow">Window to use as the base for translating the component's ComponentArea into pixel values.</param>
            <param name="base_z">
            The z value to use for rendering the component.  Note that this is not the final z value to use, but
            some z offset from a currently unknown starting value.
            </param>
            <param name="modColours">
            ColourRect describing colours that are to be modulated with the component's stored colour values
            to calculate a set of 'final' colour values to be used.  May be 0.
            </param>
            <param name="clipper"></param>
            <param name="clipToDisplay"></param>
        </member>
        <member name="M:CeGui.FalagardComponentBase.Render(CeGui.Window,System.Single,CeGui.ColourRect,CeGui.Rect)">
            <summary>
            Render this component.  More correctly, the component is cached for rendering.
            </summary>
            <param name="srcWindow">Window to use as the base for translating the component's ComponentArea into pixel values.</param>
            <param name="base_z">
            The z value to use for rendering the component.  Note that this is not the final z value to use, but
            some z offset from a currently unknown starting value.
            </param>
            <param name="modColors">
            ColourRect describing colours that are to be modulated with the component's stored colour values
            to calculate a set of 'final' colour values to be used.  May be 0.
            </param>
            <param name="clipper"></param>
        </member>
        <member name="M:CeGui.FalagardComponentBase.Render(CeGui.Window,System.Single,CeGui.ColourRect)">
            <summary>
            Render this component.  More correctly, the component is cached for rendering.
            </summary>
            <param name="srcWindow">Window to use as the base for translating the component's ComponentArea into pixel values.</param>
            <param name="base_z">
            The z value to use for rendering the component.  Note that this is not the final z value to use, but
            some z offset from a currently unknown starting value.
            </param>
            <param name="modColors">
            ColourRect describing colours that are to be modulated with the component's stored colour values
            to calculate a set of 'final' colour values to be used.  May be 0.
            </param>
        </member>
        <member name="M:CeGui.FalagardComponentBase.Render(CeGui.Window,System.Single)">
            <summary>
            Render this component.  More correctly, the component is cached for rendering.
            </summary>
            <param name="srcWindow">Window to use as the base for translating the component's ComponentArea into pixel values.</param>
            <param name="base_z">
            The z value to use for rendering the component.  Note that this is not the final z value to use, but
            some z offset from a currently unknown starting value.
            </param>
        </member>
        <member name="M:CeGui.FalagardComponentBase.Render(CeGui.Window,CeGui.Rect,System.Single,CeGui.ColourRect,CeGui.Rect,System.Boolean)">
            <summary>
            Render this component.  More correctly, the component is cached for rendering.
            </summary>
            <param name="srcWindow">Window to use as the base for translating the component's ComponentArea into pixel values.</param>
            <param name="baseRect">Rect to use as the base for translating the component's ComponentArea into pixel values.</param>
            <param name="base_z">
            The z value to use for rendering the component.  Note that this is not the final z value to use, but
            some z offset from a currently unknown starting value.
            </param>
            <param name="modColours">
            ColourRect describing colours that are to be modulated with the component's stored colour values
            to calculate a set of 'final' colour values to be used.  May be 0.
            </param>
            <param name="clipper"></param>
            <param name="clipToDisplay"></param>
        </member>
        <member name="M:CeGui.FalagardComponentBase.Render(CeGui.Window,CeGui.Rect,System.Single,CeGui.ColourRect,CeGui.Rect)">
            <summary>
            Render this component.  More correctly, the component is cached for rendering.
            </summary>
            <param name="srcWindow">Window to use as the base for translating the component's ComponentArea into pixel values.</param>
            <param name="baseRect">Rect to use as the base for translating the component's ComponentArea into pixel values.</param>
            <param name="base_z">
            The z value to use for rendering the component.  Note that this is not the final z value to use, but
            some z offset from a currently unknown starting value.
            </param>
            <param name="modColours">
            ColourRect describing colours that are to be modulated with the component's stored colour values
            to calculate a set of 'final' colour values to be used.  May be 0.
            </param>
            <param name="clipper"></param>
        </member>
        <member name="M:CeGui.FalagardComponentBase.Render(CeGui.Window,CeGui.Rect,System.Single,CeGui.ColourRect)">
            <summary>
            Render this component.  More correctly, the component is cached for rendering.
            </summary>
            <param name="srcWindow">Window to use as the base for translating the component's ComponentArea into pixel values.</param>
            <param name="baseRect">Rect to use as the base for translating the component's ComponentArea into pixel values.</param>
            <param name="base_z">
            The z value to use for rendering the component.  Note that this is not the final z value to use, but
            some z offset from a currently unknown starting value.
            </param>
            <param name="modColours">
            ColourRect describing colours that are to be modulated with the component's stored colour values
            to calculate a set of 'final' colour values to be used.  May be 0.
            </param>
        </member>
        <member name="M:CeGui.FalagardComponentBase.Render(CeGui.Window,CeGui.Rect,System.Single)">
            <summary>
            Render this component.  More correctly, the component is cached for rendering.
            </summary>
            <param name="srcWindow">Window to use as the base for translating the component's ComponentArea into pixel values.</param>
            <param name="baseRect">Rect to use as the base for translating the component's ComponentArea into pixel values.</param>
            <param name="base_z">
            The z value to use for rendering the component.  Note that this is not the final z value to use, but
            some z offset from a currently unknown starting value.
            </param>
        </member>
        <member name="M:CeGui.FalagardComponentBase.InitColorsRect(CeGui.Window,CeGui.ColourRect,CeGui.ColourRect)">
             <summary>
             Helper method to initialise a ColourRect with appropriate values according to the way the
             ImageryComponent is set up.
            
             This will try and get values from multiple places:
             	- a property attached to \a wnd
             	- or the integral d_colours value.
             </summary>
             <param name="wnd"></param>
             <param name="modCols"></param>
             <param name="cr"></param>
        </member>
        <member name="M:CeGui.FalagardComponentBase.RenderImpl(CeGui.Window,CeGui.Rect,System.Single,CeGui.ColourRect,CeGui.Rect,System.Boolean)">
            <summary>
            Method to do main render caching work.
            </summary>
            <param name="srcWindow"></param>
            <param name="destRect"></param>
            <param name="base_z"></param>
            <param name="modColours"></param>
            <param name="clipper"></param>
            <param name="clipToDisplay"></param>
        </member>
        <member name="P:CeGui.FalagardComponentBase.ComponentArea">
            <summary>
            Gets/Sets the ComponentArea of this ImageryComponent.
            </summary>
        </member>
        <member name="P:CeGui.FalagardComponentBase.Colors">
            <summary>
            Gets/Sets the ColourRect set for use by this ImageryComponent.
            </summary>
        </member>
        <member name="P:CeGui.FalagardComponentBase.ColorPropertySource">
            <summary>
            Gets/Set the name of the property where colour values can be obtained.
            </summary>
        </member>
        <member name="P:CeGui.FalagardComponentBase.ColorPropertyIsRect">
            <summary>
            Gets/Set whether the colours property source represents a full ColourRect.
            </summary>
        </member>
        <member name="P:CeGui.FalagardComponentBase.VertFormattingPropertySource">
            <summary>
            Gets/Set the name of the property where vertical formatting option can be obtained.
            </summary>
        </member>
        <member name="P:CeGui.FalagardComponentBase.HorzFormattingPropertySource">
            <summary>
            Gets/Set the name of the property where horizontal formatting option can be obtained.
            </summary>
        </member>
        <member name="T:CeGui.Dimension">
             <summary>
            	Class representing some kind of dimension.
            
            	The key thing to understand about Dimension is that it contains not just a dimensional value,
            	but also a record of what the dimension value is supposed to represent. (e.g. a co-ordinate on
            	the x axis, or the height of something).
             </summary>
        </member>
        <member name="M:CeGui.Dimension.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CeGui.Dimension.#ctor(CeGui.BaseDimension,CeGui.DimensionType)">
            <summary>
            Constructor
            </summary>
            <param name="dim">object based on subclass of BaseDim which holds the dimensional value.</param>
            <param name="type">DimensionType value indicating what dimension this object is to represent.</param>
        </member>
        <member name="M:CeGui.Dimension.WriteToXml(System.Xml.XmlWriter)">
            <summary>
            Writes an xml representation of this Dimension to \a out_stream.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:CeGui.Dimension.BaseDimension">
            <summary>
            Gets/Sets the BaseDimension object used as the value for this Dimension
            </summary>
        </member>
        <member name="P:CeGui.Dimension.DimensionType">
            <summary>
            Gets/Sets the type of the Dimension.  See <see cref="P:CeGui.Dimension.DimensionType"/>
            </summary>
        </member>
        <member name="T:CeGui.Widgets.Checkbox">
            <summary>
            	Base class providing logic for Check-box widgets.
            </summary>
            C++ Version Sync
            .cpp:	1.4
            .h:		1.2
        </member>
        <member name="F:CeGui.Widgets.Checkbox.isChecked">
            <summary>
            	true if checkbox is selected (has checkmark).
            </summary>
        </member>
        <member name="M:CeGui.Widgets.Checkbox.#ctor(System.String,System.String)">
            <summary>
            	Constructor.
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="M:CeGui.Widgets.Checkbox.OnCheckStateChanged(CeGui.WindowEventArgs)">
            <summary>
            	Event triggered internally when state of checkbox changes.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.Checkbox.OnMouseButtonsUp(CeGui.MouseEventArgs)">
            <summary>
            	When the mouse up occurs, we change the selected state.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:CeGui.Widgets.Checkbox.Checked">
            <summary>
            	Get/Set the checked state of the checkbox.
            </summary>
            <value>
            	true to select the widget and give it the checkmark.  
            	false to deselect the widget and remove the checkmark.
            </value>
        </member>
        <member name="E:CeGui.Widgets.Checkbox.CheckStateChanged">
            <summary>
            	Event triggered internally when state of check-box changes.
            </summary>
        </member>
        <member name="T:CeGui.GuiSheet">
            <summary>
            	Window class intended to be used as a simple GUISheet.
            </summary>
            <remarks>
            	This class does no rendering of its own and so appears totally transparent.  This window defaults
            	to position 0.0f, 0.0f with a SizeF of 1.0f x 1.0f - and so covers the entire display.
            </remarks>
        </member>
        <member name="M:CeGui.GuiSheet.#ctor(System.String,System.String)">
            <summary>
            	Constructor.
            </summary>
            <remarks>
            All windows should be created via <see cref="M:CeGui.WindowManager.CreateWindow(System.String,System.String)"/>.
            </remarks>
        </member>
        <member name="M:CeGui.GuiSheet.DrawSelf(System.Single)">
            <summary>
            	No implementation necessary.
            </summary>
            <param name="z"></param>
        </member>
        <member name="M:CeGui.GuiSheet.Initialize">
            <summary>
            	Initializes the GUI sheet widget.
            </summary>
            <remarks>
            	SizeF is set to full screen.
            </remarks>
        </member>
        <member name="T:CeGui.ImageryComponent">
            <summary>
            Class that encapsulates information for a single image component.
            </summary>
        </member>
        <member name="F:CeGui.ImageryComponent.image">
            <summary>
            Image to be drawn by this image component.
            </summary>
        </member>
        <member name="F:CeGui.ImageryComponent.vertFormatting">
            <summary>
            Vertical formatting to be applied when rendering the image component.
            </summary>
        </member>
        <member name="F:CeGui.ImageryComponent.horzFormatting">
            <summary>
            Horizontal formatting to be applied when rendering the image component.
            </summary>
        </member>
        <member name="F:CeGui.ImageryComponent.imagePropertyName">
            <summary>
            Name of the property to access to obtain the image to be used.
            </summary>
        </member>
        <member name="M:CeGui.ImageryComponent.#ctor">
            <summary>
            Class that encapsulates information for a single image component.
            </summary>
        </member>
        <member name="M:CeGui.ImageryComponent.GetImage">
            <summary>
            Return the Image object that will be drawn by this ImageryComponent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CeGui.ImageryComponent.SetImage(CeGui.Image)">
            <summary>
            Set the Image that will be drawn by this ImageryComponent.
            </summary>
            <param name="image">The Image object to be drawn by this ImageryComponent.</param>
        </member>
        <member name="M:CeGui.ImageryComponent.SetImage(System.String,System.String)">
            <summary>
            Set the Image that will be drawn by this ImageryComponent.
            </summary>
            <param name="imageset">String holding the name of the Imagset that contains the Image to be rendered.</param>
            <param name="image">String holding the name of the Image to be rendered.</param>
        </member>
        <member name="P:CeGui.ImageryComponent.VerticalFormatting">
            <summary>
            Gets/Sets the current vertical formatting setting for this ImageryComponent.
            </summary>
        </member>
        <member name="P:CeGui.ImageryComponent.HorizontalFormatting">
            <summary>
            Gets/Sets the current horizontal formatting setting for this ImageryComponent.
            </summary>
        </member>
        <member name="P:CeGui.ImageryComponent.IsImagePropertyFetchedFromProperty">
            <summary>
            Gets whether this ImageryComponent fetches it's image via a property on the target window.
            </summary>
        </member>
        <member name="P:CeGui.ImageryComponent.ImagePropertySource">
            <summary>
            Return the name of the property that will be used to determine the image for this ImageryComponent.
            </summary>
        </member>
        <member name="T:CeGui.Rect">
            <summary>Two dimensional rectangle</summary>
        </member>
        <member name="M:CeGui.Rect.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>Initializes a new rectangle to specified coordinates</summary>
            <param name="left">Position of the left side of the rectangle</param>
            <param name="top">Position of the upper side of the rectangle</param>
            <param name="right">Position of the right side of the rectangle</param>
            <param name="bottom">Position of the lower side of the rectangle</param>
        </member>
        <member name="M:CeGui.Rect.op_Implicit(CeGui.Rect)~System.Drawing.RectangleF">
            <summary>Implicit conversion of this class to System.Drawing.RectangleF</summary>
            <param name="rectangle">Rectangle to be converted</param>
            <returns>An equivalent rectangle in the RectangleF class</returns>
        </member>
        <member name="M:CeGui.Rect.op_Implicit(System.Drawing.RectangleF)~CeGui.Rect">
            <summary>Implicit conversion of System.Drawing.RectangleF to this class</summary>
            <param name="rectangle">Rectangle to be converted</param>
            <returns>An equivalent rectangle in the Rect class</returns>
        </member>
        <member name="F:CeGui.Rect.Empty">
            <summary>An empty rectangle</summary>
        </member>
        <member name="M:CeGui.Rect.ConstrainSizeMax(System.Drawing.SizeF)">
            <summary>
              Check the size of this rect if it is bigger than <paramref name="size"/>,
              resize it so it isn't.
            </summary>
            <param name="size">
              Describes the maximum dimensions that this Rect should be limited to
            </param>
        </member>
        <member name="M:CeGui.Rect.ConstrainSizeMin(System.Drawing.SizeF)">
            <summary>
              Check the size of this rect if it is smaller than <paramref name="size"/>,
              resize it so it isn't.
            </summary>
            <param name="size">
              Describes the minimum dimensions that this Rect should be limited to
            </param>
        </member>
        <member name="M:CeGui.Rect.ConstrainSize(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
              Check the size of this rect if it is bigger than <paramref name="max"/> or
              smaller than <paramref name="min"/>, resize it so it isn't.
            </summary>
            <param name="max">
              Describes the maximum dimensions that this Rect should be limited to
            </param>
            <param name="min">
              Describes the minimum dimensions that this Rect should be limited to
            </param>
        </member>
        <member name="M:CeGui.Rect.GetIntersection(CeGui.Rect)">
            <summary>
              return a Rect that is the intersection of 'this' Rect with <paramref name="rect"/>
            </summary>
            <remarks>
              It can be assumed that if left == right, or top == bottom,
              or Width == 0, or Height == 0, then 'this' rect was totally
              outside <paramref name="rect"/>
            </remarks>
            <param name="rect">Rect to test for intersection</param>
            <returns>Instersection rect</returns>
        </member>
        <member name="M:CeGui.Rect.IsPointInRect(System.Drawing.PointF)">
            <summary>Return true if the given Point falls within this Rect</summary>
            <param name="point">Point describing the position to test</param>
            <returns>True if the point is within this Rect, false otherwise</returns>
        </member>
        <member name="M:CeGui.Rect.Offset(System.Drawing.PointF)">
            <summary>Applies an offset this Rect</summary>
            <param name="point">Point containing the offsets to be applied to the Rect</param>
        </member>
        <member name="M:CeGui.Rect.ToString">
            <summary>
             Returns a string representation of this Rect object in the form
             "l:[left] t:[top] r:[right] b:[bottom]
            </summary>
            <returns>A string representation of this Rect object</returns>
        </member>
        <member name="M:CeGui.Rect.Parse(System.String)">
            <summary>
              Parses the string representation of a Rect and returns the corresponding
              Rect object
            </summary>
            <param name="data">String representation of a Rect</param>
            <returns>Rect corresponding to the passed in string</returns>
        </member>
        <member name="F:CeGui.Rect.Left">
            <summary>Coordinate of the rectangle's left side</summary>
        </member>
        <member name="F:CeGui.Rect.Right">
            <summary>Coordinate of the rectangle's right side</summary>
        </member>
        <member name="F:CeGui.Rect.Top">
            <summary>Coordinate of the rectangle's upper side</summary>
        </member>
        <member name="F:CeGui.Rect.Bottom">
            <summary>Coordinate of the rectangle's lower side</summary>
        </member>
        <member name="P:CeGui.Rect.IsEmpty">
            <summary>Gets if this Rect has a size of 0</summary>
        </member>
        <member name="P:CeGui.Rect.Position">
            <summary>Get/Set the top-left corner of the Rect</summary>
            <value>Point that holds the x and y position</value>
        </member>
        <member name="P:CeGui.Rect.Width">
            <summary>Width of this Rect, from the left side</summary>
        </member>
        <member name="P:CeGui.Rect.Height">
            <summary>Height of this Rect, from the top edge</summary>
        </member>
        <member name="P:CeGui.Rect.Size">
            <summary>Get/Set the size of the rect area</summary>
            <value>The desired size of the Rect</value>
        </member>
        <member name="T:CeGui.GuiSystem">
            <summary>
              This class is the CEGUI class that provides access to all other elements in this system.
            </summary>
            <remarks>
              This object must be created by the client application. The GuiSystem object requires
              that you pass it an initialized <see cref="P:CeGui.GuiSystem.Renderer"/> object which it can use to
              interface to whatever rendering system will be used to display the GUI imagery.
            </remarks>
        </member>
        <member name="F:CeGui.GuiSystem.DefaultSingleClickTimeout">
            <summary>
              Default timeout for generation of single click events.
            </summary>
        </member>
        <member name="F:CeGui.GuiSystem.DefaultMultiClickTimeout">
            <summary>
              Default timeout for generation of multi-click events.
            </summary>
        </member>
        <member name="F:CeGui.GuiSystem.DefaultMultiClickAreaSize">
            <summary>
              Default allowable mouse movement for multi-click event generation.
            </summary>
        </member>
        <member name="F:CeGui.GuiSystem.activeSheet">
            <summary>
              The active GUI sheet (root window)
            </summary>
        </member>
        <member name="F:CeGui.GuiSystem.windowWithMouse">
            <summary>
              Reference to the window that currently contains the mouse.
            </summary>
        </member>
        <member name="F:CeGui.GuiSystem.guiRedraw">
            <summary>
              True if GUI should be re-drawn, false if render should re-use last times queue.
            </summary>
        </member>
        <member name="F:CeGui.GuiSystem.defaultFont">
            <summary>
              Holds a reference to the default GUI font.
            </summary>
        </member>
        <member name="F:CeGui.GuiSystem.defaultMouseCursor">
            <summary>
              Holds a reference to the default mouse cursor.
            </summary>
        </member>
        <member name="F:CeGui.GuiSystem.renderer">
            <summary>
              Holds the reference to the Renderer object given to us in the constructor.
            </summary>
        </member>
        <member name="F:CeGui.GuiSystem.clickTimeout">
            <summary>
              Timeout value, in seconds, used to generate a single-click (button down then up).
            </summary>
        </member>
        <member name="F:CeGui.GuiSystem.doubleClickTimeout">
            <summary>
              Timeout value, in seconds, used to generate multi-click events (botton down, then up, then down, and so on).
            </summary>
        </member>
        <member name="F:CeGui.GuiSystem.doubleClickSize">
            <summary>
              SizeF of area the mouse can move and still make multi-clicks.
            </summary>
        </member>
        <member name="F:CeGui.GuiSystem.sysKeys">
            <summary>System keys that are currently pressed</summary>
        </member>
        <member name="F:CeGui.GuiSystem.leftCtrl">
            <summary>State of the left control key</summary>
        </member>
        <member name="F:CeGui.GuiSystem.leftShift">
            <summary>State of the left shift key</summary>
        </member>
        <member name="F:CeGui.GuiSystem.rightCtrl">
            <summary>State of the right control key</summary>
        </member>
        <member name="F:CeGui.GuiSystem.rightShift">
            <summary>State of the right shift key</summary>
        </member>
        <member name="F:CeGui.GuiSystem.instance">
            <summary>Singleton instance of this class</summary>
        </member>
        <member name="M:CeGui.GuiSystem.#ctor(CeGui.Renderer)">
            <summary>
            Default constructor.
            </summary>
            <param name="renderer">Reference to the valid Renderer object that will be used to render GUI imagery</param>
        </member>
        <member name="M:CeGui.GuiSystem.RenderGui">
            <summary>
            	Render the GUI.
            </summary>
            <remarks>
            	Depending upon the internal state, this may either re-use rendering from last time, 
            	or trigger a full re-draw from all elements.
            </remarks>
        </member>
        <member name="M:CeGui.GuiSystem.SetDefaultFont(System.String)">
            <summary>
            	Set the default font to be used by the system.
            </summary>
            <param name="name">Name of the default font to be used by the system.</param>
        </member>
        <member name="M:CeGui.GuiSystem.SetDefaultFont(CeGui.Font)">
            <summary>
            	Set the default font to be used by the system.
            </summary>
            <param name="font">Reference to the default font to be used by the system.</param>
        </member>
        <member name="M:CeGui.GuiSystem.SetDefaultMouseCursor(System.String,System.String)">
            <summary>
            	Set the image to be used as the default mouse cursor.
            </summary>
            <param name="imagesetName">The name of the Imageset  that contains the image to be used.</param>
            <param name="imageName">The name of the Image on <paramref name="imageset"/> that is to be used.</param>
        </member>
        <member name="M:CeGui.GuiSystem.SetDefaultMouseCursor(CeGui.Image)">
            <summary>
            	Set the image to be used as the default mouse cursor.
            </summary>
            <param name="image">
            	Reference to an image object that is to be used as the default mouse cursor.  To have no cursor rendered by default, you
            	can specify null here.
            </param>
        </member>
        <member name="M:CeGui.GuiSystem.SignalRedraw">
            <summary>
            	Causes a full re-draw next time <see cref="M:CeGui.GuiSystem.RenderGui"/> is called.
            </summary>
        </member>
        <member name="M:CeGui.GuiSystem.InjectChar(System.Char)">
            <summary>
            	Method that injects a typed character into the system.
            </summary>
            <param name="c">Character that was typed.</param>
            <returns>Returns true if the event was handled, and false if it is not.</returns>
        </member>
        <member name="M:CeGui.GuiSystem.InjectKeyDown(System.Windows.Forms.Keys)">
            <summary>
            	Injects a key down event into the system.
            </summary>
            <param name="keyCode">Keyboard key pressed.</param>
            <returns>Returns true if the event was handled, and false if it is not.</returns>
        </member>
        <member name="M:CeGui.GuiSystem.InjectKeyUp(System.Windows.Forms.Keys)">
            <summary>
            	Injects a key up event into the system.
            </summary>
            <param name="keyCode">Keyboard key pressed.</param>
            <returns>Returns true if the event was handled, and false if it is not.</returns>
        </member>
        <member name="M:CeGui.GuiSystem.InjectMouseDown(System.Windows.Forms.MouseButtons)">
            <summary>
            	Injects a mouse down event into the system.
            </summary>
            <param name="button">Mouse button being pressed.</param>
            <returns>Returns true if the event was handled, and false if it is not.</returns>
        </member>
        <member name="M:CeGui.GuiSystem.InjectMouseLeaves">
            <summary>
            Tell CeGui that the mouse has left the application window
            </summary>
        </member>
        <member name="M:CeGui.GuiSystem.InjectMouseUp(System.Windows.Forms.MouseButtons)">
            <summary>
            	Injects a mouse up event into the system.
            </summary>
            <param name="button">Mouse button being pressed.</param>
            <returns>Returns true if the event was handled, and false if it is not.</returns>
        </member>
        <member name="M:CeGui.GuiSystem.InjectMouseMove(System.Int32,System.Int32)">
            <summary>
            	Method that injects a mouse movement event into the system.
            </summary>
            <param name="deltaX">Amount the mouse moved on the x axis.</param>
            <param name="deltaY">Amount the mouse moved on the y axis.</param>
            <returns>Returns true if the event was handled, and false if it is not.</returns>
        </member>
        <member name="M:CeGui.GuiSystem.MouseMoveCommon(CeGui.MouseEventArgs)">
            <summary>
            Code common to InjectMouseMove() and InjectMousePosition() operation
            </summary>
            <param name="e">Details of the mouse movement.</param>
            <returns>Returns true if the event was handled, and false if it is not.</returns>
        </member>
        <member name="M:CeGui.GuiSystem.InjectMousePosition(System.Int32,System.Int32)">
            <summary>
            	Method that injects a mouse position event into the system.
            </summary>
            <param name="deltaX">The x coordinate.</param>
            <param name="deltaY">The y coordinate.</param>
            <returns>Returns true if the event was handled, and false if it is not.</returns>
        </member>
        <member name="M:CeGui.GuiSystem.InjectMouseWheel(System.Int32)">
            <summary>
            	Method that injects a mouse wheel scroll event into the system.
            </summary>
            <param name="delta">Amount that the mouse wheel was moved.</param>
            <returns>Returns true if the event was handled, and false if it is not.</returns>
        </member>
        <member name="M:CeGui.GuiSystem.GetTargetWindow(System.Drawing.PointF)">
            <summary>
            	Given <paramref name="point"/>, return a reference to the <see cref="T:CeGui.Window"/> that should receive a 
            	mouse input if <paramref name="point"/> is the mouse location.
            </summary>
            <param name="point">Screen location (in pixels).</param>
            <returns>
            	Reference to a <see cref="T:CeGui.Window"/> object at mouse locatioj <paramref name="point"/> that
            	is to receive input.
            </returns>
        </member>
        <member name="M:CeGui.GuiSystem.KeyCodeToSysKey(System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            	Converts the specified keycode into a system key value.
            </summary>
            <param name="key">KeyCode to consider.</param>
            <param name="direction">True if down, false if coming back up.</param>
            <returns>System key associated with the specified keycode.</returns>
        </member>
        <member name="P:CeGui.GuiSystem.Instance">
            <summary>
            	Gets the singleton class instance.
            </summary>
            <value></value>
        </member>
        <member name="P:CeGui.GuiSystem.DefaultFont">
            <summary>
            	Return a reference to the default <see cref="T:CeGui.Font"/> for the GUI system.
            </summary>
            <value>Reference to a <see cref="T:CeGui.Font"/> object that is the default font in the system.</value>
        </member>
        <member name="P:CeGui.GuiSystem.DefaultMouseCursor">
            <summary>
            	Return the currently set default mouse cursor image.
            </summary>
            <value>
            	Reference to the current default image used for the mouse cursor.  May return null if default cursor has not been set,
            	or has intentionally been set to NULL - which results in a blank default cursor.
            </value>
        </member>
        <member name="P:CeGui.GuiSystem.GuiSheet">
            <summary>
            	Gets/Sets the active GUI sheet (root) window.
            </summary>
            <value>Reference to the <see cref="T:CeGui.Window"/> object that has been set as the GUI root element.</value>
        </member>
        <member name="P:CeGui.GuiSystem.Renderer">
            <summary>
            	Gets a reference to the <see cref="P:CeGui.GuiSystem.Renderer"/> object being used by the system.
            </summary>
            <value>Reference to the <see cref="P:CeGui.GuiSystem.Renderer"/> object being used by the system.</value>
        </member>
        <member name="P:CeGui.GuiSystem.WindowContainingMouse">
            <summary>
            	Return the Window object that the mouse is presently within.
            </summary>
            <value>Reference to the Window object that currently contains the mouse cursor, or 'null' if none.</value>
        </member>
        <member name="T:CeGui.GuiSystem.MouseClickTracker">
            <summary>
            	Structure to use for tracking mouse click timing for a single button.
            </summary>
            <remarks>
            	This would be a struct, but we need to be able to create the timer here.
            </remarks>
        </member>
        <member name="F:CeGui.GuiSystem.MouseClickTracker.timer">
            <summary>
            	Timer to use for timing mouse clicks.
            </summary>
        </member>
        <member name="F:CeGui.GuiSystem.MouseClickTracker.clickCount">
            <summary>
            	Number of times the button has been clicked.
            </summary>
        </member>
        <member name="F:CeGui.GuiSystem.MouseClickTracker.clickArea">
            <summary>
            	Area where the mouse was last clicked (with tolerance).
            </summary>
        </member>
        <member name="T:CeGui.GuiSystem.Timer">
            <summary>
            	Simple class for tracking elasped time (in milliseconds).
            </summary>
        </member>
        <member name="F:CeGui.GuiSystem.Timer.elapsed">
            <summary>
            	Elapsed time since the last call to <see cref="M:CeGui.GuiSystem.Timer.Restart"/>.
            </summary>
        </member>
        <member name="M:CeGui.GuiSystem.Timer.#ctor">
            <summary>
            	Constructor.
            </summary>
        </member>
        <member name="M:CeGui.GuiSystem.Timer.Restart">
            <summary>
            	Restarts the timer.
            </summary>
        </member>
        <member name="P:CeGui.GuiSystem.Timer.Elapsed">
            <summary>
            	Gets the elapsed time (in milliseconds) since the last call to <see cref="M:CeGui.GuiSystem.Timer.Restart"/>.
            </summary>
        </member>
        <member name="T:CeGui.Widgets.StaticImage">
            <summary>
            	Static image widget class.
            </summary>
            <remarks>
            	This base class performs it's own rendering.  There is no need to override this widget to perform rendering
            	of static images.
            </remarks>
        </member>
        <member name="T:CeGui.Widgets.Static">
            <summary>
            	Base class for static widgets.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Static.isFrameEnabled">
            <summary>
            	True when the frame is enabled.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Static.frameColors">
            <summary>
            	Used to store frame colors.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Static.frame">
            <summary>
            	Frame object used for rendering a frame for the static element.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Static.isBackgroundEnabled">
            <summary>
            	true when the background is enabled.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Static.backgroundColors">
            <summary>
            	Colors to use when drawing background.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Static.backgroundImage">
            <summary>
            	Image to use for widget background.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Static.leftWidth">
            <summary>
            	Width of the left edge image for the current frame.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Static.rightWidth">
            <summary>
            	Width of the right edge image for the current frame.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Static.topHeight">
            <summary>
            	Width of the top edge image for the current frame.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Static.bottomHeight">
            <summary>
            	Width of the bottom edge image for the current frame.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.Static.#ctor(System.String,System.String)">
            <summary>
            	Constructor.
            </summary>
            <param name="name">Unique name of this widget.</param>
        </member>
        <member name="M:CeGui.Widgets.Static.SetBackgroundColors(CeGui.ColourRect)">
            <summary>
            	Sets the color to be applied when rendering the background.
            </summary>
            <param name="color">Color value to be used when rendering.</param>
        </member>
        <member name="M:CeGui.Widgets.Static.SetBackgroundColors(CeGui.Colour,CeGui.Colour,CeGui.Colour,CeGui.Colour)">
            <summary>
            	Sets the colors to be applied when rendering the background.
            </summary>
            <param name="topLeft">Color to apply to the top-left corner of the background.</param>
            <param name="topRight">Color to apply to the top-right corner of the background.</param>
            <param name="bottomLeft">Color to apply to the bottom-left corner of the background.</param>
            <param name="bottomRight">Color to apply to the bottom-right corner of the background.</param>
        </member>
        <member name="M:CeGui.Widgets.Static.SetBackgroundImage(CeGui.Image)">
            <summary>
            	Set the image to use as the background for the static widget.
            </summary>
            <param name="image">
            	Reference to the Image object to be rendered.  
            	Can be null to specify no image is to be rendered.
            </param>
        </member>
        <member name="M:CeGui.Widgets.Static.SetBackgroundImage(System.String,System.String)">
            <summary>
            	Set the image to use as the background for the static widget.
            </summary>
            <param name="imagesetName">The name of the <see cref="T:CeGui.Imageset"/> that holds the required image.</param>
            <param name="imageName">Name of the <see cref="T:CeGui.Image"/> on the specified <see cref="T:CeGui.Imageset"/> that is to be used.</param>
            <exception cref="T:CeGui.UnknownObjectException">
            	Thrown if Imageset <paramref name="imagesetName"/> does not exist in the system or if <paramref name="imagesetName"/> 
            	does not contain an Image named <paramref name="imageName"/>.
            </exception>
        </member>
        <member name="M:CeGui.Widgets.Static.SetFrameColors(CeGui.ColourRect)">
            <summary>
            	Sets the colors to be applied when rendering the frame.
            </summary>
            <param name="colors">ColorRect object describing the colors to be used.</param>
        </member>
        <member name="M:CeGui.Widgets.Static.SetFrameColors(CeGui.Colour,CeGui.Colour,CeGui.Colour,CeGui.Colour)">
            <summary>
            	Sets the colors to be applied when rendering the frame.
            </summary>
            <param name="topLeft">Color to apply to the top-left corner of the frame.</param>
            <param name="topRight">Color to apply to the top-right corner of the frame.</param>
            <param name="bottomLeft">Color to apply to the bottom-left corner of the frame.</param>
            <param name="bottomRight">Color to apply to the bottom-right corner of the frame.</param>
        </member>
        <member name="M:CeGui.Widgets.Static.SetFrameImages(CeGui.Image,CeGui.Image,CeGui.Image,CeGui.Image,CeGui.Image,CeGui.Image,CeGui.Image,CeGui.Image)">
            <summary>
            	specify the Image objects to use for each part of the frame.  A NULL may be used to omit any part.
            </summary>
            <param name="topLeft">Reference to an Image object to render as the top-left corner of the frame.</param>
            <param name="topRight">Reference to an Image object to render as the top-right corner of the frame.</param>
            <param name="bottomLeft">Reference to an Image object to render as the bottom-left corner of the frame.</param>
            <param name="bottomRight">Reference to an Image object to render as the bottom-right corner of the frame.</param>
            <param name="left">Reference to an Image object to render as the left corner of the frame.</param>
            <param name="top">Reference to an Image object to render as the top corner of the frame.</param>
            <param name="right">Reference to an Image object to render as the right corner of the frame.</param>
            <param name="bottom">Reference to an Image object to render as the bottom corner of the frame.</param>
            <remarks>
            	Specifying null for any of the images will omit that part of the frame.
            </remarks>
        </member>
        <member name="M:CeGui.Widgets.Static.UpdateRenderableFrameColors">
            <summary>
            	Update the internal RenderableFrame with currently set colours and alpha settings.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.Static.DrawSelf(System.Single)">
            <summary>
            	Perform the actual rendering for this Window.
            </summary>
            <param name="z">float value specifying the base Z co-ordinate that should be used when rendering.</param>
        </member>
        <member name="M:CeGui.Widgets.Static.OnStaticFrameChanged(CeGui.WindowEventArgs)">
            <summary>
            	This is used internally to indicate that the frame for the static widget has been modified, and as such
            	derived classes may need to adjust their layouts or reconfigure their rendering somehow.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:CeGui.Widgets.Static.OnSized(CeGui.GuiEventArgs)">
            <summary>
            	Handler for when window is sized.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:CeGui.Widgets.Static.OnAlphaChanged(CeGui.GuiEventArgs)">
            <summary>
            	Handler for when alpha value changes.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="P:CeGui.Widgets.Static.BackgroundColors">
            <summary>
            	Gets the ColorRect containing the colors used when rendering this widget.
            </summary>
            <value>ColorRect initialized with the colors used when rendering the background for this widget.</value>
        </member>
        <member name="P:CeGui.Widgets.Static.BackgroundEnabled">
            <summary>
            	Get/Set whether the background for this static widget is enabled or disabled.
            </summary>
            <value>
            	true if the background is enabled and will be rendered.  
            	false if the background is disabled and will not be rendered.
            </value>
        </member>
        <member name="P:CeGui.Widgets.Static.FrameColors">
            <summary>
            	Gets the ColorRect containing the colors used when rendering this widget.
            </summary>
            <value>ColorRect initialized with the colors used when rendering the frame for this widget.</value>
        </member>
        <member name="P:CeGui.Widgets.Static.FrameEnabled">
            <summary>
            	Get/Set whether the frame for this static widget is enabled or disabled.
            </summary>
            <value>
            	true if the frame is enabled and will be rendered.  
            	false is the frame is disabled and will not be rendered.
            </value>
        </member>
        <member name="P:CeGui.Widgets.Static.BackgroundImage">
            <summary>
            Get/Set the background image
            </summary>
            <value>Background image</value>
        </member>
        <member name="P:CeGui.Widgets.Static.TopLeftFrameImage">
            <summary>
            Get/Set the top left frame image
            </summary>
            <value>image</value>
        </member>
        <member name="P:CeGui.Widgets.Static.TopFrameImage">
            <summary>
            Get/Set the top frame image
            </summary>
            <value>image</value>
        </member>
        <member name="P:CeGui.Widgets.Static.TopRightFrameImage">
            <summary>
            Get/Set the top right frame image
            </summary>
            <value>image</value>
        </member>
        <member name="P:CeGui.Widgets.Static.LeftFrameImage">
            <summary>
            Get/Set the left frame image
            </summary>
            <value>image</value>
        </member>
        <member name="P:CeGui.Widgets.Static.RightFrameImage">
            <summary>
            Get/Set the right frame image
            </summary>
            <value>image</value>
        </member>
        <member name="P:CeGui.Widgets.Static.BottomLeftFrameImage">
            <summary>
            Get/Set the bottom left frame image
            </summary>
            <value>image</value>
        </member>
        <member name="P:CeGui.Widgets.Static.BottomFrameImage">
            <summary>
            Get/Set the bottom frame image
            </summary>
            <value>image</value>
        </member>
        <member name="P:CeGui.Widgets.Static.BottomRightFrameImage">
            <summary>
            Get/Set the bottom right frame image
            </summary>
            <value>image</value>
        </member>
        <member name="P:CeGui.Widgets.Static.UnclippedInnerRect">
            <summary>
            	overridden so derived classes are auto-clipped to within the 
            	inner area of the frame when it's active.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.StaticImage.image">
            <summary>
            	RenderableImage that does most of the work for us.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.StaticImage.imageColors">
            <summary>
            	Colors to use for the image.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.StaticImage.#ctor(System.String,System.String)">
            <summary>
            	Constructor.
            </summary>
            <param name="name">Name of this widget.</param>
        </member>
        <member name="M:CeGui.Widgets.StaticImage.SetImage(CeGui.Image)">
            <summary>
            	Set the <see cref="P:CeGui.Widgets.StaticImage.Image"/> object to be drawn by this widget.
            </summary>
            <param name="image">
            	Reference to the <see cref="P:CeGui.Widgets.StaticImage.Image"/> object to be rendered.  
            	Can be 'null' to specify no image is to be rendered.
            </param>
        </member>
        <member name="M:CeGui.Widgets.StaticImage.SetImage(System.String,System.String)">
            <summary>
            	Set the <see cref="P:CeGui.Widgets.StaticImage.Image"/> object to be drawn by this widget.
            </summary>
            <param name="imagesetName">Imageset that the image is contained in.</param>
            <param name="imageName">Name of the image within the specified imageset.</param>
        </member>
        <member name="M:CeGui.Widgets.StaticImage.SetImageColors(CeGui.ColourRect)">
            <summary>
            	
            </summary>
            <param name="colors"></param>
        </member>
        <member name="M:CeGui.Widgets.StaticImage.SetImageColors(CeGui.Colour,CeGui.Colour,CeGui.Colour,CeGui.Colour)">
            <summary>
            	
            </summary>
            <param name="topLeft"></param>
            <param name="topRight"></param>
            <param name="bottomLeft"></param>
            <param name="bottomRight"></param>
        </member>
        <member name="M:CeGui.Widgets.StaticImage.UpdateRenderableImageColors">
            <summary>
            	Update the internal RenderableImaeg with currently set colors and alpha settings.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.StaticImage.DrawSelf(System.Single)">
            <summary>
            	Perform the actual rendering for this Window.
            </summary>
            <param name="z">float value specifying the base Z co-ordinate that should be used when rendering.</param>
        </member>
        <member name="M:CeGui.Widgets.StaticImage.OnSized(CeGui.GuiEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.StaticImage.OnAlphaChanged(CeGui.GuiEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.StaticImage.OnStaticFrameChanged(CeGui.WindowEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:CeGui.Widgets.StaticImage.Image">
            <summary>
            	Return a reference to the current image displayed by this widget.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.StaticImage.HorizontalFormat">
            <summary>
            	Set the formatting required for the image.
            </summary>
            <value>One of the <see cref="T:CeGui.HorizontalImageFormat"/> enumerated values specifying the formatting required.</value>
        </member>
        <member name="P:CeGui.Widgets.StaticImage.VerticalFormat">
            <summary>
            	Set the formatting required for the image.
            </summary>
            <value>One of the <see cref="T:CeGui.VerticalImageFormat"/> enumerated values specifying the formatting required.</value>
        </member>
        <member name="T:CeGui.Widgets.PushButton">
            <summary>
            Summary description for PushButton.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.PushButton.#ctor(System.String,System.String)">
            <summary>
            	Constructor.
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="M:CeGui.Widgets.PushButton.OnClicked(CeGui.WindowEventArgs)">
            <summary>
            	Handler invoked internally when the button is clicked.
            </summary>
            <param name="e">Events args.</param>
        </member>
        <member name="E:CeGui.Widgets.PushButton.Clicked">
            <summary>
            	The button was clicked.
            </summary>
        </member>
        <member name="T:CeGui.Texture">
            <summary>
            	Abstract base class specifying the required interface for Texture objects.
            </summary>
            <remarks>
            	Texture objects are created via the <see cref="P:CeGui.Texture.Renderer"/>.  The actual inner workings 
            	of any Texture object are dependant upon the Renderer (and underlying API) in use.  
            	This base class defines the minimal set of functions that is required for the rest of the 
            	system to work.  Texture objects are only created through the Renderer object's texture 
            	creation functions.
            </remarks>
        </member>
        <member name="F:CeGui.Texture.owner">
            <summary>
            	<see cref="P:CeGui.Texture.Renderer"/> object that created and owns this texture.
            </summary>
        </member>
        <member name="F:CeGui.Texture.width">
            <summary>
            	Width of this texture (in pixels).
            </summary>
        </member>
        <member name="F:CeGui.Texture.height">
            <summary>
            	Height of this texture (in pixels).
            </summary>
        </member>
        <member name="M:CeGui.Texture.#ctor(CeGui.Renderer)">
            <summary>
            	Constructor.
            </summary>
            <param name="owner"><see cref="P:CeGui.Texture.Renderer"/> object that created this texture.</param>
        </member>
        <member name="M:CeGui.Texture.LoadFromFile(System.String)">
            <summary>
            	Loads the specified image file into the texture.  
            	The texture is resized as required to hold the image.
            </summary>
            <param name="fileName">The filename of the image file that is to be loaded into the texture.</param>
        </member>
        <member name="M:CeGui.Texture.LoadFromMemory(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            	Loads (copies) an image in memory into the texture.  
            	The texture is resized as required to hold the image.
            </summary>
            <param name="buffer">Reference to the stream containing the image data.</param>
            <param name="bufferWidth">Width of the buffer.</param>
            <param name="bufferHeight">Height of the buffer.</param>
        </member>
        <member name="P:CeGui.Texture.Size">
            <summary>
            Gets the pixel SizeF of this texture
            </summary>
        </member>
        <member name="P:CeGui.Texture.Height">
            <summary>
            	Returns the current pixel height of the texture.
            </summary>
            <value>Integer representing the height of the texture (in pixels).</value>
        </member>
        <member name="P:CeGui.Texture.Width">
            <summary>
            	Returns the current pixel width of the texture.
            </summary>
            <value>Integer representing the width of the texture (in pixels).</value>
        </member>
        <member name="P:CeGui.Texture.Renderer">
            <summary>
            	Return a reference to the <see cref="P:CeGui.Texture.Renderer"/> object that created and owns this texture.
            </summary>
            <value>Reference to the <see cref="P:CeGui.Texture.Renderer"/> object that created and owns this texture.</value>
        </member>
        <member name="T:CeGui.LayerSpecification">
            <summary>
            Class that encapsulates a single layer of imagery.
            </summary>
        </member>
        <member name="F:CeGui.LayerSpecification.sections">
            <summary>
            Collection of SectionSpecification objects descibing the sections to be drawn for this layer.
            </summary>
        </member>
        <member name="F:CeGui.LayerSpecification.layerPriority">
            <summary>
            Priority of the layer.
            </summary>
        </member>
        <member name="M:CeGui.LayerSpecification.#ctor(System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="priority">
            Specifies the priority of the layer.  Layers with higher priorities will be drawn on top
            of layers with lower priorities.
            </param>
        </member>
        <member name="M:CeGui.LayerSpecification.Render(CeGui.Window,System.Single,CeGui.ColourRect,CeGui.Rect,System.Boolean)">
            <summary>
            Render this layer.
            </summary>
            <param name="srcWindow">Window to use when calculating pixel values from BaseDim values.</param>
            <param name="base_z">base level z value to use for all imagery in the layer.</param>
            <param name="modcols"></param>
            <param name="clipper"></param>
            <param name="clipToDisplay"></param>
        </member>
        <member name="M:CeGui.LayerSpecification.Render(CeGui.Window,CeGui.Rect,System.Single,CeGui.ColourRect,CeGui.Rect,System.Boolean)">
            <summary>
            Render this layer.
            </summary>
            <param name="srcWindow">Window to use when calculating pixel values from BaseDim values.</param>
            <param name="baseRect">Rect to use when calculating pixel values from BaseDim values.</param>
            <param name="base_z">base level z value to use for all imagery in the layer.</param>
            <param name="modcols"></param>
            <param name="clipper"></param>
            <param name="clipToDisplay"></param>
        </member>
        <member name="M:CeGui.LayerSpecification.AddSpecification(CeGui.SectionSpecification)">
            <summary>
            Add a section specification to the layer.
            
            A section specification is a reference to a named ImagerySection within the WidgetLook.
            </summary>
            <param name="spec">SectionSpecification object descibing the section that should be added to this layer.</param>
        </member>
        <member name="M:CeGui.LayerSpecification.ClearSpecifications">
            <summary>
            Clear all section specifications from this layer,
            </summary>
        </member>
        <member name="P:CeGui.LayerSpecification.LayerPriority">
            <summary>
            Return the priority of this layer.
            </summary>
        </member>
        <member name="T:CeGui.UVector2">
            <summary>
              Two dimensional vector class built using unified dimensions. The UnifiedVector2 class
              is used for representing both positions and sizes.
            </summary>
        </member>
        <member name="F:CeGui.UVector2.Zero">
            <summary>A unified vector that has been initialized to zero</summary>
        </member>
        <member name="M:CeGui.UVector2.#ctor(CeGui.UDim,CeGui.UDim)">
            <summary>Initializes a new unified vector</summary>
            <param name="x">X coordinate to store in the vector</param>
            <param name="Y">Y coordinate to store in the vector</param>
        </member>
        <member name="M:CeGui.UVector2.AsAbsolutePosition(System.Drawing.SizeF)">
            <summary>Converts the unified vector into an absolute position</summary>
            <param name="bounds">Extents into which to project the unified vector</param>
            <returns>The absolute position described by the unified vector</returns>
        </member>
        <member name="M:CeGui.UVector2.AsAbsoluteSize(System.Drawing.SizeF)">
            <summary>Converts the unified vector into an absolute size</summary>
            <param name="bounds">Extents into which to project the unified vector</param>
            <returns>The absolute size described by the unified vector</returns>
        </member>
        <member name="M:CeGui.UVector2.AsRelativePosition(System.Drawing.SizeF)">
            <summary>Converts the unified vector into a relative position</summary>
            <param name="bounds">Extents into which to project the unified vector</param>
            <returns>The relative position described by the unified vector</returns>
        </member>
        <member name="M:CeGui.UVector2.AsRelativeSize(System.Drawing.SizeF)">
            <summary>Converts the unified vector into a relative size</summary>
            <param name="bounds">Extents into which to project the unified vector</param>
            <returns>The relative size described by the unified vector</returns>
        </member>
        <member name="M:CeGui.UVector2.op_Addition(CeGui.UVector2,CeGui.UVector2)">
            <summary>Adds one unified vector to the other</summary>
            <param name="vector">Base unified vector to add to</param>
            <param name="summand">Vector to add to the base</param>
            <returns>The result of the addition operation</returns>
        </member>
        <member name="M:CeGui.UVector2.op_Subtraction(CeGui.UVector2,CeGui.UVector2)">
            <summary>Subtracts one unified vector from the other</summary>
            <param name="vector">Base unified vector to subtract from</param>
            <param name="subtrahend">Vector to subtract from the base</param>
            <returns>The result of the subtraction operation</returns>
        </member>
        <member name="M:CeGui.UVector2.op_Division(CeGui.UVector2,CeGui.UVector2)">
            <summary>Divides one unified vector by another one</summary>
            <param name="vector">Base unified vector to be divided</param>
            <param name="divisor">Divisor to divide by</param>
            <returns>The result of the division operation</returns>
        </member>
        <member name="M:CeGui.UVector2.op_Multiply(CeGui.UVector2,CeGui.UVector2)">
            <summary>Multiplies one unified vector with another one</summary>
            <param name="vector">Base unified vector to be multiplied</param>
            <param name="factor">Factor to multiply by</param>
            <returns>The result of the multiplication operation</returns>
        </member>
        <member name="M:CeGui.UVector2.op_Inequality(CeGui.UVector2,CeGui.UVector2)">
            <summary>Checks two unified vectors for inequality</summary>
            <param name="first">First vector to be compared</param>
            <param name="second">Second vector to be compared</param>
            <returns>True if the instances differ or exactly one reference is set to null</returns>
        </member>
        <member name="M:CeGui.UVector2.op_Equality(CeGui.UVector2,CeGui.UVector2)">
            <summary>Checks two unified vectors for equality</summary>
            <param name="first">First vector to be compared</param>
            <param name="second">Second vector to be compared</param>
            <returns>True if both instances are equal or both references are null</returns>
        </member>
        <member name="M:CeGui.UVector2.Equals(System.Object)">
            <summary>Checks whether another instance is equal to this instance</summary>
            <param name="other">Other instance to compare to this instance</param>
            <returns>True if the other instance is equal to this instance</returns>
        </member>
        <member name="M:CeGui.UVector2.Equals(CeGui.UVector2)">
            <summary>Checks whether another instance is equal to this instance</summary>
            <param name="other">Other instance to compare to this instance</param>
            <returns>True if the other instance is equal to this instance</returns>
        </member>
        <member name="M:CeGui.UVector2.GetHashCode">
            <summary>Obtains a hash code of this instance</summary>
            <returns>The hash code of the instance</returns>
        </member>
        <member name="F:CeGui.UVector2.X">
            <summary>The X coordinate of the unified vector</summary>
        </member>
        <member name="F:CeGui.UVector2.Y">
            <summary>The Y coordinate of the unified vector</summary>
        </member>
        <member name="T:CeGui.Widgets.TitleBar">
            <summary>
            	Class representing the title bar for Frame Windows.
            </summary>
            C++ Version Sync
            .cpp:	1.5
            .h:		1.4
        </member>
        <member name="F:CeGui.Widgets.TitleBar.isDragging">
            <summary>
            	true when the window is being dragged.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.TitleBar.dragPoint">
            <summary>
            	Point at which we are being dragged.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.TitleBar.oldCursorArea">
            <summary>
            	Used to backup cursor restraint area.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.TitleBar.isDraggingEnabled">
            <summary>
            	true when dragging for the widget is enabled.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.TitleBar.OnDraggingModeChanged(CeGui.WindowEventArgs)">
            <summary>
            	Trigger for when the dragging mode of the window is changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="P:CeGui.Widgets.TitleBar.DraggingEnabled">
            <summary>
            	Get/Set whether this title bar will respond to dragging.
            </summary>
            <value>true if the title bar will respond to dragging, false if the title bar will not respond.</value>
        </member>
        <member name="T:CeGui.Widgets.Range">
            <summary>
            Range class used for setting the range of the THumb control
            </summary>
        </member>
        <member name="M:CeGui.Widgets.Range.Parse(System.String)">
            <summary>
            Parses the string representation of a Range, and returns the corresponding Range value.
            </summary>
            <param name="value">String to parse</param>
            <returns>Range specified by the string.</returns>
        </member>
        <member name="M:CeGui.Widgets.Range.ToString">
            <summary>
            Returns the string representation of the Range value.
            </summary>
            <returns>A string representing the range.</returns>
        </member>
        <member name="T:CeGui.Widgets.Thumb">
            <summary>
            	Base class for Thumb widget.
            </summary>
            <remarks>
            	The thumb widget is used to compose other widgets (like sliders and scroll bars).  You would
            	not normally need to use this widget directly unless you are making a new widget of some type.
            </remarks>
        </member>
        <member name="F:CeGui.Widgets.Thumb.hotTrack">
            <summary>
            	true if events are to be sent real-time, else just when thumb is released.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Thumb.vertFree">
            <summary>
            	true if thumb is movable vertically.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Thumb.horzFree">
            <summary>
            	true if thumb is movable horizontally.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Thumb.vertMin">
            <summary>
            	Vertical minimum range.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Thumb.vertMax">
            <summary>
            	Vertical maximum range.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Thumb.horzMin">
            <summary>
            	Horizontal minimum range.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Thumb.horzMax">
            <summary>
            	Horizontal maximum range.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Thumb.isBeingDragged">
            <summary>
            	true if thumb is being dragged.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Thumb.dragPoint">
            <summary>
            	Point where we are being dragged at.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.Thumb.#ctor(System.String,System.String)">
            <summary>
            	Constructor.
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="M:CeGui.Widgets.Thumb.SetHorizontalRange(System.Single,System.Single)">
            <summary>
            	Set the movement range of the thumb for the horizontal axis.
            </summary>
            <remarks>
            	The values specified here are relative to the parent window for the thumb, and are specified in whichever
            	metrics mode is active for the widget.
            </remarks>
            <param name="min">The minimum setting for the thumb on the horizontal axis.</param>
            <param name="max">The maximum setting for the thumb on the horizontal axis.</param>
        </member>
        <member name="M:CeGui.Widgets.Thumb.SetVerticalRange(System.Single,System.Single)">
            <summary>
            	Set the movement range of the thumb for the vertical axis.
            </summary>
            <remarks>
            	The values specified here are relative to the parent window for the thumb, and are specified in whichever
            	metrics mode is active for the widget.
            </remarks>
            <param name="min">The minimum setting for the thumb on the vertical axis.</param>
            <param name="max">The maximum setting for the thumb on the vertical axis.</param>
        </member>
        <member name="M:CeGui.Widgets.Thumb.OnPositionChanged(CeGui.WindowEventArgs)">
            <summary>
            	Triggers an event when the position of the thumb widget has changed.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.Thumb.OnMouseMove(CeGui.MouseEventArgs)">
            <summary>
            	Track mouse movement for dragging behavior.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:CeGui.Widgets.Thumb.OnMouseButtonsDown(CeGui.MouseEventArgs)">
            <summary>
            	Track mouse down for dragging behavior.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:CeGui.Widgets.Thumb.OnCaptureLost(CeGui.GuiEventArgs)">
            <summary>
            	Track capture lost to cancel dragging (if currently dragging).
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="P:CeGui.Widgets.Thumb.HotTrack">
            <summary>
            	Get/Set whether hot-tracking is enabled or not.
            </summary>
            <value>true if hot-tracking is enabled.  false if hot-tracking is disabled.</value>
        </member>
        <member name="P:CeGui.Widgets.Thumb.VerticalRange">
            <summary>
            Get/Set the vertical range
            </summary>
            <value>Range</value>
        </member>
        <member name="P:CeGui.Widgets.Thumb.HorizontalRange">
            <summary>
            Get/Set the horizontal range
            </summary>
            <value>Range</value>
        </member>
        <member name="P:CeGui.Widgets.Thumb.Horizontal">
            <summary>
            	Get/Set whether the thumb is movable on the horizontal axis.
            </summary>
            <value>
            	true if the thumb is movable along the horizontal axis.
            	false if the thumb is fixed on the horizontal axis.
            </value>
        </member>
        <member name="P:CeGui.Widgets.Thumb.Vertical">
            <summary>
            	Get/Set whether the thumb is movable on the vertical axis.
            </summary>
            <value>
            	true if the thumb is movable along the vertical axis.
            	false if the thumb is fixed on the vertical axis.
            </value>
        </member>
        <member name="E:CeGui.Widgets.Thumb.PositionChanged">
            <summary>
            	The position of the thumb widget has changed.
            </summary>
        </member>
        <member name="T:CeGui.Widgets.FrameWindow">
            <summary>
            	Abstract base class for a movable, sizable, window with a title-bar and a frame.
            </summary>
            C++ Version Sync
            .cpp:	1.8
            .h:		1.6
        </member>
        <member name="F:CeGui.Widgets.FrameWindow.DefaultSizingBorderSize">
            <summary>
            	Default SizeF for the sizing border (in pixels).
            </summary>
        </member>
        <member name="F:CeGui.Widgets.FrameWindow.isFrameEnabled">
            <summary>
            	true if window frame should be drawn.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.FrameWindow.isRollupEnabled">
            <summary>
            	true if roll-up of window is allowed.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.FrameWindow.isRolledUp">
            <summary>
            	true if window is rolled up.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.FrameWindow.absOpenSize">
            <summary>
            	Stores original SizeF of window when rolled-up.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.FrameWindow.relOpenSize">
            <summary>
            	Stores original SizeF of window when rolled-up.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.FrameWindow.isSizingEnabled">
            <summary>
            	true if sizing is enabled for this window.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.FrameWindow.isBeingSized">
            <summary>
            	true if window is being sized.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.FrameWindow.borderSize">
            <summary>
            	Thickness of the sizing border around this window
            </summary>
        </member>
        <member name="F:CeGui.Widgets.FrameWindow.dragPoint">
            <summary>
            	Point window is being dragged at.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.FrameWindow.titleBar">
            <summary>
            	Reference to the title bar widget.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.FrameWindow.closeButton">
            <summary>
            	Reference to the close button widget.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.FrameWindow.sizingCursorNS">
            <summary>
            	North/South sizing cursor image.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.FrameWindow.sizingCursorEW">
            <summary>
            	East/West sizing cursor image.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.FrameWindow.sizingCursorNWSE">
            <summary>
            	North-West/South-East cursor image.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.FrameWindow.sizingCursorNESW">
            <summary>
            	North-East/South-West cursor image.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.FrameWindow.isDragMovable">
            <summary>
            	true if the window will move when dragged by the title bar.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.FrameWindow.#ctor(System.String,System.String)">
            <summary>
            	Constructor.
            </summary>
            <param name="type">Type of the window.</param>
            <param name="name">Name of the window.</param>
        </member>
        <member name="M:CeGui.Widgets.FrameWindow.CreateTitleBar">
            <summary>
            	Create a control based upon the Titlebar base class to be used as the title bar for this window.
            </summary>
            <returns>Reference to an object who's class derives from Titlebar.</returns>
        </member>
        <member name="M:CeGui.Widgets.FrameWindow.CreateCloseButton">
            <summary>
            	Create a control based upon the PushButton base class, to be used at the close button for the window.
            </summary>
            <returns>Reference to an object who's class derives from PushButton.</returns>
        </member>
        <member name="M:CeGui.Widgets.FrameWindow.LayoutComponentWidgets">
            <summary>
            	Setup SizeF and position for the title bar and close button widgets attached to this window.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.FrameWindow.GetSizingBorderAtPoint(System.Drawing.PointF)">
            <summary>
            	Check local pixel co-ordinate point <paramref name="point"/> and return one of the
            	<see cref="T:CeGui.SizingLocation"/> enumerated values depending where the point falls on
            	the sizing border.
            </summary>
            <param name="point">The window relative offset to check (in pixels).</param>
            <returns>
            	One of the <see cref="T:CeGui.SizingLocation"/> enumerated values that describe which part of
            	the sizing border that <paramref name="point"/> corresponded to, if any.
            </returns>
        </member>
        <member name="M:CeGui.Widgets.FrameWindow.GetSizingRect">
            <summary>
            	Return a Rect that describes, in window relative pixel co-ordinates, the outer edge of the sizing area for this window.
            </summary>
            <returns>Sizing Rect.</returns>
        </member>
        <member name="M:CeGui.Widgets.FrameWindow.IsLeftSizingLocation(CeGui.SizingLocation)">
            <summary>
            	Returns true if given <see cref="T:CeGui.SizingLocation"/> is on the left edge.
            </summary>
            <param name="location">SizingLocation value to be checked.</param>
            <returns>
            	true if <paramref name="location"/> is on the left edge.  
            	false if <paramref name="location"/> is not on the left edge.
            </returns>
        </member>
        <member name="M:CeGui.Widgets.FrameWindow.IsRightSizingLocation(CeGui.SizingLocation)">
            <summary>
            	Returns true if given <see cref="T:CeGui.SizingLocation"/> is on the right edge.
            </summary>
            <param name="location">SizingLocation value to be checked.</param>
            <returns>
            	true if <paramref name="location"/> is on the right edge.  
            	false if <paramref name="location"/> is not on the right edge.
            </returns>
        </member>
        <member name="M:CeGui.Widgets.FrameWindow.IsTopSizingLocation(CeGui.SizingLocation)">
            <summary>
            	Returns true if given <see cref="T:CeGui.SizingLocation"/> is on the top edge.
            </summary>
            <param name="location">SizingLocation value to be checked.</param>
            <returns>
            	true if <paramref name="location"/> is on the top edge.  
            	false if <paramref name="location"/> is not on the top edge.
            </returns>
        </member>
        <member name="M:CeGui.Widgets.FrameWindow.IsBottomSizingLocation(CeGui.SizingLocation)">
            <summary>
            	Returns true if given <see cref="T:CeGui.SizingLocation"/> is on the bottom edge.
            </summary>
            <param name="location">SizingLocation value to be checked.</param>
            <returns>
            	true if <paramref name="location"/> is on the bottom edge.  
            	false if <paramref name="location"/> is not on the bottom edge.
            </returns>
        </member>
        <member name="M:CeGui.Widgets.FrameWindow.MoveLeftEdge(System.Single)">
            <summary>
            	Move the window's left edge by <paramref name="delta"/>.
            </summary>
            <remarks>
            	The rest of the window does not move, thus this changes the SizeF of the Window.
            </remarks>
            <param name="delta">
            	float value that specifies the amount to move the window edge, and in which direction.  
            	Positive values make window smaller.
            </param>
        </member>
        <member name="M:CeGui.Widgets.FrameWindow.MoveRightEdge(System.Single)">
            <summary>
            	Move the window's right edge by <paramref name="delta"/>.
            </summary>
            <remarks>
            	The rest of the window does not move, thus this changes the SizeF of the Window.
            </remarks>
            <param name="delta">
            	float value that specifies the amount to move the window edge, and in which direction.  
            	Positive values make window smaller.
            </param>
        </member>
        <member name="M:CeGui.Widgets.FrameWindow.MoveTopEdge(System.Single)">
            <summary>
            	Move the window's top edge by <paramref name="delta"/>.
            </summary>
            <remarks>
            	The rest of the window does not move, thus this changes the SizeF of the Window.
            </remarks>
            <param name="delta">
            	float value that specifies the amount to move the window edge, and in which direction.  
            	Positive values make window smaller.
            </param>
        </member>
        <member name="M:CeGui.Widgets.FrameWindow.MoveBottomEdge(System.Single)">
            <summary>
            	Move the window's bottom edge by <paramref name="delta"/>.
            </summary>
            <remarks>
            	The rest of the window does not move, thus this changes the SizeF of the Window.
            </remarks>
            <param name="delta">
            	float value that specifies the amount to move the window edge, and in which direction.  
            	Positive values make window smaller.
            </param>
        </member>
        <member name="M:CeGui.Widgets.FrameWindow.OffsetPixelPosition(System.Drawing.PointF)">
            <summary>
            	Move the window by the pixel offsets specified in <paramref name="offset"/>.
            </summary>
            <remarks>
            	This is intended for internal system use - it is the method by which the title bar moves the frame window.
            </remarks>
            <param name="offset">The offsets to apply (offsets are in screen pixels).</param>
        </member>
        <member name="M:CeGui.Widgets.FrameWindow.SetCursorForPoint(System.Drawing.PointF)">
            <summary>
            	Set the appropriate mouse cursor for the given window-relative pixel point.
            </summary>
            <param name="point">Point to determine the cursor for (if any).</param>
        </member>
        <member name="M:CeGui.Widgets.FrameWindow.SetTitlebarFont(System.String)">
            <summary>
            	Set the font to use for the title bar text.
            </summary>
            <param name="name">Name of the font to use.</param>
        </member>
        <member name="M:CeGui.Widgets.FrameWindow.SetTitlebarFont(CeGui.Font)">
            <summary>
            	Set the font to use for the title bar text.
            </summary>
            <param name="font">Reference to a font to use.</param>
        </member>
        <member name="M:CeGui.Widgets.FrameWindow.ToggleRollup">
            <summary>
            	Toggles the state of the window between rolled-up (shaded) and normal sizes.
            </summary>
            <remarks>
            	This requires roll-up to be enabled.
            </remarks>
        </member>
        <member name="M:CeGui.Widgets.FrameWindow.Initialize">
            <summary>
            	Initialises the Window based object ready for use.
            </summary>
            <remarks>
            	This must be called for every window created.  
            	Normally this is handled automatically by the <see cref="!:WindowFactory"/> for each Window type.
            </remarks>
        </member>
        <member name="M:CeGui.Widgets.FrameWindow.OnRollupToggled(CeGui.WindowEventArgs)">
            <summary>
            	Event generated internally whenever the roll-up / shade state of the window changes.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.FrameWindow.OnCloseClicked(CeGui.WindowEventArgs)">
            <summary>
            	Event generated internally whenever the close button is clicked.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.FrameWindow.closeButton_Clicked(System.Object,CeGui.GuiEventArgs)">
            <summary>
            	When this frame window's close button is clicked, we fire our own event.
            </summary>
            <param name="sender">Object which fired the event.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="P:CeGui.Widgets.FrameWindow.CloseButtonEnabled">
            <summary>
            	Get/Set whether the close button for the frame window is enabled.
            </summary>
            <value>Set to true to enable the close button (if one is attached), or false to disable the close button.</value>
        </member>
        <member name="P:CeGui.Widgets.FrameWindow.DragMovingEnabled">
            <summary>
            	Get/Set whether this FrameWindow can be moved by dragging the title bar.
            </summary>
            <value>
            	true if the Window will move when the user drags the title bar. 
            	false if the window will not move.
            </value>
        </member>
        <member name="P:CeGui.Widgets.FrameWindow.FrameEnabled">
            <summary>
            	Get/Set whether the frame for this window is enabled.
            </summary>
            <value>true if the frame for this window is enabled, false if the frame for this window is disabled.</value>
        </member>
        <member name="P:CeGui.Widgets.FrameWindow.IsRolledUp">
            <summary>
            	Get/Set whether the window is currently rolled up (a.k.a shaded).
            </summary>
            <value>true if the window is rolled up, false if the window is not rolled up.</value>
        </member>
        <member name="P:CeGui.Widgets.FrameWindow.RollupEnabled">
            <summary>
            	Return whether roll up (a.k.a shading) is enabled for this window.
            </summary>
            <value>true if roll up is enabled, false if roll up is disabled.</value>
        </member>
        <member name="P:CeGui.Widgets.FrameWindow.SizingEnabled">
            <summary>
            	Get/Set whether this window is sizable.
            </summary>
            <remarks>
            	Note that this requires that the window have an enabled frame and that sizing itself is enabled
            </remarks>
            <value>true if the window can be sized, false if the window can not be sized.</value>
        </member>
        <member name="P:CeGui.Widgets.FrameWindow.TitleBarEnabled">
            <summary>
            	Get/Set whether the title bar for this window is enabled.
            </summary>
            <value>
            	true if the window has a title bar and it is enabled, 
            	false if the window has no title bar or if the title bar is disabled.
            </value>
        </member>
        <member name="P:CeGui.Widgets.FrameWindow.SizingBorderThickness">
            <summary>
            	Get/Set the thickness of the sizing border.
            </summary>
            <value>float value describing the thickness of the sizing border in screen pixels.</value>
        </member>
        <member name="P:CeGui.Widgets.FrameWindow.TitlebarFont">
            <summary>
            Get/Set the Font of the titlebar.
            </summary>
            <value>Titlebar Font</value>
        </member>
        <member name="E:CeGui.Widgets.FrameWindow.RollupToggled">
            <summary>
            	Fired when the rollup (shade) state of the window changes.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.FrameWindow.CloseClicked">
            <summary>
            	Fired when the close button for the window is clicked.
            </summary>
        </member>
        <member name="T:CeGui.Widgets.EditBox">
            <summary>
            Summary description for EditBox.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.EditBox.readOnly">
            <summary>
            	True if the editbox is in read-only mode.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.EditBox.maskText">
            <summary>
            	True if the editbox text should be rendered masked.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.EditBox.maskCodePoint">
            <summary>
            	Code point to use when rendering masked text.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.EditBox.maxTextLength">
            <summary>
            	Maximum number of characters for this Editbox.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.EditBox.caratPos">
            <summary>
            	Position of the carat / insert-point.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.EditBox.selectionStart">
            <summary>
            	Start of selection area.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.EditBox.selectionEnd">
            <summary>
            	End of selection area.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.EditBox.dragging">
            <summary>
            	true when a selection is being dragged.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.EditBox.dragAnchorIdx">
            <summary>
            	Selection index for drag selection anchor point.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.EditBox.validator">
            <summary>
            	Used to perform validation against text entered as input.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.EditBox.validationPattern">
            <summary>
            	Pattern to use for validating text.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.EditBox.normalTextColor">
            <summary>
            	Text color used normally.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.EditBox.selectTextColor">
            <summary>
            	Text color used when text is highlighted.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.EditBox.selectBrushColor">
            <summary>
            	Color to apply to the selection brush.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.EditBox.inactiveSelectBrushColor">
            <summary>
            	Color to apply to the selection brush when widget is inactive / read-only.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.EditBox.#ctor(System.String,System.String)">
            <summary>
            	Constructor.
            </summary>
            <param name="name">Name for this widget.</param>
        </member>
        <member name="M:CeGui.Widgets.EditBox.DrawSelf(System.Single)">
            <summary>
            	
            </summary>
            <param name="z"></param>
        </member>
        <member name="M:CeGui.Widgets.EditBox.GetTextIndexFromPosition(System.Drawing.PointF)">
            <summary>
            	Return the text code point index that is rendered closest to screen position <paramref cref="!:point"/>.
            </summary>
            <param name="point">Point object describing a position on the screen in pixels.</param>
            <returns>Code point index into the text that is rendered closest to screen position <paramref cref="!:point"/>.</returns>
        </member>
        <member name="M:CeGui.Widgets.EditBox.ClearSelection">
            <summary>
            	Clear the current selection setting.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.EditBox.EraseSelectedText(System.Boolean)">
            <summary>
            	Erase the currently selected text.
            </summary>
            <param name="modifyText">
            	When true, the actual text will be modified.  
            	When false, everything is done except erasing the characters.
            </param>
        </member>
        <member name="M:CeGui.Widgets.EditBox.HandleBackspace">
            <summary>
            	Processing for the backspace key.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.EditBox.HandleDelete">
            <summary>
            	Processing for the delete key.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.EditBox.HandleCharLeft(CeGui.ModifierKeys)">
            <summary>
            	Processing to move carat one character left.
            </summary>
            <param name="sysKeys">Current state of the system keys.</param>
        </member>
        <member name="M:CeGui.Widgets.EditBox.HandleWordLeft(CeGui.ModifierKeys)">
            <summary>
            	Processing to move carat one word left.
            </summary>
            <param name="sysKeys">Current state of the system keys.</param>
        </member>
        <member name="M:CeGui.Widgets.EditBox.HandleCharRight(CeGui.ModifierKeys)">
            <summary>
            	Processing to move carat one character right.
            </summary>
            <param name="sysKeys">Current state of the system keys.</param>
        </member>
        <member name="M:CeGui.Widgets.EditBox.HandleWordRight(CeGui.ModifierKeys)">
            <summary>
            	Processing to move carat one word right.
            </summary>
            <param name="sysKeys">Current state of the system keys.</param>
        </member>
        <member name="M:CeGui.Widgets.EditBox.HandleHome(CeGui.ModifierKeys)">
            <summary>
            	Processing to move carat to the start of the text.
            </summary>
            <param name="sysKeys">Current state of the system keys.</param>
        </member>
        <member name="M:CeGui.Widgets.EditBox.HandleEnd(CeGui.ModifierKeys)">
            <summary>
            	Processing to move carat to the end of the text.
            </summary>
            <param name="sysKeys">Current state of the system keys.</param>
        </member>
        <member name="M:CeGui.Widgets.EditBox.IsStringValid(System.String)">
            <summary>
            	Using the current regex, the supplied text is validated.
            </summary>
            <param name="text">Text to validate.</param>
            <returns>True if the text is valid according to the validation string, false otherwise.</returns>
        </member>
        <member name="M:CeGui.Widgets.EditBox.SetSelection(System.Int32,System.Int32)">
            <summary>
            	Define the current selection for the Editbox.
            </summary>
            <param name="startPos">
            	Index of the starting point for the selection.  If this value is greater than the number of characters in the Editbox, the
            	selection start will be set to the end of the text.
            </param>
            <param name="endPos">
            	Index of the ending point for the selection.  If this value is greater than the number of characters in the Editbox, the
            	selection end will be set to the end of the text.
            </param>
        </member>
        <member name="M:CeGui.Widgets.EditBox.OnReadOnlyChanged(CeGui.WindowEventArgs)">
            <summary>
            	Event fired internally when the read only state of the Editbox has been changed.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.EditBox.OnMaskedRenderingModeChanged(CeGui.WindowEventArgs)">
            <summary>
            	Event fired internally when the masked rendering mode (password mode) has been changed
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.EditBox.OnMaskCodePointChanged(CeGui.WindowEventArgs)">
            <summary>
            	Event fired internally when the code point to use for masked rendering has been changed.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.EditBox.OnValidationStringChanged(CeGui.WindowEventArgs)">
            <summary>
            	Event fired internally when the validation string is changed.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.EditBox.OnMaximumTextLengthChanged(CeGui.WindowEventArgs)">
            <summary>
            	Event fired internally when the maximum text length for the edit box is changed.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.EditBox.OnTextInvalidated(CeGui.WindowEventArgs)">
            <summary>
            	Event fired internally when something has caused the current text to now fail validation.
            </summary>
            <remarks>
            	This can be caused by changing the validation string or setting a maximum length that causes the
            	current text to be truncated.
            </remarks>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.EditBox.OnInvalidEntryAttempted(CeGui.WindowEventArgs)">
            <summary>
            	Event fired internally when the user attempted to make a change to the edit box that would
            	have caused it to fail validation.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.EditBox.OnCaratMoved(CeGui.WindowEventArgs)">
            <summary>
            	Event fired internally when the carat (insert point) position changes.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.EditBox.OnTextSelectionChanged(CeGui.WindowEventArgs)">
            <summary>
            	Event fired internally when the current text selection changes.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.EditBox.OnEditboxFull(CeGui.WindowEventArgs)">
            <summary>
            	Event fired internally when the edit box text has reached the set maximum length.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.EditBox.OnTextAccepted(CeGui.WindowEventArgs)">
            <summary>
            	Event fired internally when the user accepts the edit box text by pressing Return, Enter, or Tab.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:CeGui.Widgets.EditBox.CaratIndex">
            <summary>
            	Get/Set the current position of the carat.
            </summary>
            <value>
            	Index of the insert carat relative to the start of the text.
            </value>
        </member>
        <member name="P:CeGui.Widgets.EditBox.HasInputFocus">
            <summary>
            	return true if the Editbox has input focus.
            </summary>
            <value>
            	true if the Editbox has keyboard input focus.
            	false if the Editbox does not have keyboard input focus.
            </value>
        </member>
        <member name="P:CeGui.Widgets.EditBox.IsTextValid">
            <summary>
            	Return true if the Editbox text is valid given the currently set validation string.
            </summary>
            <remarks>
            	Validation is performed by means of a regular expression.  If the text matches the regex, the text is said to have passed
            	validation.  If the text does not match with the regex then the text fails validation.
            </remarks>
            <value>true if the current Editbox text passes validation, false if the text does not pass validation.</value>
        </member>
        <member name="P:CeGui.Widgets.EditBox.MaskCodePoint">
            <summary>
            	Gets/Sets the code point used when rendering masked text.
            </summary>
            <value>
            	Code point value representing the Unicode code point that will be rendered instead of the Editbox text
            	when rendering in masked mode.
            </value>
        </member>
        <member name="P:CeGui.Widgets.EditBox.MaxTextLength">
            <summary>
            	Gets/Sets the maximum text length set for this Editbox.
            </summary>
            <remarks>
            	Depending on the validation string set, the actual length of text that can be entered may be less than the value
            	returned here (it will never be more).
            </remarks>
            <value>
            	The maximum number of code points (characters) that can be entered into this Editbox.
            </value>
        </member>
        <member name="P:CeGui.Widgets.EditBox.NormalSelectBrushColor">
            <summary>
            	Return the currently set color to be used for rendering the Editbox selection highlight
            	when the Editbox is active.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.EditBox.NormalTextColor">
            <summary>
            	Return the currently set color to be used for rendering Editbox text in the normal, unselected state.
            </summary>
            <value>Color object representing the ARGB color that is currently set.</value>
        </member>
        <member name="P:CeGui.Widgets.EditBox.SelectedTextColor">
            <summary>
            	Return the currently set color to be used for rendering Editbox text in selected region.
            </summary>
            <value>Color object representing the ARGB color that is currently set.</value>
        </member>
        <member name="P:CeGui.Widgets.EditBox.TextMasked">
            <summary>
            	Gets/Sets whether the text for the Editbox will be rendered masked.
            </summary>
            <value>
            	true if the Editbox text will be rendered masked using the currently set mask code point, false if the Editbox
            	text will be rendered as plain text.
            </value>
        </member>
        <member name="P:CeGui.Widgets.EditBox.ReadOnly">
            <summary>
            	Gets/Sets the read-only state of the editbox.
            </summary>
            <value>
            	true if the Editbox is read only and can't be edited by the user, false if the Editbox is not
            	read only and may be edited by the user.
            </value>
        </member>
        <member name="P:CeGui.Widgets.EditBox.SelectionStartIndex">
            <summary>
            	Return the current selection start point.
            </summary>
            <value>
            	Index of the selection start point relative to the start of the text.  If no selection is defined this function returns
            	the position of the carat.
            </value>
        </member>
        <member name="P:CeGui.Widgets.EditBox.SelectionEndIndex">
            <summary>
            	Return the current selection end point.
            </summary>
            <value>
            	Index of the selection end point relative to the start of the text.  If no selection is defined this function returns
            	the position of the carat.
            </value>
        </member>
        <member name="P:CeGui.Widgets.EditBox.SelectionLength">
            <summary>
            	Return the length of the current selection (in code points / characters).
            </summary>
            <value>Number of code points (or characters) contained within the currently defined selection.</value>
        </member>
        <member name="P:CeGui.Widgets.EditBox.ValidationString">
            <summary>
            	Get/Set the regular expression used for text validation.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.EditBox.ReadOnlyChanged">
            <summary>
            	The read-only mode for the edit box has been changed.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.EditBox.MaskedRenderingModeChanged">
            <summary>
            	The masked rendering mode (password mode) has been changed.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.EditBox.MaskCodePointChanged">
            <summary>
            	The code point (character) to use for masked text has been changed.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.EditBox.ValidationStringChanged">
            <summary>
            	The validation string has been changed.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.EditBox.MaximumTextLengthChanged">
            <summary>
            	The maximum allowable string length has been changed.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.EditBox.TextInvalidated">
            <summary>
            	Some operation has made the current text invalid with regards to the validation string.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.EditBox.InvalidEntryAttempted">
            <summary>
            	The user attempted to modify the text in a way that would have made it invalid.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.EditBox.CaratMoved">
            <summary>
            	The text carat (insert point) has changed.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.EditBox.TextSelectionChanged">
            <summary>
            	The current text selection has changed.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.EditBox.EditboxFull">
            <summary>
            	The number of characters in the edit box has reached the current maximum.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.EditBox.TextAccepted">
            <summary>
            	The user has accepted the current text by pressing Return, Enter, or Tab.
            </summary>
        </member>
        <member name="T:CeGui.ColourRect">
            <summary>Class that holds details of colors for the four corners of a Rect</summary>
        </member>
        <member name="M:CeGui.ColourRect.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:CeGui.ColourRect.#ctor(CeGui.Colour)">
            <summary>
              Constructor for ColourRect objects (via single colour).
              Also handles default construction
            </summary>
            <param name="color">Color to use for the four corners</param>
        </member>
        <member name="M:CeGui.ColourRect.#ctor(CeGui.Colour,CeGui.Colour,CeGui.Colour,CeGui.Colour)">
            <summary>Constructor for ColourRect objects</summary>
            <param name="topLeft">Color for the top left corner of the rectangle</param>
            <param name="topRight">Color for the top right corner of the rectangle</param>
            <param name="bottomLeft">Color for the bottom left corner of the rectangle</param>
            <param name="bottomRight">Color for the bottom right corner of the rectangle</param>
        </member>
        <member name="M:CeGui.ColourRect.op_Multiply(CeGui.ColourRect,CeGui.ColourRect)">
            <summary>
              Modulate all components of a colour rect with corresponding
              components from another colour rect.
            </summary>
            <param name="first">Color rect whose components to modulate</param>
            <param name="second">Color rect by which the components are modulated</param>
            <returns>The modulated color rect</returns>
        </member>
        <member name="M:CeGui.ColourRect.SetAlpha(System.Single)">
            <summary>Sets the alpha value for all colors in the color Rect</summary>
            <param name="alpha">Alpha value to use</param>
        </member>
        <member name="M:CeGui.ColourRect.SetTopAlpha(System.Single)">
            <summary>Set the alpha value to use for the top edge of the ColourRect</summary>
            <param name="alpha">Alpha value to use</param>
        </member>
        <member name="M:CeGui.ColourRect.SetBottomAlpha(System.Single)">
            <summary>Set the alpha value to use for the bottom edge of the ColourRect</summary>
            <param name="alpha">Alpha value to use</param>
        </member>
        <member name="M:CeGui.ColourRect.SetLeftAlpha(System.Single)">
            <summary>Set the alpha value to use for the left edge of the ColourRect</summary>
            <param name="alpha">Alpha value to use</param>
        </member>
        <member name="M:CeGui.ColourRect.SetRightAlpha(System.Single)">
            <summary>Set the alpha value to use for the right edge of the ColourRect</summary>
            <param name="alpha">Alpha value to use</param>
        </member>
        <member name="M:CeGui.ColourRect.IsMonochromatic">
            <summary>Determinate the ColourRect is monochromatic or variegated</summary>
            <returns>
              True if all four corners of the ColourRect has same colour, false otherwise
            </returns>
        </member>
        <member name="M:CeGui.ColourRect.GetSubRectangle(System.Single,System.Single,System.Single,System.Single)">
            <summary>Gets a portion of this ColourRect as a subset ColourRect</summary>
            <param name="left">
              The left side of this subrectangle (in the range of 0-1 float)
            </param>
            <param name="right">
              The right side of this subrectangle (in the range of 0-1 float)
            </param>
            <param name="top">
              The top side of this subrectangle (in the range of 0-1 float)
            </param>
            <param name="bottom">
              The bottom side of this subrectangle (in the range of 0-1 float)
            </param>
            <returns>A ColourRect from the specified range</returns>
        </member>
        <member name="M:CeGui.ColourRect.GetColourAtPoint(System.Single,System.Single)">
            <summary>Get the colour at a point in the rectangle</summary>
            <param name="x">The x coordinate of the point</param>
            <param name="y">The y coordinate of the point</param>
            <returns>The colour at the specified point</returns>
        </member>
        <member name="M:CeGui.ColourRect.SetColours(CeGui.Colour)">
            <summary>Set the colour of all four corners simultaneously</summary>
            <param name="col">colour that is to be set for all four corners of the ColourRect</param>
        </member>
        <member name="M:CeGui.ColourRect.ModulateAlpha(System.Single)">
            <summary>Module the alpha components of each corner's colour by a constant</summary>
            <param name="alpha">The constant factor to modulate all alpha colour components by</param>
        </member>
        <member name="M:CeGui.ColourRect.ToString">
            <summary>
              Returns a string representation of this ColorRect in the form
              "tl:[color] tr:[color] bl:[color] br:[color]"
            </summary>
            <returns>A string representation of this ColorRect</returns>
        </member>
        <member name="M:CeGui.ColourRect.Parse(System.String)">
            <summary>
              Parses a string representation of the ColorRect and returns the corresponding
              ColorRect object
            </summary>
            <param name="data">A string representation of a ColorRect</param>
            <returns>A ColorRect corresponding matching the string representation</returns>
        </member>
        <member name="F:CeGui.ColourRect.topLeft">
            <summary>The colors at the four corners of the rectangle</summary>
        </member>
        <member name="F:CeGui.ColourRect.topRight">
            <summary>The colors at the four corners of the rectangle</summary>
        </member>
        <member name="F:CeGui.ColourRect.bottomLeft">
            <summary>The colors at the four corners of the rectangle</summary>
        </member>
        <member name="F:CeGui.ColourRect.bottomRight">
            <summary>The colors at the four corners of the rectangle</summary>
        </member>
        <member name="T:CeGui.PropertyLinkDefinition">
            <summary>
              Class representing a property that links to another property defined on
              an attached child widget
            </summary>
        </member>
        <member name="T:CeGui.PropertyDefinitionBase">
            <summary>
              Common base class used for types representing a new property to be available
              on all widgets that use the WidgetLook that the property definition is a part of
            </summary>
        </member>
        <member name="M:CeGui.PropertyDefinitionBase.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Initializes a new instance of PropertyDefinitionBase</summary>
            <param name="name">Name of the property definition</param>
            <param name="help">Help text for this property definition</param>
            <param name="initialValue">Initial value to assign to properties</param>
            <param name="redrawOnWrite">Requires redraw when property changes?</param>
            <param name="layoutOnWrite">Requires layout update when property changes?</param>
        </member>
        <member name="M:CeGui.PropertyDefinitionBase.Set(CeGui.PropertyReceiver,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="receiver">Pointer to the target object</param>
            <param name="value">
              String that contains a textual representation of the new value to assign
              to the Property
            </param>
            <remarks>
              When overriding the set() member of PropertyDefinitionBase, you MUST call
              the base class implementation after you have set the property value
              (i.e. you must call PropertyDefinitionBase::set())
            </remarks>
        </member>
        <member name="M:CeGui.PropertyDefinitionBase.WriteXmlToStream(System.Xml.XmlWriter)">
            <summary>
              Writes an xml representation of the PropertyDefinitionBase based
              object into xmlStream
            </summary>
            <param name="xmlStream">Stream where xml data should be output</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CeGui.PropertyDefinitionBase.WriteXmlElementType(System.Xml.XmlWriter)" -->
        <member name="M:CeGui.PropertyDefinitionBase.WriteXmlAttributes(System.Xml.XmlWriter)">
            <summary>
              Write out any xml attributes added in a sub-class. Note that you should
              not write the closing '/>' character sequence, nor any other information
              in this function. You should always call the base class implementation
              of this function when overriding
            </summary>
            <param name="xmlStream">Stream where xml data should be output</param>
        </member>
        <member name="F:CeGui.PropertyDefinitionBase.writeCausesRedraw">
            <summary>Whether the window need to be redrawn when this property changes</summary>
        </member>
        <member name="F:CeGui.PropertyDefinitionBase.writeCausesLayout">
            <summary>Whether the layout needs to updated when this property changes</summary>
        </member>
        <member name="M:CeGui.PropertyLinkDefinition.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Initializes a new property link definition</summary>
            <param name="propertyName">Name of the property</param>
            <param name="widgetNameSuffix">TODO: What is this?</param>
            <param name="targetProperty">TODO: What does this do?</param>
            <param name="initialValue">Initial value to assign to the property</param>
            <param name="redrawOnWrite">Redraw required when property changes?</param>
            <param name="layoutOnWrite">Layout update required when property changes?</param>
        </member>
        <member name="M:CeGui.PropertyLinkDefinition.Get(CeGui.PropertySet)">
            <summary>Return the current value of the Property as a String</summary>
            <param name="receiver">target object</param>
            <returns>
              A string containing a textual representation of the current value of
              the property
            </returns>
        </member>
        <member name="M:CeGui.PropertyLinkDefinition.Set(CeGui.PropertySet,System.String)">
            <summary>Sets the value of the property</summary>
            <param name="receiver">Pointer to the target object</param>
            <param name="value">
              String that contains a textual representation of the new value to assign
              to the Property
            </param>
            <remarks>
              When overriding the set() member of PropertyDefinitionBase, you MUST call
              the base class implementation after you have set the property value
              (i.e. you must call PropertyDefinitionBase::set())
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CeGui.PropertyLinkDefinition.WriteXmlElementType(System.Xml.XmlWriter)" -->
        <member name="M:CeGui.PropertyLinkDefinition.WriteXmlAttributes(System.Xml.XmlWriter)">
            <summary>
              Write out any xml attributes added in a sub-class. Note that you should
              not write the closing '/>' character sequence, nor any other information
              in this function. You should always call the base class implementation
              of this function when overriding
            </summary>
            <param name="xmlStream">Stream where xml data should be output</param>
        </member>
        <member name="M:CeGui.PropertyLinkDefinition.GetTargetWindow(CeGui.PropertyReceiver)">
            <summary>
              Return a pointer to the window containing the target property to be accessed
            </summary>
            <param name="receiver">Property receiver</param>
            <returns>The window containing the target property</returns>
        </member>
        <member name="F:CeGui.PropertyLinkDefinition.widgetNameSuffix">
            <summary>TODO: What is this?</summary>
        </member>
        <member name="F:CeGui.PropertyLinkDefinition.targetProperty">
            <summary>TODO: What does this do?</summary>
        </member>
        <member name="T:CeGui.Widgets.ListboxItem">
            <summary>
            Base class for list box items.
            </summary>
            <remarks>
            The ListboxItem is intended to be sub-classed and has the potential to allow virtually any
            data to be put into a list box type widget.
            </remarks>
        </member>
        <member name="F:CeGui.Widgets.ListboxItem.itemText">
            <summary>
            The text for this item.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListboxItem.itemID">
            <summary>
            Application assigned ID code for this item
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListboxItem.itemData">
            <summary>
            Application assigned data for this item.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListboxItem.selected">
            <summary>
            true if the item is selected
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListboxItem.disabled">
            <summary>
            true if the item is disabled.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListboxItem.owner">
            <summary>
            The Window object that owns this ListboxItem.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListboxItem.selectColors">
            <summary>
            Colors to be used for the selection highlight.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListboxItem.selectBrushImage">
            <summary>
            Image to use for rendering the selection highlight.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.ListboxItem.SetSelectionColors(CeGui.Colour,CeGui.Colour,CeGui.Colour,CeGui.Colour)">
            <summary>
            Set the individual colors to use for the selection area.
            </summary>
            <param name="topLeft"></param>
            <param name="topRight"></param>
            <param name="bottomLeft"></param>
            <param name="bottomRight"></param>
        </member>
        <member name="M:CeGui.Widgets.ListboxItem.SetSelectionColors(CeGui.Colour)">
            <summary>
            Set the selection color to be used for the entire selection area.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:CeGui.Widgets.ListboxItem.SetSelectionBrushImage(System.String,System.String)">
            <summary>
            Set the selection brush image via Imageset and Image names.
            </summary>
            <param name="imagesetName"></param>
            <param name="imageName"></param>
        </member>
        <member name="M:CeGui.Widgets.ListboxItem.Draw(CeGui.Vector3,System.Single,CeGui.Rect)">
            <summary>
            Perform rendering for this ListboxItem
            </summary>
            <param name="position">Vector3 object describing the upper-left corner of area that should be rendered in to for the draw operation.</param>
            <param name="alpha">Alpha value to be used when rendering the item (between 0.0f and 1.0f).</param>
            <param name="clipper">Rect object describing the clipping Rect for the draw operation.</param>
        </member>
        <member name="M:CeGui.Widgets.ListboxItem.GetModulateAlphaColourRect(CeGui.ColourRect,System.Single)">
            <summary>
            Return a ColorRect object describing the colors in ColorRect 'colors' after having
            their alpha component modulated by 'alpha'.
            </summary>
            <param name="colors">Input ColourRect object</param>
            <param name="alpha">value to modulate with</param>
            <returns>ColorRect containing the modulated version of 'colors'</returns>
        </member>
        <member name="M:CeGui.Widgets.ListboxItem.CalculateModulatedAlphaColor(CeGui.Colour,System.Single)">
            <summary>
            Return a Color value describing the color specified by 'colour' after having its
            alpha component modulated by the value 'alpha'.
            </summary>
            <param name="color">Color whos alpha value is to be modulated</param>
            <param name="alpha">value by which to modulate the given Color</param>
            <returns>Modulated Color value.</returns>
        </member>
        <member name="M:CeGui.Widgets.ListboxItem.lessthan_operator(CeGui.Widgets.ListboxItem)">
            <summary>
            	Method called from static operator overload to virtualise the compare operation
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:CeGui.Widgets.ListboxItem.greaterthan_operator(CeGui.Widgets.ListboxItem)">
            <summary>
            	Method called from static operator overload to virtualise the compare operation
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:CeGui.Widgets.ListboxItem.op_LessThan(CeGui.Widgets.ListboxItem,CeGui.Widgets.ListboxItem)">
            <summary>
            	Less-than operator for ListboxItem objects.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:CeGui.Widgets.ListboxItem.op_GreaterThan(CeGui.Widgets.ListboxItem,CeGui.Widgets.ListboxItem)">
            <summary>
            	Greater-than operator for ListboxItem objects.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:CeGui.Widgets.ListboxItem.Text">
            <summary>
            Get/Set the text for this ListboxItem.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ListboxItem.ID">
            <summary>
            Get/Set the ID for this ListboxItem.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ListboxItem.UserData">
            <summary>
            Get/Set the user data object for this ListboxItem.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ListboxItem.Selected">
            <summary>
            Get/Set the selected state of this ListboxItem.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ListboxItem.Disabled">
            <summary>
            Get/Set the disabled state of this ListboxItem.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ListboxItem.OwnerWindow">
            <summary>
            Get/Set the owner window for this ListboxItem.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ListboxItem.SelectionColors">
            <summary>
            Get/Set the selection colors for this ListboxItem.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ListboxItem.SelectionBrushImage">
            <summary>
            Get/Set the selection brush image for this ListboxItem.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ListboxItem.Size">
            <summary>
            Return the pixel SizeF of this ListboxItem.
            </summary>
        </member>
        <member name="T:CeGui.Widgets.ComboBox">
            <summary>
            Summary description for ComboBox.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ComboBox.editBox">
            <summary>
            	Editbox widget sub-component.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ComboBox.dropList">
            <summary>
            	ComboDropList widget sub-component.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ComboBox.button">
            <summary>
            	PushButton widget sub-component.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.#ctor(System.String,System.String)">
            <summary>
            	Constructor.
            </summary>
            <param name="name">Name of this widget.</param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.CreateEditBox">
            <summary>
            	Create, initialise, and return a reference to an Editbox widget to be used as part
            	of this ComboBox.
            </summary>
            <returns>Reference to a EditBox derived class.</returns>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.CreateDropList">
            <summary>
            	Create, initialise, and return a reference to an ListBox widget to be used as part
            	of this ComboBox.
            </summary>
            <returns>Reference to a ListBox derived class.</returns>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.CreatePushButton">
            <summary>
            	Create, initialise, and return a reference to an PushButton widget to be used as part
            	of this ComboBox.
            </summary>
            <returns>Reference to a PushButton derived class.</returns>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.LayoutComponentWidgets">
            <summary>
            Layout the component widgets of this ComboBox.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.FindItemWithText(System.String,CeGui.Widgets.ListboxItem)">
            <summary>
            Search the list for an item with the specified text.
            </summary>
            <remarks>
            The search will not include 'startItem'.  If 'startItem' is NULL, the search will
            begin from the first item in the list.
            </remarks>
            <param name="text">string containing the text to be searched for.</param>
            <param name="startItem">ListboxItem where the search is to begin.</param>
            <returns>The first ListboxItem in the list after 'startItem' that has text matching 'text'.  If no item matches the criteria NULL is returned.</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'startItem' is not attached to this list box.</exception>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.GetItemIndex(CeGui.Widgets.ListboxItem)">
            <summary>
            Return the index of ListboxItem 'item'.
            </summary>
            <param name="item">ListboxItem whos zero based index is to be returned.</param>
            <returns>Zero based index indicating the position of ListboxItem 'item' in the list box.</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if the specified item is not attached to this list box.</exception>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.IsItemSelected(System.Int32)">
            <summary>
            return whether the string at index position 'index' is selected
            </summary>
            <param name="index">Index of item to check.</param>
            <returns>true if the item is selected, false if the item is not selected.</returns>
            <exception cref="T:CeGui.InvalidRequestException">Thrown if the specified item index is out of range.</exception>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.IsListboxItemInList(CeGui.Widgets.ListboxItem)">
            <summary>
            Returns whether the given ListboxItem is attached to the Listbox.
            </summary>
            <param name="item">ListboxItem to test for.</param>
            <returns>true if the item is attached, false if the item is not attached.</returns>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.ActivateEditBox">
            <summary>
            	Activate the edit box component of the Combobox.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.AddItem(CeGui.Widgets.ListboxItem)">
            <summary>
            	Add the given ListboxItem to the list.
            </summary>
            <param name="item">
            	Reference to the ListboxItem to be added to the list.  Note that it is the passed object that is added to the
            	list, a copy is not made.  If this parameter is null, nothing happens.
            </param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.AddItem(System.String)">
            <summary>
            	Adds the text using a ListboxTextItem to the list.
            </summary>
            <param name="item">
            	Reference to the ListboxItem to be added to the list.  Note that it is the passed object that is added to the
            	list, a copy is not made.  If this parameter is null, nothing happens.
            </param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.AddItems(CeGui.Widgets.ListboxItem[])">
            <summary>
            	Add the given ListboxItem's to the list.
            </summary>
            <param name="item">
            	Reference to the ListboxItem to be added to the list.  Note that it is the passed object that is added to the
            	list, a copy is not made.  If this parameter is null, nothing happens.
            </param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.AddItems(System.String[])">
            <summary>
            	Adds each text as a ListboxTextItem to the list.
            </summary>
            <param name="item">
            	Reference to the ListboxItem to be added to the list.  Note that it is the passed object that is added to the
            	list, a copy is not made.  If this parameter is null, nothing happens.
            </param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.InsertItem(CeGui.Widgets.ListboxItem,CeGui.Widgets.ListboxItem)">
            <summary>
            	Insert an item into the list box after a specified item already in the list.
            </summary>
            <remarks>
            	Note that if the list is sorted, the item may not end up in the requested position.
            </remarks>
            <param name="item">
            	Reference to the ListboxItem to be inserted.  Note that it is the passed object that is added to the
            	list, a copy is not made.  If this parameter is null, nothing happens.
            </param>
            <param name="position">
            	Reference to a ListboxItem that <paramref cref="!:item"/> is to be inserted after.  
            	If this parameter is null, the item is inserted at the start of the list.
            </param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.RemoveItem(CeGui.Widgets.ListboxItem)">
            <summary>
            	Removes the given item from the list box.
            </summary>
            <param name="item">Reference to the item to remove.
            	If <paramref cref="!:item"/> is not attached to this list box then nothing will happen.
            </param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.ClearAllSelections">
            <summary>
            	Clear the selected state for all items.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.ResetList">
            <summary>
            	Remove all items from the list.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.HideDropList">
            <summary>
            	Hides the drop-down list.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.ShowDropList">
            <summary>
            	Show the drop-down list.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.SetItemSelectState(CeGui.Widgets.ListboxItem,System.Boolean)">
            <summary>
            	Set the select state of an attached ListboxItem.
            </summary>
            <remarks>
            	This is the recommended way of selecting and deselecting items attached to a list box as it respects the
            	multi-select mode setting.  It is possible to modify the setting on ListboxItems directly, but that approach
            	does not respect the settings of the list box.
            </remarks>
            <param name="item">The ListboxItem to be affected.  This item must be attached to the list box.</param>
            <param name="state">true to select the item, false to de-select the item.</param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.SetItemSelectState(System.Int32,System.Boolean)">
            <summary>
            	Set the select state of an attached ListboxItem.
            </summary>
            <remarks>
            	This is the recommended way of selecting and deselecting items attached to a list box as it respects the
            	multi-select mode setting.  It is possible to modify the setting on ListboxItems directly, but that approach
            	does not respect the settings of the list box.
            </remarks>
            <param name="index">
            	The zero based index of the ListboxItem to be affected.  
            	This must be a valid index (0 &lt; = index &lt; ItemCount).
            </param>
            <param name="state">true to select the item, false to de-select the item.</param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.HandleUpdatedListItemData">
            <summary>
            	Causes the list box to update it's internal state after changes have been made to one or more
            	attached ListboxItem objects.
            </summary>
            <remarks>
            	Client code must call this whenever it has made any changes to ListboxItem objects already attached to the
            	list box.  If you are just adding items, or removed items to update them prior to re-adding them, there is
            	no need to call this method.
            </remarks>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.Initialize">
            <summary>
            	Initializes the layout and sub-components of this widget.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.button_Clicked(System.Object,CeGui.GuiEventArgs)">
            <summary>
            	Handle the dropdown button being clicked.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.dropList_Hidden(System.Object,CeGui.GuiEventArgs)">
            <summary>
            	Handler for when the droplist hides itself.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.dropList_ListSelectionAccepted(System.Object,CeGui.WindowEventArgs)">
            <summary>
            	Handler for selections made in the drop-list.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.OnReadOnlyChanged(CeGui.WindowEventArgs)">
            <summary>
            	Event fired internally when the read only state of the Editbox has been changed.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.OnValidationStringChanged(CeGui.WindowEventArgs)">
            <summary>
            	Event fired internally when the validation string is changed.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.OnMaximumTextLengthChanged(CeGui.WindowEventArgs)">
            <summary>
            	Event fired internally when the maximum text length for the edit box is changed.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.OnTextInvalidated(CeGui.WindowEventArgs)">
            <summary>
            	Event fired internally when something has caused the current text to now fail validation.
            </summary>
            <remarks>
            	This can be caused by changing the validation string or setting a maximum length that causes the
            	current text to be truncated.
            </remarks>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.OnInvalidEntryAttempted(CeGui.WindowEventArgs)">
            <summary>
            	Event fired internally when the user attempted to make a change to the edit box that would
            	have caused it to fail validation.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.OnCaratMoved(CeGui.WindowEventArgs)">
            <summary>
            	Event fired internally when the carat (insert point) position changes.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.OnTextSelectionChanged(CeGui.WindowEventArgs)">
            <summary>
            	Event fired internally when the current text selection changes.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.OnEditboxFull(CeGui.WindowEventArgs)">
            <summary>
            	Event fired internally when the edit box text has reached the set maximum length.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.OnTextAccepted(CeGui.WindowEventArgs)">
            <summary>
            	Event fired internally when the user accepts the edit box text by pressing Return, Enter, or Tab.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.OnListContentsChanged(CeGui.WindowEventArgs)">
            <summary>
            Triggered when the contents of the Listbox is changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.OnSelectionChanged(CeGui.WindowEventArgs)">
            <summary>
            Triggered when the current selection within the Listbox changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.OnSortModeChanged(CeGui.WindowEventArgs)">
            <summary>
            Triggered when the sort mode of the Listbox changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.OnVerticalScrollbarModeChanged(CeGui.WindowEventArgs)">
            <summary>
            Triggered when the 'always show' mode of the vertical scrollbar is changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.OnHorizontalScrollbarModeChanged(CeGui.WindowEventArgs)">
            <summary>
            Triggered when the 'always show' mode of the horizontal scrollbar is changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.OnDropListDisplayed(CeGui.WindowEventArgs)">
            <summary>
            	Handler called internally when the Combobox's drop-down list has been displayed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.OnDropListRemoved(CeGui.WindowEventArgs)">
            <summary>
            	Handler called internally when the Combobox's drop-down list has been hidden.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.OnListSelectionAccepted(CeGui.WindowEventArgs)">
            <summary>
            	Handler called internally when the user has confirmed a selection within the Combobox's drop-down list.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.OnFontChanged(CeGui.GuiEventArgs)">
            <summary>
            	Handle widget font changing.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.OnSized(CeGui.GuiEventArgs)">
            <summary>
            	Handle the combobox being resized.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.OnTextChanged(CeGui.WindowEventArgs)">
            <summary>
            	Handle the text changing.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.ComboBox.OnActivated(CeGui.WindowEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:CeGui.Widgets.ComboBox.CaratIndex">
            <summary>
            	Get/Set the current position of the carat.
            </summary>
            <value>
            	Index of the insert carat relative to the start of the text.
            </value>
        </member>
        <member name="P:CeGui.Widgets.ComboBox.HasInputFocus">
            <summary>
            	return true if the Editbox has input focus.
            </summary>
            <value>
            	true if the Editbox has keyboard input focus.
            	false if the Editbox does not have keyboard input focus.
            </value>
        </member>
        <member name="P:CeGui.Widgets.ComboBox.IsTextValid">
            <summary>
            	Return true if the Editbox text is valid given the currently set validation string.
            </summary>
            <remarks>
            	Validation is performed by means of a regular expression.  If the text matches the regex, the text is said to have passed
            	validation.  If the text does not match with the regex then the text fails validation.
            </remarks>
            <value>true if the current Editbox text passes validation, false if the text does not pass validation.</value>
        </member>
        <member name="P:CeGui.Widgets.ComboBox.MaxTextLength">
            <summary>
            	Gets/Sets the maximum text length set for this Editbox.
            </summary>
            <remarks>
            	Depending on the validation string set, the actual length of text that can be entered may be less than the value
            	returned here (it will never be more).
            </remarks>
            <value>
            	The maximum number of code points (characters) that can be entered into this Editbox.
            </value>
        </member>
        <member name="P:CeGui.Widgets.ComboBox.NormalSelectBrushColor">
            <summary>
            	Return the currently set color to be used for rendering the Editbox selection highlight
            	when the Editbox is active.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ComboBox.NormalTextColor">
            <summary>
            	Return the currently set color to be used for rendering Editbox text in the normal, unselected state.
            </summary>
            <value>Color object representing the ARGB color that is currently set.</value>
        </member>
        <member name="P:CeGui.Widgets.ComboBox.SelectedTextColor">
            <summary>
            	Return the currently set color to be used for rendering Editbox text in selected region.
            </summary>
            <value>Color object representing the ARGB color that is currently set.</value>
        </member>
        <member name="P:CeGui.Widgets.ComboBox.ReadOnly">
            <summary>
            	Gets/Sets the read-only state of the editbox.
            </summary>
            <value>
            	true if the Editbox is read only and can't be edited by the user, false if the Editbox is not
            	read only and may be edited by the user.
            </value>
        </member>
        <member name="P:CeGui.Widgets.ComboBox.SelectionStartIndex">
            <summary>
            	Return the current selection start point.
            </summary>
            <value>
            	Index of the selection start point relative to the start of the text.  If no selection is defined this function returns
            	the position of the carat.
            </value>
        </member>
        <member name="P:CeGui.Widgets.ComboBox.SelectionEndIndex">
            <summary>
            	Return the current selection end point.
            </summary>
            <value>
            	Index of the selection end point relative to the start of the text.  If no selection is defined this function returns
            	the position of the carat.
            </value>
        </member>
        <member name="P:CeGui.Widgets.ComboBox.SelectionLength">
            <summary>
            	Return the length of the current selection (in code points / characters).
            </summary>
            <value>Number of code points (or characters) contained within the currently defined selection.</value>
        </member>
        <member name="P:CeGui.Widgets.ComboBox.ValidationString">
            <summary>
            	Get/Set the regular expression used for text validation.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ComboBox.AlwaysShowVerticalScrollbar">
            <summary>
            Get/Set whether the vertical scrollbar will shown even if it is not required.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ComboBox.AlwaysShowHorizontalScrollbar">
            <summary>
            Get/Set whether the horizontal scrollbar will be shown even if it is not required.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ComboBox.ItemCount">
            <summary>
            Get the number of items in the Listbox.  (read only).
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ComboBox.SelectedItem">
            <summary>
            	Gets the item that was selected in the droplist.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ComboBox.Sorted">
            <summary>
            Get/Set whether the items in the list box are sorted.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ComboBox.Item(System.Int32)">
            <summary>
            	Get the ListboxItem at the given index.
            </summary>
            <exception cref="T:CeGui.InvalidRequestException">Thrown if the specified index is out of range.</exception>
        </member>
        <member name="E:CeGui.Widgets.ComboBox.ReadOnlyChanged">
            <summary>
            	The read-only mode for the edit box has been changed.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ComboBox.ValidationStringChanged">
            <summary>
            	The validation string has been changed.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ComboBox.MaximumTextLengthChanged">
            <summary>
            	The maximum allowable string length has been changed.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ComboBox.TextInvalidated">
            <summary>
            	Some operation has made the current text invalid with regards to the validation string.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ComboBox.InvalidEntryAttempted">
            <summary>
            	The user attempted to modify the text in a way that would have made it invalid.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ComboBox.CaratMoved">
            <summary>
            	The text carat (insert point) has changed.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ComboBox.TextSelectionChanged">
            <summary>
            	The current text selection has changed.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ComboBox.EditboxFull">
            <summary>
            	The number of characters in the edit box has reached the current maximum.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ComboBox.TextAccepted">
            <summary>
            	The user has accepted the current text by pressing Return, Enter, or Tab.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ComboBox.ListContentsChanged">
            <summary>
            Event fired when an item is added to, or removed from, the Listbox.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ComboBox.SelectionChanged">
            <summary>
            Event fired when the current list selection changes.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ComboBox.SortModeChanged">
            <summary>
            Event fired when the sorting mode of the Listbox changes
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ComboBox.VerticalScrollbarModeChanged">
            <summary>
            Event fired when the 'always show' mode for the vertical scrollbar is changed
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ComboBox.HorizontalScrollbarModeChanged">
            <summary>
            Event fired when the 'always show' mode for the horizontal scrollbar is changed
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ComboBox.DropListDisplayed">
            <summary>
            	Event triggered when the drop-down list is displayed.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ComboBox.DropListRemoved">
            <summary>
            	Event triggered when the drop-down list is removed / hidden.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ComboBox.ListSelectionAccepted">
            <summary>
            	Event triggered when the user accepts a selection from the drop-down list.
            </summary>
        </member>
        <member name="T:CeGui.OrientationFlags">
            <summary>
              Enumerated type that contains the valid flags that can be to use when
              rendering image
            </summary>
        </member>
        <member name="F:CeGui.OrientationFlags.FlipHorizontal">
            <summary>Horizontally flip the image</summary>
        </member>
        <member name="F:CeGui.OrientationFlags.FlipVertical">
            <summary>Vertically flip the image</summary>
        </member>
        <member name="F:CeGui.OrientationFlags.RotateRightAngle">
            <summary>Rotate the image counter-clockwise 90 degree</summary>
        </member>
        <member name="T:CeGui.QuadSplitMode">
            <summary>
              Enumerated type that contains the valid diagonal-mode that specifies how
              a quad is split into triangles when rendered with fx. a 3D API
            </summary>
        </member>
        <member name="F:CeGui.QuadSplitMode.TopLeftToBottomRight">
            <summary>Diagonal goes from top-left to bottom-right</summary>
        </member>
        <member name="F:CeGui.QuadSplitMode.BottomLeftToTopRight">
            <summary>Diagonal goes from bottom-left to top-right</summary>
        </member>
        <member name="T:CeGui.Renderer">
            <summary>The interface for custom GUI renderers</summary>
            <remarks>
              Objects derived from Renderer are the means by which the GUI system interfaces
              with specific rendering technologies. To use a rendering system or API to draw
              CEGUI imagery requires that an appropriate Renderer object be available.
            </remarks>
        </member>
        <member name="F:CeGui.Renderer.GuiZInitialValue">
            <summary>Initial value to use for 'z' each frame</summary>
        </member>
        <member name="F:CeGui.Renderer.GuiZElementStep">
            <summary>Value to step 'z' for each GUI element</summary>
            <remarks>Enough for 1000 windows</remarks>
        </member>
        <member name="F:CeGui.Renderer.GuiZLayerStep">
            <summary>Value to step 'z' for each GUI layer</summary>
            <remarks>Enough for 10 layers per window</remarks>
        </member>
        <member name="M:CeGui.Renderer.AddQuad(CeGui.Rect,System.Single,CeGui.Texture,CeGui.Rect,CeGui.ColourRect,CeGui.QuadSplitMode)">
            <summary>Add a quad to the rendering queue</summary>
            <remarks>
              All clipping and other adjustments should have been made prior to calling this
            </remarks>
            <summary>Add a quad to the rendering queue (or render immediately)</summary>
            <param name="destRect">Coordinates at which to draw the quad, in pixels</param>
            <param name="z">Z coordinate at which to draw the quad</param>
            <param name="texture">Texture containing the bitmap to draw onto the quad</param>
            <param name="textureRect">
              Region within the texture to be drawn onto the quad, in texture coordinates
            </param>
            <param name="colors">Vertex colors for each of the 4 corners</param>
            <param name="quadSplitMode">Where to split the quad into 2 triangles</param>
        </member>
        <member name="M:CeGui.Renderer.DoRender">
            <summary>Perform final rendering for all quads that have been queued</summary>
            <remarks>
              The contents of the rendering queue is retained and can be rendered again as required.
              If the contents is not required call <see cref="M:CeGui.Renderer.ClearRenderList"/>
            </remarks>
        </member>
        <member name="M:CeGui.Renderer.ClearRenderList">
            <summary>Clears all queued quads from the render queue</summary>
        </member>
        <member name="M:CeGui.Renderer.CreateTexture">
            <summary>Creates a 'null' Texture object</summary>
            <returns>
              A newly created Texture object. The returned Texture object has no size
              or imagery associated with it, and is generally of little or no use.
            </returns>
        </member>
        <member name="M:CeGui.Renderer.CreateTexture(System.String,System.String)">
            <summary>
              Create a <see cref="T:CeGui.Texture"/> object using the given image file name.
            </summary>
            <remarks>
              Textures are always created with a SizeF that is a power of 2. If the file
              you specify is of a SizeF that is not a power of two, the final size will be
              rounded up. Additionally, textures are always square, so the ultimate sizef
              is governed by the larger of the width and height of the specified file. You
              can check the ultimate sizes by querying the texture after creation.
            </remarks>
            <param name="fileName">
              The path and filename of the image file to use when creating the texture
            </param>
            <param name="resourceGroup">
              Resource group identifier to be passed to the resource provider when loading
              the texture file
            </param>
            <returns>
              A newly created Texture object. The initial contents of the texture memory is
              the requested image file
            </returns>
        </member>
        <member name="M:CeGui.Renderer.CreateTexture(System.Single)">
            <summary>
              Create a Texture object with the given pixel dimensions as specified by
              <paramref name="size"/>
            </summary>
            <remarks>
              Textures are always created with a size that is a power of 2. If you specify a
              sizef that is not a power of two, the final	sizef will be rounded up. So if you
              specify a sizef of 1024, the texture will be (1024 x 1024), however, if you
              specify a Sizef of 1025, the texture will be (2048 x 2048). You can check the
              ultimate sizef by querying the texture after creation.
            </remarks>
            <param name="size">
              Float value that specifies the size to use for the width and height when creating
              the new texture
            </param>
            <returns>
              A newly created Texture object. The initial contents of the texture memory are
              undefined / random
            </returns>
        </member>
        <member name="M:CeGui.Renderer.DestroyTexture(CeGui.Texture)">
            <summary>Destroy the given Texture object</summary>
            <param name="texture">Reference to the texture to be destroyed</param>
        </member>
        <member name="M:CeGui.Renderer.DestroyAllTextures">
            <summary>Destroy all texture objects</summary>
        </member>
        <member name="F:CeGui.Renderer.currentZ">
            <summary>The current z coordinate value</summary>
        </member>
        <member name="M:CeGui.Renderer.OnDisplayModeChanged(CeGui.GuiEventArgs)">
            <summary>
              Internal method for firing the <see cref="E:CeGui.Renderer.DisplayModeChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Renderer.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:CeGui.Renderer.ResetZValue">
            <summary>Reset the z co-ordinate for rendering</summary>
        </member>
        <member name="M:CeGui.Renderer.AdvanceZValue">
            <summary>Update the z co-ordinate for the next major UI element (window)</summary>
        </member>
        <member name="M:CeGui.Renderer.GetZLayer(System.Int32)">
            <summary>
              Returns the z co-ordinate to use for the requested layer on the current GUI element
            </summary>
            <param name="layer">
              Specifies the layer to return the Z co-ordinate for. Each GUI element can use up
              to 10 layers, so valid inputs are 0 to 9 inclusive. If you specify an invalid
              value, results are undefined.
            </param>
            <returns></returns>
        </member>
        <member name="F:CeGui.Renderer.IsQueueingEnabled">
            <summary>
              If false, each call to <see cref="M:CeGui.Renderer.AddQuad(CeGui.Rect,System.Single,CeGui.Texture,CeGui.Rect,CeGui.ColourRect,CeGui.QuadSplitMode)"/> will be rendered immediately.
              If true, calls will be queued and issued in a batch during a
              <see cref="M:CeGui.Renderer.DoRender"/> call
            </summary>
        </member>
        <member name="P:CeGui.Renderer.QueueingEnabled">
            <summary>Enables or disables render queueing</summary>
            <value>
              If false, each call to <see cref="M:CeGui.Renderer.AddQuad(CeGui.Rect,System.Single,CeGui.Texture,CeGui.Rect,CeGui.ColourRect,CeGui.QuadSplitMode)"/> will be rendered immediately.
              If true, calls will be queued and issued in a batch during a
              <see cref="M:CeGui.Renderer.DoRender"/> call.
            </value>
            <remarks>
              This only affects queueing. If queueing is turned off, any calls to addQuad will
              cause the quad to be rendered directly. Note that disabling queueing will not cause
              currently queued quads to be rendered, nor is the queue cleared - at any time the
              queue can still be drawn by calling doRender, and the list can be cleared by
              calling clearRenderList. Re-enabling the queue causes subsequent quads to be added
              as if queueing had never been disabled.
            </remarks>
        </member>
        <member name="P:CeGui.Renderer.Width">
            <summary>Return the current width of the display in pixels</summary>
            <value>Float value equal to the current width of the display in pixels.</value>
        </member>
        <member name="P:CeGui.Renderer.Height">
            <summary>Return the current height of the display in pixels</summary>
            <value>Float value equal to the current height of the display in pixels</value>
        </member>
        <member name="P:CeGui.Renderer.Size">
            <summary>Return the size of the display in pixels</summary>
            <value>A size object containing the dimensions of the current display</value>
        </member>
        <member name="P:CeGui.Renderer.Rect">
            <summary>Return a <see cref="P:CeGui.Renderer.Rect"/> describing the screen</summary>
            <value>
              A Rect object that describes the screen area. Typically, the top-left
              values are always 0, and the size of the area described is equal to
              the screen resolution.
            </value>
        </member>
        <member name="P:CeGui.Renderer.MaxTextureSize">
            <summary>Return the maximum texture size available</summary>
            <value>
              Size of the maximum supported texture in pixels (textures are always
              assumed to be square)
            </value>
        </member>
        <member name="P:CeGui.Renderer.HorizontalScreenDPI">
            <summary>Return the horizontal display resolution dpi</summary>
            <value>Horizontal resolution of the display in dpi</value>
        </member>
        <member name="P:CeGui.Renderer.VerticalScreenDPI">
            <summary>Return the vertical display resolution dpi</summary>
            <value>Vertical resolution of the display in dpi</value>
        </member>
        <member name="E:CeGui.Renderer.DisplayModeChanged">
            <summary>
              Fires when the underlying display mode had changed.
            </summary>
            <remarks>
              It is important that all Renderer implementers fire this properly as the
              system itself subscribes to this event.
            </remarks>
        </member>
        <member name="P:CeGui.Renderer.CurrentZ">
            <summary>Current Z value to use (equates to layer 0 for this UI element).</summary>
            <remarks>
              A float value that specifies the z coordinate to be used for layer 0 on the
              current GUI element
            </remarks>
        </member>
        <member name="T:CeGui.TextComponent">
            <summary>
            Class that encapsulates information for a text component.
            </summary>
        </member>
        <member name="F:CeGui.TextComponent.text">
            <summary>
            text rendered by this component.
            </summary>
        </member>
        <member name="F:CeGui.TextComponent.font">
            <summary>
            name of font to use.
            </summary>
        </member>
        <member name="F:CeGui.TextComponent.vertFormatting">
            <summary>
            Vertical formatting to be applied when rendering the component.
            </summary>
        </member>
        <member name="F:CeGui.TextComponent.horzFormatting">
            <summary>
            Horizontal formatting to be applied when rendering the component.
            </summary>
        </member>
        <member name="M:CeGui.TextComponent.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:CeGui.TextComponent.Text">
            <summary>
            Gets/Sets the text object that will be rendered by this TextComponent.
            </summary>
        </member>
        <member name="P:CeGui.TextComponent.Font">
            <summary>
            Gets/Sets the name of the font to be used when rendering this TextComponent.
            </summary>
        </member>
        <member name="P:CeGui.TextComponent.VerticalFormatting">
            <summary>
            Return the current vertical formatting setting for this TextComponent.
            </summary>
        </member>
        <member name="P:CeGui.TextComponent.HorizontalFormatting">
            <summary>
            Return the current horizontal formatting setting for this TextComponent.
            </summary>
        </member>
        <member name="T:CeGui.ComponentArea">
             <summary>
            	Class that represents a target area for a widget or imagery component.
            
            	This is essentially a Rect built out of Dimension objects.  Of note is that
            	what would normally be the 'right' and 'bottom' edges may alternatively
            	represent width and height depending upon what the assigned Dimension(s)
            	represent.
             </summary>
        </member>
        <member name="M:CeGui.ComponentArea.GetPixelRect(CeGui.Window)">
            <summary>
            Return a Rect describing the absolute pixel area represented by this ComponentArea.
            </summary>
            <param name="wnd">Window object to be used when calculating final pixel area.</param>
            <returns>
            Rect object describing the pixels area represented by this ComponentArea when using \a wnd
            as a reference for calculating the final pixel dimensions.
            </returns>
        </member>
        <member name="M:CeGui.ComponentArea.GetPixelRect(CeGui.Window,CeGui.Rect)">
            <summary>
            Return a Rect describing the absolute pixel area represented by this ComponentArea.
            </summary>
            <param name="wnd">Window object to be used when calculating final pixel area.</param>
            <returns>
            Rect object describing the pixels area represented by this ComponentArea when using \a wnd
            as a reference for calculating the final pixel dimensions.
            </returns>
        </member>
        <member name="P:CeGui.ComponentArea.IsAreaFetchedFromProperty">
            <summary>
            Return whether this ComponentArea fetches it's area via a property on the target window.
            </summary>
        </member>
        <member name="P:CeGui.ComponentArea.AreaPropertySource">
            <summary>
            Gets/Sets the name of the property that will be used to determine the pixel area for this ComponentArea.
            </summary>
        </member>
        <member name="T:CeGui.Widgets.Scrollbar">
            <summary>
            	Base scroll bar class.
            </summary>
            <remarks>
            	This base class for scroll bars does not have any idea of direction - a derived class would
            	add whatever meaning is appropriate according to what that derived class
            	represents to the user.
            </remarks>
        </member>
        <member name="F:CeGui.Widgets.Scrollbar.documentSize">
            <summary>
            	The SizeF of the document / data being scrolled thorugh.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Scrollbar.pageSize">
            <summary>
            	The SizeF of a single 'page' of data.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Scrollbar.stepSize">
            <summary>
            	Step SizeF used for increaseButton / decreaseButton button clicks.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Scrollbar.overlapSize">
            <summary>
            	Amount of overlap when jumping by a page.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Scrollbar.position">
            <summary>
            	Current scroll position.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Scrollbar.thumb">
            <summary>
            	Widget used to represent the 'thumb' of the scroll bar.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Scrollbar.increaseButton">
            <summary>
            	Widget used for the increaseButton button of the scroll bar.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Scrollbar.decreaseButton">
            <summary>
            	Widget used for the decreaseButton button of the scroll bar.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.Scrollbar.#ctor(System.String,System.String)">
            <summary>
            	Constructor.
            </summary>
            <param name="name">Name of this scrollbar.</param>
        </member>
        <member name="M:CeGui.Widgets.Scrollbar.CreateDecreaseButton">
            <summary>
            	Create a <see cref="T:CeGui.Widgets.PushButton"/> based widget to use as the decreaseButton button for this scroll bar.
            </summary>
            <returns>A custom PushButton implementation.</returns>
        </member>
        <member name="M:CeGui.Widgets.Scrollbar.CreateIncreaseButton">
            <summary>
            	Create a <see cref="T:CeGui.Widgets.PushButton"/> based widget to use as the increaseButton button for this scroll bar.
            </summary>
            <returns>A custom PushButton implementation.</returns>
        </member>
        <member name="M:CeGui.Widgets.Scrollbar.CreateThumb">
            <summary>
            	Create a <see cref="T:CeGui.Widgets.Thumb"/> based widget to use as the thumb for this scroll bar.
            </summary>
            <returns>A custom thumb implementation.</returns>
        </member>
        <member name="M:CeGui.Widgets.Scrollbar.GetAdjustDirectionFromPoint(System.Drawing.PointF)">
            <summary>
            	Given window location <paramref name="point"/>, return a value indicating what change should be made to the scroll bar.
            </summary>
            <param name="point">Point object describing a pixel position in window space.</param>
            <returns>
            	- -1 to indicate scroll bar position should be moved to a lower value.
            	-  0 to indicate scroll bar position should not be changed.
            	- +1 to indicate scroll bar position should be moved to a higher value.
            </returns>
        </member>
        <member name="M:CeGui.Widgets.Scrollbar.GetPositionFromThumb">
            <summary>
            	Return the value that best represents current scroll bar position given the current location of the thumb.
            </summary>
            <returns>float value that, given the thumb widget position, best represents the current position for the scroll bar.</returns>
        </member>
        <member name="M:CeGui.Widgets.Scrollbar.LayoutComponentWidgets">
            <summary>
            	Layout the scroll bar component widgets
            </summary>
        </member>
        <member name="M:CeGui.Widgets.Scrollbar.UpdateThumb">
            <summary>
            	Update the SizeF and location of the thumb to properly represent the current state of the scroll bar.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.Scrollbar.Initialize">
            <summary>
            	Initialises the Scrollbar object ready for use.
            </summary>
            <remarks>
            	This must be called for every window created, which is handled by the window factory.
            </remarks>
        </member>
        <member name="M:CeGui.Widgets.Scrollbar.OnScrollPositionChanged(CeGui.WindowEventArgs)">
            <summary>
            	Triggers the <see cref="E:CeGui.Widgets.Scrollbar.ScrollPositionChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.Scrollbar.OnMouseButtonsDown(CeGui.MouseEventArgs)">
            <summary>
            	When the scrollbar is being clicked, adjust the position by the step SizeF.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.Scrollbar.OnSized(CeGui.GuiEventArgs)">
            <summary>
            	When we are SizeF, re-layout the component widgets.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.Scrollbar.thumb_PositionChanged(System.Object,CeGui.WindowEventArgs)">
            <summary>
            	Handles the thumb position moving event.
            </summary>
            <param name="sender">Source object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.Scrollbar.decreaseButton_Clicked(System.Object,CeGui.GuiEventArgs)">
            <summary>
            	Handles the decreaseButton button being clicked.
            </summary>
            <param name="sender">Source object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.Scrollbar.increaseButton_Clicked(System.Object,CeGui.GuiEventArgs)">
            <summary>
            	Handles the increaseButton button being clicked.
            </summary>
            <param name="sender">Source object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:CeGui.Widgets.Scrollbar.DocumentSize">
            <summary>
            	Get/Set the SizeF of the document or data.
            </summary>
            <remarks>
            	<para>
            	The document SizeF should be thought of as the total SizeF of the data that
            	is being scrolled through (the number of lines in a text file for example).
            	</para>
            	<para>
            	The returned value has no meaning within the Gui system, it is left up to the
            	application to assign appropriate values for the application specific use of the scroll bar.
            	</para>
            </remarks>
            <value>float value specifying the currently set document SizeF.</value>
        </member>
        <member name="P:CeGui.Widgets.Scrollbar.OverlapSize">
            <summary>
            	Get/Set the overlap SizeF for this scroll bar.
            </summary>
            <remarks>
            	<para>
            	The overlap SizeF is the amount of data from the end of a 'page' that will
            	remain visible when the position is moved by a page.  This is usually used
            	so that the user keeps some context of where they were within the document's
            	data when jumping a page at a time.
            	</para>
            	<para>
            	The returned value has no meaning within the Gui system, it is left up to the
            	application to assign appropriate values for the application specific use of the scroll bar.
            	</para>
            </remarks>
            <value>float value specifying the currently set overlap SizeF.</value>
        </member>
        <member name="P:CeGui.Widgets.Scrollbar.PageSize">
            <summary>
            	Get/Set the page SizeF for this scroll bar.
            </summary>
            <remarks>
            	<para>
            	The page SizeF is typically the amount of data that can be displayed at one
            	time.  This value is also used when calculating the amount the position will
            	change when you click either side of the scroll bar thumb - the amount the
            	position changes will is (pageSize - overlapSize).
            	</para>
            	<para>
            	The returned value has no meaning within the Gui system, it is left up to the
            	application to assign appropriate values for the application specific use of the scroll bar.
            	</para>
            </remarks>
            <value>float value specifying the currently set page SizeF.</value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:CeGui.Widgets.Scrollbar.ScrollPosition" -->
        <member name="P:CeGui.Widgets.Scrollbar.StepSize">
            <summary>
            	Get/Set the step SizeF for this scroll bar.
            </summary>
            <remarks>
            	<para>
            	The step SizeF is typically a single unit of data that can be displayed, this is the
            	amount the position will change when you click either of the arrow buttons on the
            	scroll bar.  (this could be 1 for a single line of text, for example).
            	</para>
            	<para>
            	The returned value has no meaning within the Gui system, it is left up to the
            	application to assign appropriate values for the application specific use of the scroll bar.
            	</para>
            </remarks>
            <value>float value specifying the currently set step SizeF.</value>
        </member>
        <member name="E:CeGui.Widgets.Scrollbar.ScrollPositionChanged">
            <summary>
            	Occurs when the thumb is moved or the value is modified programatically.
            </summary>
        </member>
        <member name="T:CeGui.Widgets.ListHeader">
            <summary>
            Base class for list header widget.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListHeader.ScrollSpeed">
            <summary>
            Speed to scroll at when dragging outside header.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListHeader.MinimumSegmentPixelWidth">
            <summary>
            Minimum width of a segment in pixels.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListHeader.segments">
            <summary>
            Attached segment windows in header order.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListHeader.sortSegment">
            <summary>
            Pointer to the segment that is currently set as the sort-key,
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListHeader.sizingEnabled">
            <summary>
            true if segments can be sized by the user.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListHeader.sortingEnabled">
            <summary>
            true if the sort criteria modifications by user are enabled (no sorting is actuall done)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:CeGui.Widgets.ListHeader.movingEnabled" -->
        <member name="F:CeGui.Widgets.ListHeader.segmentOffset">
            <summary>
            Base offset used to layout the segments (allows scrolling within the window area)
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListHeader.sortingDirection">
            <summary>
            Brief copy of the current sort direction.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.#ctor(System.String,System.String)">
            <summary>
            	Constructor.
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.GetSegmentFromID(System.Int32)">
            <summary>
            	Return the ListHeaderSegment object with the specified ID.
            </summary>
            <param name="id">id code of the ListHeaderSegment to be returned.</param>
            <returns>
            	ListHeaderSegment object with the requested ID.  If more than one segment has
            	the same ID, only the first one will ever be returned.
            </returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if no segment with the requested ID is attached.</exception>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.GetColumnIndexFromSegment(CeGui.Widgets.ListHeaderSegment)">
            <summary>
            	Return the zero based column index of the specified segment.
            </summary>
            <param name="segment">ListHeaderSegment whos zero based index is to be returned.</param>
            <returns>Zero based column index of the given ListHeaderSegment</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if the given segment is not attached to this ListHeader.</exception>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.GetColumnIndexFromSegmentID(System.Int32)">
            <summary>
            	Return the zero based column index of the segment with the specified ID.
            </summary>
            <param name="id">ID code of the segment whos column index is to be returned.</param>
            <returns>Zero based column index of the first ListHeaderSegment whos ID matches 'id'.</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if no attached segment has the requested ID.</exception>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.GetColumnIndexFromSegmentText(System.String)">
            <summary>
            	Return the zero based column index of the segment with the specified text.
            </summary>
            <param name="text">string containing the text to be searched for.</param>
            <returns>Zero based column index of the segment with the specified text.</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if no attached segments have the requested text.</exception>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.GetPixelOffsetToSegment(CeGui.Widgets.ListHeaderSegment)">
            <summary>
            	Return the pixel offset to the given ListHeaderSegment.
            </summary>
            <param name="segment">ListHeaderSegment object that the offset to is to be returned.</param>
            <returns>The number of pixels up-to the begining of the ListHeaderSegment described by 'segment'.</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'segment' is not attached to the ListHeader.</exception>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.GetPixelOffsetToColumn(System.Int32)">
            <summary>
            	Return the pixel offset to the ListHeaderSegment at the given zero based column index.
            </summary>
            <param name="column">Zero based column index of the ListHeaderSegment whos pixel offset it to be returned.</param>
            <returns>
            	The number of pixels up-to the begining of the ListHeaderSegment located at zero based column index 'column'.
            </returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'column' is out of range.</exception>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.GetPixelWidthOfColumn(System.Int32)">
            <summary>
            	Return the pixel width of the specified column.
            </summary>
            <param name="column">Zero based column index of the segment whos pixel width is to be returned.</param>
            <returns>Pixel width of the ListHeaderSegment at the zero based column index specified by 'column'.</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'column' is out of range.</exception>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.SetSortColumnFromID(System.Int32)">
            <summary>
            	Set the column to to be used for sorting via its ID code.
            </summary>
            <param name="id">ID code of the column segment that is to be used as the sort column.</param>
            <exception cref="T:CeGui.InvalidRequestException">thrown if no segment with ID 'id' is attached to the ListHeader.</exception>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.AddColumn(System.String,System.Int32,System.Single)">
            <summary>
            	Add a new column segment to the end of the header.
            </summary>
            <param name="text">String object holding the initial text for the new segment</param>
            <param name="id">Client specified ID code to be assigned to the new segment.</param>
            <param name="width">Initial width of the new segment using the active metrics system</param>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.InsertColumn(System.String,System.Int32,System.Single,System.Int32)">
            <summary>
            	Insert a new column segment at the specified position.
            </summary>
            <param name="text">String object holding the initial text for the new segment</param>
            <param name="id">Client specified ID code to be assigned to the new segment.</param>
            <param name="width">Initial width of the new segment using the active metrics system</param>
            <param name="position">
            	Zero based column index indicating the desired position for the new column.
            	If this is greater than the current number of columns, the new segment is added to the end if the header.
            </param>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.RemoveColumn(System.Int32)">
            <summary>
            	Removes a column segment from the ListHeader.
            </summary>
            <param name="columnIndex">Zero based column index indicating the segment to be removed.</param>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'columnIndex' is out of range.</exception>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.MoveColumn(System.Int32,System.Int32)">
            <summary>
            	Moves a column segment into a new position.
            </summary>
            <param name="columnIndex">Zero based column index indicating the column segment to be moved.</param>
            <param name="positionIndex">
            	Zero based column index indicating the new position for the segment.  If this is greater than the
            	current number of segments, the segment is moved to the end of the header.
            </param>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'columnIndex' is out of range for this ListHeader.</exception>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.InsertColumn(System.String,System.Int32,System.Single,CeGui.Widgets.ListHeaderSegment)">
            <summary>
            	Insert a new column segment at the specified position.
            </summary>
            <param name="text">String object holding the initial text for the new segment</param>
            <param name="id">Client specified ID code to be assigned to the new segment.</param>
            <param name="width">Initial width of the new segment using the relative metrics system</param>
            <param name="position">
            	ListHeaderSegment object indicating the insert position for the new segment.
            	The new segment will be inserted before the segment indicated by 'position'.
            </param>
            <exception cref="T:CeGui.InvalidRequestException">thrown if ListHeaderSegment 'position' is not attached to the ListHeader.</exception>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.RemoveSegment(CeGui.Widgets.ListHeaderSegment)">
            <summary>
            	Remove the specified segment from the ListHeader.
            </summary>
            <param name="segment">ListHeaderSegment object that is to be removed from the ListHeader.</param>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'segment' is not attached to this ListHeader.</exception>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.MoveColumn(System.Int32,CeGui.Widgets.ListHeaderSegment)">
            <summary>
            	Move a column segment to a new position.
            </summary>
            <param name="columnIndex">Zero based column index indicating the column segment to be moved.</param>
            <param name="position">
            	ListHeaderSegment object indicating the new position for the segment.  The segment at 'columnIndex'
            	will be moved behind segment 'position' (that is, segment 'columnIndex' will appear to the right of
            	segment 'position').
            </param>
            <exception cref="T:CeGui.InvalidRequestException">
            	thrown if 'columnIndex' is out of range for this ListHeader,
            	or if 'position' is not attached to this ListHeader.
            	</exception>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.MoveSegment(CeGui.Widgets.ListHeaderSegment,System.Int32)">
            <summary>
            	Moves a segment into a new position.
            </summary>
            <param name="segment">ListHeaderSegment object that is to be moved.</param>
            <param name="positionIndex">
            	Zero based column index indicating the new position for the segment.
            	If this is greater than the current number of segments, the segment is moved to the end of the header.
            </param>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'segment' is not attached to this ListHeader.</exception>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.MoveSegment(CeGui.Widgets.ListHeaderSegment,CeGui.Widgets.ListHeaderSegment)">
            <summary>
            	Move a segment to a new position.
            </summary>
            <param name="segment">ListHeaderSegment object that is to be moved.</param>
            <param name="position">
            	ListHeaderSegment object indicating the new position for the segment.  The segment 'segment'
            	will be moved behind segment 'position' (that is, segment 'segment' will appear to the right
            	of segment 'position').
            </param>
            <exception cref="T:CeGui.InvalidRequestException">thrown if either 'segment' or 'position' are not attached to this ListHeader.</exception>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.SetColumnPixelWidth(System.Int32,System.Single)">
            <summary>
            	Set the pixel width of the specified column.
            </summary>
            <param name="columnIndex">Zero based column index of the segment whos pixel width is to be set.</param>
            <param name="width">
            	float value specifying the new pixel width to set for the ListHeaderSegment at the zero based
            	column index specified by 'columnIndex'.
            </param>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'columnIndex' is out of range.</exception>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.CreateInitialisedSegment(System.String,System.Int32,System.Single)">
            <summary>
            	Create initialise and return a ListHeaderSegment object, with all events subscribed and ready to use.
            </summary>
            <param name="text"></param>
            <param name="id"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.LayoutSegments">
            <summary>
            	Layout the attached segments
            </summary>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.CreateNewSegment(System.String)">
            <summary>
            	Create a ListHeaderSegment of an appropriate sub-class type.
            </summary>
            <param name="name">Unique name for the new segment widget</param>
            <returns></returns>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.DestroyListSegment(CeGui.Widgets.ListHeaderSegment)">
            <summary>
            	Destroy the given ListHeaderSegment.
            </summary>
            <param name="segment">ListHeaderSegment to be destroyed.</param>
            <returns></returns>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.OnSortColumnChanged(CeGui.WindowEventArgs)">
            <summary>
            	Handler invoked internally when the sort column is changed.
            </summary>
            <param name="e">Events args.</param>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.OnSortDirectionChanged(CeGui.WindowEventArgs)">
            <summary>
            	Handler invoked internally when the dort direction is changed.
            </summary>
            <param name="e">Events args.</param>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.OnSegmentSized(CeGui.WindowEventArgs)">
            <summary>
            	Handler invoked internally when a segment SizeF is changed.
            </summary>
            <param name="e">Events args.</param>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.OnSegmentClicked(CeGui.WindowEventArgs)">
            <summary>
            	Handler invoked internally when a segment is clicked.
            </summary>
            <param name="e">Events args.</param>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.OnSplitterDoubleClicked(CeGui.WindowEventArgs)">
            <summary>
            	Handler invoked internally when a segment sizer is double-clicked.
            </summary>
            <param name="e">Events args.</param>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.OnSegmentSequenceChanged(CeGui.HeaderSequenceEventArgs)">
            <summary>
            	Handler invoked internally when the segment order is changed.
            </summary>
            <param name="e">Events args.</param>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.OnSegmentAdded(CeGui.WindowEventArgs)">
            <summary>
            	Handler invoked internally when a segment is added.
            </summary>
            <param name="e">Events args.</param>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.OnSegmentRemoved(CeGui.WindowEventArgs)">
            <summary>
            	Handler invoked internally when a segment is removed.
            </summary>
            <param name="e">Events args.</param>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.OnSortSettingChanged(CeGui.WindowEventArgs)">
            <summary>
            	Handler invoked internally when user control of sorting is enabled or disabled.
            </summary>
            <param name="e">Events args.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CeGui.Widgets.ListHeader.OnDragMoveSettingChanged(CeGui.WindowEventArgs)" -->
        <member name="M:CeGui.Widgets.ListHeader.OnDragSizeSettingChanged(CeGui.WindowEventArgs)">
            <summary>
            	Handler invoked internally when user sizing of segments is enabled or disabled.
            </summary>
            <param name="e">Events args.</param>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.OnScrollOffsetChanged(CeGui.WindowEventArgs)">
            <summary>
            	Handler invoked internally when the segment render offset (scroll position) is changed.
            </summary>
            <param name="e">Events args.</param>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.SegmentSized_handler(System.Object,CeGui.WindowEventArgs)">
            <summary>
            Handler method called when an attached segment is sized.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.SegmentDragStop_handler(System.Object,CeGui.WindowEventArgs)">
            <summary>
            Handler called when an attached segment is dropped after being dragged
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.SegmentClicked_handler(System.Object,CeGui.WindowEventArgs)">
            <summary>
            Handler called when an attached segment is clicked.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.SplitterDoubleClicked_handler(System.Object,CeGui.WindowEventArgs)">
            <summary>
            Handler called when the sizer/splitter on an attached segment is double-clicked.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.ListHeader.SegmentDragPositionChanged_handler(System.Object,CeGui.WindowEventArgs)">
            <summary>
            Handler called when the drag position of a segment changes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:CeGui.Widgets.ListHeader.ColumnCount">
            <summary>
            Gets the number of columns (segments) in the header.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ListHeader.SortSegment">
            <summary>
            Gets/Sets the current sort segment
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ListHeader.SortColumnIndex">
            <summary>
            Gets/Sets the current sort column index
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ListHeader.SortColumnID">
            <summary>
            Get/Set current sort column via it's ID.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ListHeader.TotalPixelExtent">
            <summary>
            Get the pixel extent of all segments
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ListHeader.SortDirection">
            <summary>
            Gets/Sets the current sorting direction.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ListHeader.UserSortControlEnabled">
            <summary>
            Gets/Sets whether use control of the sort column and direction is enabled.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ListHeader.SegmentSizingEnabled">
            <summary>
            Gets/Sets whether the user may re-SizeF the header segments.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:CeGui.Widgets.ListHeader.SegmentDraggingEnabled" -->
        <member name="P:CeGui.Widgets.ListHeader.ScrollOffset">
            <summary>
            Gets/Sets the current segment scroll offset value.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ListHeader.Item(System.Int32)">
            <summary>
            Indexer to return the ListHeaderSegment for a given column index.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ListHeader.SortColumnChanged">
            <summary>
            The current sort column changed.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ListHeader.SortDirectionChanged">
            <summary>
            The sort direction changed.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ListHeader.SegmentSized">
            <summary>
            A segment has been sized by the user (e.Window is the segment).
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ListHeader.SegmentClicked">
            <summary>
            A segment has been clicked by the user (e.Window is the segment).
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ListHeader.SplitterDoubleClicked">
            <summary>
            A segment splitter has been double-clicked.  (e.Window is the segment).
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ListHeader.SegmentSequenceChanged">
            <summary>
            The order of the segments has changed.  ('e' is a HeaderSequenceEventArgs)
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ListHeader.SegmentAdded">
            <summary>
            A segment has been added to the header.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ListHeader.SegmentRemoved">
            <summary>
            A segment has been removed from the header.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ListHeader.SortSettingChanged">
            <summary>
            The setting that controls user modification to sort configuration changed.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "E:CeGui.Widgets.ListHeader.DragMoveSettingChanged" -->
        <member name="E:CeGui.Widgets.ListHeader.DragSizeSettingChanged">
            <summary>
            The setting that controls user sizing of segments changed.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ListHeader.ScrollOffsetChanged">
            <summary>
            The rendering offset for the segments changed (header has been scrolled).
            </summary>
        </member>
        <member name="T:CeGui.Image">
            <summary>Class that represents a single Image of an <see cref="T:CeGui.Imageset"/></summary>
        </member>
        <member name="M:CeGui.Image.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:CeGui.Image.#ctor(System.String,CeGui.Imageset,CeGui.Rect,System.Drawing.PointF)">
            <summary>
              Constructor for Image objects. This is not normally used directly by client code,
              use the Imageset interface instead.
            </summary>
            <param name="name">String object describing the name of the image being created</param>
            <param name="owner">
              Pointer to a Imageset object that owns this Image. This must not be NULL
            </param>
            <param name="area">
              Rect object describing an area that will be associated with this image
            </param>
            <param name="renderOffset">
              Point object that describes the offset to be applied when rendering this image
            </param>
        </member>
        <member name="M:CeGui.Image.#ctor(System.String,CeGui.Imageset,CeGui.Rect,System.Drawing.PointF,System.Single)">
            <summary>
              Constructor for Image objects. This is not normally used directly by client code,
              use the Imageset interface instead.
            </summary>
            <param name="name">String object describing the name of the image being created</param>
            <param name="owner">
              Pointer to a Imageset object that owns this Image. This must not be NULL
            </param>
            <param name="area">
              Rect object describing an area that will be associated with this image
            </param>
            <param name="renderOffset">
              Point object that describes the offset to be applied when rendering this image
            </param>
            <param name="horzScaling">
              float value indicating the initial horizontal scaling to be applied to this image
            </param>
        </member>
        <member name="M:CeGui.Image.#ctor(System.String,CeGui.Imageset,CeGui.Rect,System.Drawing.PointF,System.Single,System.Single)">
            <summary>
              Constructor for Image objects. This is not normally used directly by client code,
              use the Imageset interface instead.
            </summary>
            <param name="name">String object describing the name of the image being created</param>
            <param name="owner">
              Pointer to a Imageset object that owns this Image. This must not be NULL
            </param>
            <param name="area">
              Rect object describing an area that will be associated with this image
            </param>
            <param name="renderOffset">
              Point object that describes the offset to be applied when rendering this image
            </param>
            <param name="horzScaling">
              float value indicating the initial horizontal scaling to be applied to this image
            </param>
            <param name="vertScaling">
              float value indicating the initial vertical scaling to be applied to this image
            </param>
        </member>
        <member name="M:CeGui.Image.Draw(CeGui.Vector3,System.Drawing.SizeF,CeGui.Rect,CeGui.ColourRect)">
            <summary>Queue the image to be drawn</summary>
            <remarks>
            	The final position of the Image will be adjusted by the offset values defined for this Image object.  If absolute positioning is
            	essential then these values should be taken into account prior to calling the draw() methods.  However, by doing this you take
            	away the ability of the Imageset designer to adjust the alignment and positioning of Images, therefore your component is far
            	less useful since it requires code changes to modify image positioning that could have been handled from a data file.
            </remarks>
            <param name="position"></param>
            <param name="size"></param>
            <param name="clipRect"></param>
            <param name="colors"></param>
        </member>
        <member name="M:CeGui.Image.Draw(CeGui.Vector3,CeGui.Rect,CeGui.ColourRect)">
            <summary>
            	
            </summary>
            <param name="position"></param>
            <param name="clipRect"></param>
            <param name="colors"></param>
        </member>
        <member name="M:CeGui.Image.Draw(CeGui.Rect,System.Single,CeGui.Rect,CeGui.ColourRect)">
            <summary>
            
            </summary>
            <param name="destRect"></param>
            <param name="z"></param>
            <param name="clipRect"></param>
            <param name="colors"></param>
        </member>
        <member name="M:CeGui.Image.SetHorizontalScaling(System.Single)">
            <summary>Set the horizontal scaling factor to be applied to this Image</summary>
            <param name="factor">Float value describing the scaling factor required</param>
        </member>
        <member name="M:CeGui.Image.SetVerticalScaling(System.Single)">
            <summary>Set the vertical scaling factor to be applied to this Image</summary>
            <param name="factor">Float value describing the scaling factor required</param>
        </member>
        <member name="M:CeGui.Image.ToString">
            <summary>Returns a string representation of this image</summary>
            <remarks>
              The format of the returned string will be "set:[ImageSet Name] image:[Image Name]"
            </remarks>
            <returns>The string representation of this image</returns>
        </member>
        <member name="M:CeGui.Image.Parse(System.String)">
            <summary>
              Parses a string in the form, "set:[ImageSet Name] image:[Image Name]", and returns
              the corresponding image if it is available
            </summary>
            <param name="data">String to parse</param>
            <returns>Returns the image corresponding to the string representation</returns>
        </member>
        <member name="M:CeGui.Image.Clone">
            <summary>Creates a copy of this Image</summary>
            <returns>A copy of this image</returns>
        </member>
        <member name="F:CeGui.Image.owner">
            <summary>Link back to Imageset that owns this image</summary>
        </member>
        <member name="F:CeGui.Image.area">
            <summary>Rect defining the area on the texture that makes up this image</summary>
        </member>
        <member name="F:CeGui.Image.offset">
            <summary>Offset to use when rendering</summary>
        </member>
        <member name="F:CeGui.Image.scaledSize">
            <summary>Scaled image size</summary>
        </member>
        <member name="F:CeGui.Image.scaledOffset">
            <summary>Scaled rendering offset</summary>
        </member>
        <member name="F:CeGui.Image.name">
            <summary>Name of this image</summary>
        </member>
        <member name="P:CeGui.Image.Size">
            <summary>A <see cref="T:System.Drawing.SizeF"/> object containing the dimensions of the Image</summary>
            <value>
              SizeF object holding the width and height of the Image.
              Note: The size may be scaled from the original size of the image.
            </value>
        </member>
        <member name="P:CeGui.Image.Width">
            <summary>Return the pixel width of the image</summary>
            <value>Width of this Image in pixels</value>
        </member>
        <member name="P:CeGui.Image.Height">
            <summary>Return the pixel height of the image</summary>
            <value>Height of this Image in pixels</value>
        </member>
        <member name="P:CeGui.Image.Offset">
            <summary>
              Gets a <see cref="T:System.Drawing.Point"/> that contains the offset applied when rendering this Image
            </summary>
            <value><see cref="T:System.Drawing.Point"/> containing the offsets applied when rendering this Image</value>
        </member>
        <member name="P:CeGui.Image.OffsetX">
            <summary>Return the X rendering offset</summary>
            <value>
              X rendering offset. This is the number of pixels that the image is offset by when
              rendering at any given location
            </value>
        </member>
        <member name="P:CeGui.Image.OffsetY">
            <summary>Return the Y rendering offset</summary>
            <value>
              Y rendering offset. This is the number of pixels that the image is offset by
              when rendering at any given location
            </value>
        </member>
        <member name="P:CeGui.Image.Name">
            <summary>Returns the name of this image</summary>
            <value>String containing the name of this image</value>
        </member>
        <member name="P:CeGui.Image.ImagesetName">
            <summary>Returns the name of the <see cref="T:CeGui.Imageset"/> who owns this image</summary>
            <value>String containing the imageset who owns this image.</value>
        </member>
        <member name="P:CeGui.Image.SourceTextureArea">
            <summary>
              Returns a <see cref="T:CeGui.Rect"/> describing the source texture area used by this Image
            </summary>
            <value>
              Rect object that describes, in pixels, the area upon the source texture which is
              used when rendering this Image.
            </value>
        </member>
        <member name="T:CeGui.GuiBuilder">
            <summary>
            Provides the base class for theme-specific widget factories as well as convience creation overloads which allow it to act as a state-driven GUI builder.
            </summary>
            <remarks>If the Create* methods are called directly then RegisterWindow must be called on them before use.
            Non-null, unique ID's must be specified for all windows, though auto-generated IDs may be supported later when null is specified.
            The New* methods create a window and provide overloads to specify the most common properties as well to be set. They also add the created
            window as a child of the ParentWindow if one is specified or if the last created window is set to it via StartChildren().
            </remarks>
        </member>
        <member name="T:CeGui.DimensionType">
            <summary>
            Enumeration of possible values to indicate what a given dimension represents.
            </summary>
        </member>
        <member name="F:CeGui.DimensionType.LeftEdge">
            <summary>
            Dimension represents the left edge of some entity (same as DT_X_POSITION).
            </summary>
        </member>
        <member name="F:CeGui.DimensionType.XPosition">
            <summary>
            Dimension represents the x position of some entity (same as DT_LEFT_EDGE).
            </summary>
        </member>
        <member name="F:CeGui.DimensionType.TopEdge">
            <summary>
            Dimension represents the top edge of some entity (same as DT_Y_POSITION).
            </summary>
        </member>
        <member name="F:CeGui.DimensionType.YPosition">
            <summary>
            Dimension represents the y position of some entity (same as DT_TOP_EDGE).
            </summary>
        </member>
        <member name="F:CeGui.DimensionType.RightEdge">
            <summary>
            Dimension represents the right edge of some entity.
            </summary>
        </member>
        <member name="F:CeGui.DimensionType.BottomEdge">
            <summary>
            Dimension represents the bottom edge of some entity.
            </summary>
        </member>
        <member name="F:CeGui.DimensionType.Width">
            <summary>
            Dimension represents the width of some entity.
            </summary>
        </member>
        <member name="F:CeGui.DimensionType.Height">
            <summary>
            Dimension represents the height of some entity.
            </summary>
        </member>
        <member name="F:CeGui.DimensionType.XOffset">
            <summary>
            Dimension represents the x offset of some entity (usually only applies to an Image entity).
            </summary>
        </member>
        <member name="F:CeGui.DimensionType.YOffset">
            <summary>
            Dimension represents the y offset of some entity (usually only applies to an Image entity).
            </summary>
        </member>
        <member name="F:CeGui.DimensionType.Invalid">
            <summary>
            Invalid / uninitialised DimensionType.
            </summary>
        </member>
        <member name="T:CeGui.VerticalFormatting">
            <summary>
            Enumeration of possible values to indicate the vertical formatting to be used for an image component.
            </summary>
        </member>
        <member name="F:CeGui.VerticalFormatting.TopAligned">
            <summary>
            Top of Image should be aligned with the top of the destination area.
            </summary>
        </member>
        <member name="F:CeGui.VerticalFormatting.CenterAligned">
            <summary>
            Image should be vertically centred within the destination area.
            </summary>
        </member>
        <member name="F:CeGui.VerticalFormatting.BottomAligned">
            <summary>
            Bottom of Image should be aligned with the bottom of the destination area.
            </summary>
        </member>
        <member name="F:CeGui.VerticalFormatting.Stretched">
            <summary>
            Image should be stretched vertically to fill the destination area.
            </summary>
        </member>
        <member name="F:CeGui.VerticalFormatting.Tiled">
            <summary>
            Image should be tiled vertically to fill the destination area (bottom-most tile may be clipped).
            </summary>
        </member>
        <member name="T:CeGui.HorizontalFormatting">
            <summary>
            Enumeration of possible values to indicate the horizontal formatting to be used for an image component.
            </summary>
        </member>
        <member name="F:CeGui.HorizontalFormatting.LeftAligned">
            <summary>
            Left of Image should be aligned with the left of the destination area.
            </summary>
        </member>
        <member name="F:CeGui.HorizontalFormatting.CenterAligned">
            <summary>
            Image should be horizontally centred within the destination area.
            </summary>
        </member>
        <member name="F:CeGui.HorizontalFormatting.RightAligned">
            <summary>
            Right of Image should be aligned with the right of the destination area.
            </summary>
        </member>
        <member name="F:CeGui.HorizontalFormatting.Stretched">
            <summary>
            Image should be stretched horizontally to fill the destination area.
            </summary>
        </member>
        <member name="F:CeGui.HorizontalFormatting.Tiled">
            <summary>
            Image should be tiled horizontally to fill the destination area (right-most tile may be clipped).
            </summary>
        </member>
        <member name="T:CeGui.VerticalTextFormatting">
            <summary>
            Enumeration of possible values to indicate the vertical formatting to be used for a text component.
            </summary>
        </member>
        <member name="F:CeGui.VerticalTextFormatting.TopAligned">
            <summary>
            Top of text should be aligned with the top of the destination area.
            </summary>
        </member>
        <member name="F:CeGui.VerticalTextFormatting.CenterAligned">
            <summary>
            text should be vertically centred within the destination area.
            </summary>
        </member>
        <member name="F:CeGui.VerticalTextFormatting.BottomAligned">
            <summary>
            Bottom of text should be aligned with the bottom of the destination area.
            </summary>
        </member>
        <member name="T:CeGui.HorizontalTextFormatting">
            <summary>
            Enumeration of possible values to indicate the horizontal formatting to be used for a text component.
            </summary>
        </member>
        <member name="F:CeGui.HorizontalTextFormatting.LeftAligned">
            <summary>
            Left of text should be aligned with the left of the destination area (single line of text only).
            </summary>
        </member>
        <member name="F:CeGui.HorizontalTextFormatting.RightAligned">
            <summary>
            Right of text should be aligned with the right of the destination area  (single line of text only).
            </summary>
        </member>
        <member name="F:CeGui.HorizontalTextFormatting.CenterAligned">
            <summary>
            text should be horizontally centred within the destination area  (single line of text only).
            </summary>
        </member>
        <member name="F:CeGui.HorizontalTextFormatting.Justigied">
            <summary>
            text should be spaced so that it takes the full width of the destination area (single line of text only).
            </summary>
        </member>
        <member name="F:CeGui.HorizontalTextFormatting.WrapLeftAligned">
            <summary>
            Left of text should be aligned with the left of the destination area (word wrapped to multiple lines as needed).
            </summary>
        </member>
        <member name="F:CeGui.HorizontalTextFormatting.WrapRightAligned">
            <summary>
            Right of text should be aligned with the right of the destination area  (word wrapped to multiple lines as needed).
            </summary>
        </member>
        <member name="F:CeGui.HorizontalTextFormatting.WrapCenterAligned">
            <summary>
            text should be horizontally centred within the destination area  (word wrapped to multiple lines as needed).
            </summary>
        </member>
        <member name="F:CeGui.HorizontalTextFormatting.WrapJustified">
            <summary>
            text should be spaced so that it takes the full width of the destination area (word wrapped to multiple lines as needed).
            </summary>
        </member>
        <member name="T:CeGui.FontMetricType">
            <summary>
            Enumeration of possible values to indicate a particular font metric.
            </summary>
        </member>
        <member name="F:CeGui.FontMetricType.LineSpacing">
            <summary>
            Vertical line spacing value for font.
            </summary>
        </member>
        <member name="F:CeGui.FontMetricType.Baseline">
            <summary>
            Vertical baseline value for font.
            </summary>
        </member>
        <member name="F:CeGui.FontMetricType.HorxExtent">
            <summary>
            Horizontal extent of a string.
            </summary>
        </member>
        <member name="T:CeGui.DimensionOperator">
            <summary>
            Enumeration of values representing mathematical operations on dimensions.
            </summary>
        </member>
        <member name="F:CeGui.DimensionOperator.Noop">
            <summary>
            Do nothing operator.
            </summary>
        </member>
        <member name="F:CeGui.DimensionOperator.Add">
            <summary>
            Dims should be added.
            </summary>
        </member>
        <member name="F:CeGui.DimensionOperator.Subtract">
            <summary>
            Dims should be subtracted.
            </summary>
        </member>
        <member name="F:CeGui.DimensionOperator.Multiply">
            <summary>
            Dims should be multiplied.
            </summary>
        </member>
        <member name="F:CeGui.DimensionOperator.Divide">
            <summary>
            Dims should be divided.
            </summary>
        </member>
        <member name="T:CeGui.FrameImageComponent">
            <summary>
            Enumeration of values referencing available images forming a frame component.
            </summary>
        </member>
        <member name="F:CeGui.FrameImageComponent.Background">
            <summary>
            References image used for the background.
            </summary>
        </member>
        <member name="F:CeGui.FrameImageComponent.TopLeftCorner">
            <summary>
            References image used for the top-left corner.
            </summary>
        </member>
        <member name="F:CeGui.FrameImageComponent.TopRightCorner">
            <summary>
            References image used for the top-right corner.
            </summary>
        </member>
        <member name="F:CeGui.FrameImageComponent.BottomLeftCorner">
            <summary>
            References image used for the bottom-left corner.
            </summary>
        </member>
        <member name="F:CeGui.FrameImageComponent.BottomRightCorner">
            <summary>
            References image used for the bottom-right corner.
            </summary>
        </member>
        <member name="F:CeGui.FrameImageComponent.LeftEdge">
            <summary>
            References image used for the left edge.
            </summary>
        </member>
        <member name="F:CeGui.FrameImageComponent.RightEdge">
            <summary>
            References image used for the right edge.
            </summary>
        </member>
        <member name="F:CeGui.FrameImageComponent.TopEdge">
            <summary>
            References image used for the top edge.
            </summary>
        </member>
        <member name="F:CeGui.FrameImageComponent.BottomEdge">
            <summary>
            References image used for the bottom edge.
            </summary>
        </member>
        <member name="F:CeGui.FrameImageComponent.FrameImageCount">
            <summary>
            Max number of images for a frame.
            </summary>
        </member>
        <member name="T:CeGui.UDim">
            <summary>
              A unified dimension is a dimension that has both a relative 'scale' portion and
              an absolute 'offset' portion
            </summary>
        </member>
        <member name="F:CeGui.UDim.Zero">
            <summary>A unified dimension that has been initialized to zero</summary>
        </member>
        <member name="M:CeGui.UDim.#ctor(System.Single,System.Single)">
            <summary>Initializes a new unified dimension</summary>
            <param name="scale">Relative scale portion of the dimension</param>
            <param name="offset">Absolute offset portion of the dimension</param>
        </member>
        <member name="M:CeGui.UDim.Absolute(System.Single)">
            <summary>Creates a unified dimension describing an absolute position</summary>
            <param name="offset">Absolute position to place in the unified dimension</param>
            <returns>A new unified dimension containing the given absolute position</returns>
        </member>
        <member name="M:CeGui.UDim.Relative(System.Single)">
            <summary>Creates a unified dimension describing a relative position</summary>
            <param name="scale">Relative position to place in the unified dimension</param>
            <returns>A new unified dimension containing the given relative position</returns>
        </member>
        <member name="M:CeGui.UDim.AsAbsolute(System.Single)">
            <summary>Converts the unified dimension into an absolute value</summary>
            <param name="extent">Extents in which the absolute position is determined</param>
            <returns>The absolute position described by the unified dimension</returns>
        </member>
        <member name="M:CeGui.UDim.AsRelative(System.Single)">
            <summary>Converts the unified dimension into a relative value</summary>
            <param name="extent">Extents in which the relative position is determined</param>
            <returns>The relative position described by the unified dimension</returns>
        </member>
        <member name="M:CeGui.UDim.op_Addition(CeGui.UDim,CeGui.UDim)">
            <summary>Adds one unified dimension to the other</summary>
            <param name="dimension">Base unified dimension to add to</param>
            <param name="summand">Dimension to add to the base</param>
            <returns>The result of the addition operation</returns>
        </member>
        <member name="M:CeGui.UDim.op_Subtraction(CeGui.UDim,CeGui.UDim)">
            <summary>Subtracts one unified dimension from the other</summary>
            <param name="dimension">Base unified dimension to subtract from</param>
            <param name="subtrahend">Dimension to subtract from the base</param>
            <returns>The result of the subtraction operation</returns>
        </member>
        <member name="M:CeGui.UDim.op_Division(CeGui.UDim,CeGui.UDim)">
            <summary>Divides one unified dimension by another one</summary>
            <param name="dimension">Base unified dimension to be divided</param>
            <param name="divisor">Divisor to divide by</param>
            <returns>The result of the division operation</returns>
        </member>
        <member name="M:CeGui.UDim.op_Multiply(CeGui.UDim,CeGui.UDim)">
            <summary>Multiplies one unified dimension with another one</summary>
            <param name="dimension">Base unified dimension to be multiplied</param>
            <param name="factor">Factor to multiply by</param>
            <returns>The result of the multiplication operation</returns>
        </member>
        <member name="M:CeGui.UDim.op_Inequality(CeGui.UDim,CeGui.UDim)">
            <summary>Checks two unified dimensions for inequality</summary>
            <param name="first">First dimension to be compared</param>
            <param name="second">Second dimension to be compared</param>
            <returns>True if the instances differ or exactly one reference is set to null</returns>
        </member>
        <member name="M:CeGui.UDim.op_Equality(CeGui.UDim,CeGui.UDim)">
            <summary>Checks two unified dimensions for equality</summary>
            <param name="first">First dimension to be compared</param>
            <param name="second">Second dimension to be compared</param>
            <returns>True if both instances are equal or both references are null</returns>
        </member>
        <member name="M:CeGui.UDim.Equals(System.Object)">
            <summary>Checks whether another instance is equal to this instance</summary>
            <param name="other">Other instance to compare to this instance</param>
            <returns>True if the other instance is equal to this instance</returns>
        </member>
        <member name="M:CeGui.UDim.Equals(CeGui.UDim)">
            <summary>Checks whether another instance is equal to this instance</summary>
            <param name="other">Other instance to compare to this instance</param>
            <returns>True if the other instance is equal to this instance</returns>
        </member>
        <member name="M:CeGui.UDim.GetHashCode">
            <summary>Obtains a hash code of this instance</summary>
            <returns>The hash code of the instance</returns>
        </member>
        <member name="F:CeGui.UDim.Scale">
            <summary>Relative portion of the dimension</summary>
        </member>
        <member name="F:CeGui.UDim.Offset">
            <summary>Absolute portion of the dimension</summary>
        </member>
        <member name="T:CeGui.Widgets.ListHeaderSegment">
            <summary>
            Base class for list header segment widget.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListHeaderSegment.DefaultSizingAreaSize">
            <summary>
            	Default SizeF of the segment sizing area.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListHeaderSegment.SegmentMoveThreshold">
            <summary>
            	Amount mouse must move before dragging of the segment commences.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListHeaderSegment.normalMouseCursor">
            <summary>
            	Image to use for mouse when not sizing (typically set by derived class).
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListHeaderSegment.sizingMouseCursor">
            <summary>
            	Image to use for mouse when sizing (typically set by derived class).
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListHeaderSegment.movingMouseCursor">
            <summary>
            	Image to use for mouse when moving (typically set by derived class).
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListHeaderSegment.splitterSize">
            <summary>
            	pixel width of the sizing area.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListHeaderSegment.splitterHover">
            <summary>
            	true if the mouse is over the splitter
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListHeaderSegment.dragSizing">
            <summary>
            	true when we are being sized.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListHeaderSegment.dragPoint">
            <summary>
            	point we are being dragged at when sizing or moving.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListHeaderSegment.sortingDirection">
            <summary>
            	Direction for sorting (used for deciding what icon to display).
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListHeaderSegment.segmentHover">
            <summary>
            	true when the mouse is within the segment area (and not in sizing area).
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListHeaderSegment.segmentPushed">
            <summary>
            	true when the left mouse button has been pressed within the confines of the segment.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListHeaderSegment.sizingEnabled">
            <summary>
            	true when sizing is enabled for this segment.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListHeaderSegment.movingEnabled">
            <summary>
            	True when drag-moving is enabled for this segment;
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListHeaderSegment.dragMoving">
            <summary>
            	true when segment is being drag moved.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListHeaderSegment.allowClicks">
            <summary>
            	true if the segment can be clicked.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ListHeaderSegment.dragPosition">
            <summary>
            	position of dragged segment.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.ListHeaderSegment.#ctor(System.String,System.String)">
            <summary>
            	Constructor.
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="M:CeGui.Widgets.ListHeaderSegment.DoDragSizing(System.Drawing.PointF)">
            <summary>
            	Update state for drag sizing.
            </summary>
            <param name="localMousePosition">Mouse position as a pixel offset from the top-left corner of this window.</param>
        </member>
        <member name="M:CeGui.Widgets.ListHeaderSegment.DoDragMoving(System.Drawing.PointF)">
            <summary>
            	Update state for drag moving.
            </summary>
            <param name="localMousePosition">Mouse position as a pixel offset from the top-left corner of this window.</param>
        </member>
        <member name="M:CeGui.Widgets.ListHeaderSegment.InitialiseDragMoving">
            <summary>
            	Initialise the required states to put the widget into drag-moving mode.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.ListHeaderSegment.InitialiseSizingHoverState">
            <summary>
            	Initialise the required states when we are hovering over the sizing area.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.ListHeaderSegment.InitialiseSegmentHoverState">
            <summary>
            	Initialise the required states when we are hovering over the main segment area.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.ListHeaderSegment.IsDragMoveThresholdExceeded(System.Drawing.PointF)">
            <summary>
            	Return whether the required minimum movement threshold before initiating
            	drag-moving has been exceeded.
            </summary>
            <param name="localMousePosition">Mouse position as a pixel offset from the top-left corner of this window.</param>
            <returns>
            	- true if the threshold has been exceeded and drag-moving should be initiated
            	- false if the threshold has not been exceeded.
            </returns>
        </member>
        <member name="M:CeGui.Widgets.ListHeaderSegment.OnSegmentClicked(CeGui.WindowEventArgs)">
            <summary>
            	Handler invoked internally when segment is clicked.
            </summary>
            <param name="e">Events args.</param>
        </member>
        <member name="M:CeGui.Widgets.ListHeaderSegment.OnSplitterDoubleClicked(CeGui.WindowEventArgs)">
            <summary>
            	Handler invoked internally when segment sizer is double clicked.
            </summary>
            <param name="e">Events args.</param>
        </member>
        <member name="M:CeGui.Widgets.ListHeaderSegment.OnSizingSettingChanged(CeGui.WindowEventArgs)">
            <summary>
            	Handler invoked internally when the sizable setting is changed.
            </summary>
            <param name="e">Events args.</param>
        </member>
        <member name="M:CeGui.Widgets.ListHeaderSegment.OnSortDirectionChanged(CeGui.WindowEventArgs)">
            <summary>
            	Handler invoked internally when the sort direction changes.
            </summary>
            <param name="e">Events args.</param>
        </member>
        <member name="M:CeGui.Widgets.ListHeaderSegment.OnMovableSettingChanged(CeGui.WindowEventArgs)">
            <summary>
            	Handler invoked internally when the movable setting is changed.
            </summary>
            <param name="e">Events args.</param>
        </member>
        <member name="M:CeGui.Widgets.ListHeaderSegment.OnSegmentDragStart(CeGui.WindowEventArgs)">
            <summary>
            	Handler invoked internally when the user begins dragging the segment.
            </summary>
            <param name="e">Events args.</param>
        </member>
        <member name="M:CeGui.Widgets.ListHeaderSegment.OnSegmentDragStop(CeGui.WindowEventArgs)">
            <summary>
            	Handler invoked internally when the user stops dragging the segment.
            </summary>
            <param name="e">Events args.</param>
        </member>
        <member name="M:CeGui.Widgets.ListHeaderSegment.OnSegmentDragPositionChanged(CeGui.WindowEventArgs)">
            <summary>
            	Handler invoked internally when dragged position of the segment changes.
            </summary>
            <param name="e">Events args.</param>
        </member>
        <member name="M:CeGui.Widgets.ListHeaderSegment.OnSegmentSized(CeGui.WindowEventArgs)">
            <summary>
            	Handler invoked internally when the segment is sized.
            </summary>
            <param name="e">Events args.</param>
        </member>
        <member name="M:CeGui.Widgets.ListHeaderSegment.OnClickableSettingChanged(CeGui.WindowEventArgs)">
            <summary>
            	Handler invoked internally when the clickable setting changes.
            </summary>
            <param name="e">Events args.</param>
        </member>
        <member name="P:CeGui.Widgets.ListHeaderSegment.Sizable">
            <summary>
            	Get/Set whether the segment can be sized by the user.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ListHeaderSegment.SortDirection">
            <summary>
            	Get/Set the currently set sort direction for the segment.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ListHeaderSegment.Draggable">
            <summary>
            	Get/Set whether the segment can be moved via drag and drop.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ListHeaderSegment.DraggingOffset">
            <summary>
            	Get the current dragging offset, which is specified in pixels relative to the
            	top-left corner of the segments current location.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.ListHeaderSegment.Clickable">
            <summary>
            	Get/Set whether the segment may be clicked by the user.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ListHeaderSegment.SegmentClicked">
            <summary>
            	The segment was clicked.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ListHeaderSegment.SplitterDoubleClicked">
            <summary>
            	The sizer for the segment was double clicked.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ListHeaderSegment.SizingSettingChanged">
            <summary>
            	The 'sizable' setting for the segment has changed.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ListHeaderSegment.SortDirectionChanged">
            <summary>
            	The sort direction of the segment has changed.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ListHeaderSegment.MovableSettingChanged">
            <summary>
            	The 'movable' setting for the segment has changed.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ListHeaderSegment.SegmentDragStart">
            <summary>
            	The user has started dragging the segment.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ListHeaderSegment.SegmentDragStop">
            <summary>
            	The user has stopped dragging the segment.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ListHeaderSegment.SegmentDragPositionChanged">
            <summary>
            	The dragging position of the segment has changed.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ListHeaderSegment.SegmentSized">
            <summary>
            	The segment has been re-sized.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ListHeaderSegment.ClickableSettingChanged">
            <summary>
            	The 'clickable' setting for the segment has changed.
            </summary>
        </member>
        <member name="T:CeGui.ImagesetManager">
            <summary>
            	Class providing a shared library of Imageset objects to the system.
            </summary>
            <remarks>
            	The ImagesetManager is used to create, access, and destroy <see cref="T:CeGui.Imageset"/> objects.  The idea is that
            	the ImagesetManager will function as a central repository for imagery used within the GUI system,
            	and that such imagery can be accessed, via a unique name, by any interested party within the system.
            </remarks>
        </member>
        <member name="F:CeGui.ImagesetManager.ImageSetFileExtension">
            <summary>
            Gets the file extension for an Imageset including the period prefix
            </summary>
        </member>
        <member name="F:CeGui.ImagesetManager.instance">
            <summary>
            	Singlton instance of this class.
            </summary>
        </member>
        <member name="M:CeGui.ImagesetManager.#ctor">
            <summary>
            	Default constructor.
            </summary>
        </member>
        <member name="F:CeGui.ImagesetManager.imagesets">
            <summary>
            	List of all image sets that exist within the system.
            </summary>
        </member>
        <member name="M:CeGui.ImagesetManager.CreateImageset(System.String,CeGui.Texture)">
            <summary>
            	Create a Imageset object with the given name and Texture.
            </summary>
            <remarks>
            	The created Imageset will be of limited use, and will require one or more images to be defined for the set.
            </remarks>
            <param name="name">The unique name for the Imageset being created.</param>
            <param name="texture">Texture object to be associated with the Imageset.</param>
            <returns>A reference to the newly created Imageset object.</returns>
            <exception cref="T:CeGui.AlreadyExistsException">If an Imageset with the specified <paramref name="name"/> already exists in the system.</exception>
        </member>
        <member name="M:CeGui.ImagesetManager.CreateImageset(System.String)">
            <summary>
            	Create an Imageset object from the specified file.
            </summary>
            <param name="fileName">The name of the Imageset definition file which should be used to create the Imageset.</param>
            <returns>A reference to the newly created Imageset object.</returns>
            <exception cref="T:CeGui.AlreadyExistsException">If an Imageset with the name specified in the file already exists in the system.</exception>
            <exception cref="T:CeGui.FileIOException">If an error occurs while processing the file <paramref name="fileName"/>.</exception>
        </member>
        <member name="M:CeGui.ImagesetManager.DestroyAllImagesets">
            <summary>
            	Destroys all Imageset objects registered in the system.
            </summary>
        </member>
        <member name="M:CeGui.ImagesetManager.DestroyImageset(CeGui.Imageset)">
            <summary>
            	Destroys the specified Imageset.
            </summary>
            <param name="imageset">Reference to the Imageset to be destroyed.  If the Imageset is null, nothing happens.</param>
        </member>
        <member name="M:CeGui.ImagesetManager.DestroyImageset(System.String)">
            <summary>
            	Destroys the Imageset with the specified name.
            </summary>
            <param name="name">The name of the Imageset to be destroyed.  If no such Imageset exists, nothing happens.</param>
        </member>
        <member name="M:CeGui.ImagesetManager.GetImageset(System.String)">
            <summary>
            	Returns a reference to the Imageset object with the specified name.
            </summary>
            <param name="name">The name of the Imageset to return a reference to.</param>
            <return>Reference to the requested Imageset object.</return>
        </member>
        <member name="M:CeGui.ImagesetManager.IsImagesetPresent(System.String)">
            <summary>
            	Check for the existence of a named Imageset.
            </summary>
            <param name="name">The name of the Imageset to look for.</param>
            <returns>Ttue if an Imageset named <paramref name="name"/> is presently loaded in the system, else false.</returns>
        </member>
        <member name="M:CeGui.ImagesetManager.NotifyScreenResolution(System.Drawing.SizeF)">
            <summary>
            	Notify the ImagesetManager of the current (usually new) display resolution.
            </summary>
            <param name="SizeF">SizeF describing the display resolution.</param>
        </member>
        <member name="P:CeGui.ImagesetManager.Instance">
            <summary>
            	Gets the singleton class instance.
            </summary>
            <value></value>
        </member>
        <member name="T:CeGui.Widgets.StaticText">
            <summary>
            	Base class for a static text widget.
            </summary>
            <remarks>
            	This base class performs it's own rendering.  There is no need to override this widget to perform rendering
            	of static texts.
            </remarks>
        </member>
        <member name="F:CeGui.Widgets.StaticText.horzFormatting">
            <summary>
            	Horizontal text formatting.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.StaticText.vertFormatting">
            <summary>
            	Vertical text formatting.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.StaticText.textColors">
            <summary>
            	Colors to use for rendering the text of this widget.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.StaticText.#ctor(System.String,System.String)">
            <summary>
            	Constructor.
            </summary>
            <param name="name">Name of this widget.</param>
        </member>
        <member name="M:CeGui.Widgets.StaticText.SetTextColor(CeGui.Colour)">
            <summary>
            	Sets the color to be applied when rendering the text.
            </summary>
            <param name="color">Color to use for text rendering.</param>
        </member>
        <member name="M:CeGui.Widgets.StaticText.SetTextColor(CeGui.ColourRect)">
            <summary>
            	Sets the colors to be applied when rendering the text.
            </summary>
            <param name="colors">ColorRect describing the colours to be used for each text glyph rendered.</param>
        </member>
        <member name="M:CeGui.Widgets.StaticText.SetTextColor(CeGui.Colour,CeGui.Colour,CeGui.Colour,CeGui.Colour)">
            <summary>
            	Sets the colors to be applied when rendering the text.
            </summary>
            <param name="topLeft">Color for the top-left cornder of each text glyph rendered.</param>
            <param name="topRight">Color for the top-right cornder of each text glyph rendered.</param>
            <param name="bottomLeft">Color for the bottom-left cornder of each text glyph rendered.</param>
            <param name="bottomRight">Color for the bottom-right cornder of each text glyph rendered.</param>
        </member>
        <member name="M:CeGui.Widgets.StaticText.DrawSelf(System.Single)">
            <summary>
            	Perform the actual rendering for this Window.
            </summary>
            <param name="z">float value specifying the base Z co-ordinate that should be used when rendering.</param>
        </member>
        <member name="P:CeGui.Widgets.StaticText.HorizontalFormat">
            <summary>
            	Get/Set the horizontal format to use for the text.
            </summary>
            <value>Enum value specifying the horizontal formatting.</value>
        </member>
        <member name="P:CeGui.Widgets.StaticText.VerticalFormat">
            <summary>
            	Get/Set the vertical format to use for the text.
            </summary>
            <value>Enum value specifying the vertical formatting.</value>
        </member>
        <member name="P:CeGui.Widgets.StaticText.TextColors">
            <summary>
            Get/Set the text colors.
            </summary>
            <value>ColorRect specifying the colors to use when drawing the text.</value>
        </member>
        <member name="T:CeGui.Widgets.ProgressBar">
            <summary>
            	Base class for progress bars.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ProgressBar.progress">
            <summary>
            	Current progress (from 0 to 1)
            </summary>
        </member>
        <member name="F:CeGui.Widgets.ProgressBar.step">
            <summary>
            	Amount to 'step' progress by on a call to <see cref="M:CeGui.Widgets.ProgressBar.Step"/>.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.ProgressBar.#ctor(System.String,System.String)">
            <summary>
            	Constructor.
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="M:CeGui.Widgets.ProgressBar.AdjustProgress(System.Single)">
            <summary>
            	Modify the progress level by a specified delta.
            </summary>
            <param name="delta">
            	Amount to adjust the progress by.  Whatever this value is, the progress of the bar will be kept
            	within the range: [0.0f, 1.0f]
            </param>
        </member>
        <member name="M:CeGui.Widgets.ProgressBar.Step">
            <summary>
            	Cause the progress to step.
            </summary>
            <remarks>
            	The amount the progress bar will step can be changed via the <see cref="P:CeGui.Widgets.ProgressBar.StepSize"/> property.  The
            	default step SizeF is 0.01f which is equal to 1%.
            </remarks>
        </member>
        <member name="M:CeGui.Widgets.ProgressBar.OnProgressChanged(CeGui.WindowEventArgs)">
            <summary>
            	Event triggered when progress changes.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.ProgressBar.OnProgressDone(CeGui.WindowEventArgs)">
            <summary>
            	Event triggered when progress is complete.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:CeGui.Widgets.ProgressBar.Progress">
            <summary>
            	Get/Set the current level of progress.
            </summary>
            <remarks>
            	If this value is > 1.0f (100%) progress will be limited to 1.0f.
            </remarks>
            <value>Value between 0.0f and 1.0f indicating current progress.</value>
        </member>
        <member name="P:CeGui.Widgets.ProgressBar.StepSize">
            <summary>
            	Get/Set the SizeF of the 'step' (in percentage points).
            </summary>
            <value>Default is 0.01f or 1%.</value>
        </member>
        <member name="E:CeGui.Widgets.ProgressBar.ProgressChanged">
            <summary>
            	Triggered when the progress changes.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.ProgressBar.ProgressDone">
            <summary>
            	Triggered when the progress reaches 100%.
            </summary>
        </member>
        <member name="T:CeGui.RenderableImage">
            <summary>
            	A higher order GUI entity that represents a renderable image with formatting options.
            </summary>
            <remarks>
            	This class is intended to be used where a (usually top-level) GUI element needs to draw an image that requires some additional
            	formatting.  It is possible to specify the Image that is to be rendered, as well as the horizontal and vertical formatting
            	required.
            </remarks>
        </member>
        <member name="F:CeGui.RenderableImage.horizontalFormat">
            <summary>
            	Currently set horizontal formatting option.
            </summary>
        </member>
        <member name="F:CeGui.RenderableImage.verticalFormat">
            <summary>
            	Currently set vertical formatting option.
            </summary>
        </member>
        <member name="F:CeGui.RenderableImage.image">
            <summary>
            	Reference to the actual Image to be displayed.
            </summary>
        </member>
        <member name="M:CeGui.RenderableImage.#ctor">
            <summary>
            	Default constructor.
            </summary>
        </member>
        <member name="M:CeGui.RenderableImage.DrawImpl(CeGui.Vector3,CeGui.Rect)">
            <summary>
            	Renders the imagery for a RenderableImage element.
            </summary>
            <param name="position">The final rendering position for the object.</param>
            <param name="clipRect">The clipping area for the rendering.  No rendering will be performed outside this area.</param>
        </member>
        <member name="P:CeGui.RenderableImage.HorizontalFormat">
            <summary>
            	Set the required horizontal formatting.
            </summary>
            <value>One of the <see cref="T:CeGui.HorizontalImageFormat"/> values specifying the formatting required.</value>
        </member>
        <member name="P:CeGui.RenderableImage.Image">
            <summary>
            	Get/Set the Image object to be drawn by this RenderableImage.
            </summary>
            <value>
            	Reference to the Image object to be rendered.  
            	Can be 'null' to specify no image is to be rendered.
            </value>
        </member>
        <member name="P:CeGui.RenderableImage.VerticalFormat">
            <summary>
            	Set the required vertical formatting.
            </summary>
            <value>One of the <see cref="T:CeGui.VerticalImageFormat"/> values specifying the formatting required.</value>
        </member>
        <member name="T:CeGui.PropertyDefinition">
            <summary>
            class representing a new property to be available on all widgets that use the WidgetLook
            that this PropertyDefinition is defiend for.
            </summary>
        </member>
        <member name="M:CeGui.PropertyDefinition.Get(CeGui.PropertySet)">
            <summary>
            Return the current value of the Property as a String
            </summary>
            <param name="reciever">target object</param>
            <returns>String object containing a textual representation of the current value of the Property</returns>
        </member>
        <member name="M:CeGui.PropertyDefinition.Set(CeGui.PropertySet,System.String)">
            <summary>
            Sets the value of the property
            </summary>
            <param name="reciever">target object</param>
            <param name="val">A String object that contains a textual representation of the new value to assign to the Property.</param>
        </member>
        <member name="F:CeGui.GuiEventArgs.Handled">
            <summary>
            	Has this event been handled by the callee?
            </summary>
        </member>
        <member name="T:CeGui.MouseEventArgs">
            <summary>
            	GuiEventArgs based class that is used for objects passed to input event handlers
            	concerning mouse input.
            </summary>
        </member>
        <member name="F:CeGui.MouseEventArgs.Position">
            <summary>
            	Holds current mouse position.
            </summary>
        </member>
        <member name="F:CeGui.MouseEventArgs.MoveDelta">
            <summary>
            	Holds variation of mouse position from last mouse input.
            </summary>
        </member>
        <member name="F:CeGui.MouseEventArgs.Button">
            <summary>
            	MouseButtons enum value describing the mouse button causing the event (for button inputs only).
            </summary>
        </member>
        <member name="F:CeGui.MouseEventArgs.SysKeys">
            <summary>
            	Current state of the system keys and mouse buttons.
            </summary>
        </member>
        <member name="F:CeGui.MouseEventArgs.WheelDelta">
            <summary>
            	Value that the mouse wheel was scrolled.
            </summary>
        </member>
        <member name="T:CeGui.WindowEventArgs">
            <summary>
            	GuiEventArgs based class that is used for objects passed to handlers triggered for events
            	concerning some Window object.
            </summary>
        </member>
        <member name="F:CeGui.WindowEventArgs.Window">
            <summary>
            	Reference to a Window object of relevance to the event.
            </summary>
        </member>
        <member name="M:CeGui.WindowEventArgs.#ctor(CeGui.Window)">
            <summary>
            	Constructor.
            </summary>
            <param name="window">Window reference relevant to the event.</param>
        </member>
        <member name="T:CeGui.KeyEventArgs">
            <summary>
            	GuiEventArgs based class that is used for objects passed to input event handlers
            	concerning keyboard input.
            </summary>
        </member>
        <member name="F:CeGui.KeyEventArgs.Character">
            <summary>
            	Character representation of the key pressed.
            </summary>
        </member>
        <member name="F:CeGui.KeyEventArgs.KeyCode">
            <summary>
            	Enum val representing the key pressed.
            </summary>
        </member>
        <member name="F:CeGui.KeyEventArgs.Modifiers">
            <summary>
            	Special input modifiers.
            </summary>
        </member>
        <member name="T:CeGui.HeaderSequenceEventArgs">
            <summary>
            	GuiEventArgs based class that is used for objects passed to input event handlers
            	concerning movement of segments within a ListHeader widget.
            </summary>
        </member>
        <member name="F:CeGui.HeaderSequenceEventArgs.OldIndex">
            <summary>
            The original column index of the segment that has moved.
            </summary>
        </member>
        <member name="F:CeGui.HeaderSequenceEventArgs.NewIndex">
            <summary>
            The new column index of the segment that has moved.
            </summary>
        </member>
        <member name="M:CeGui.HeaderSequenceEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="oldIndex">Index of segment before it was moved.</param>
            <param name="newIndex">Index of segment after it has been moved.</param>
        </member>
        <member name="T:CeGui.GuiEventHandler">
            <summary>
            	Standard event handler.
            </summary>
        </member>
        <member name="T:CeGui.WindowEventHandler">
            <summary>
            	Delegate for window event handlers.
            </summary>
        </member>
        <member name="T:CeGui.MouseEventHandler">
            <summary>
            	Delegate for mouse event handlers.
            </summary>
        </member>
        <member name="T:CeGui.KeyEventHandler">
            <summary>
            	Delegate for key event handlers.
            </summary>
        </member>
        <member name="T:CeGui.HeaderSequenceEventHandler">
            <summary>
            	Delegate for ListHeader segment order change event handlers.
            </summary>
        </member>
        <member name="M:CeGui.WindowTable.Remove(System.String)">
            <summary>
            	Removes an item from the collection.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CeGui.WindowTable.Remove(CeGui.Window)">
            <summary>
            	Removes an item from the collection.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CeGui.WindowList.Remove(System.String)">
            <summary>
            	Removes an item from the collection.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CeGui.WindowList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy array
            </summary>
            <param name="array">Array to copy collection to</param>
            <param name="index">Start index</param>
        </member>
        <member name="M:CeGui.ImagesetList.Remove(System.String)">
            <summary>
            	Removes an item from the collection.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CeGui.FontList.Remove(System.String)">
            <summary>
            	Removes an item from the collection.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CeGui.ListboxItemList.Remove(CeGui.Widgets.ListboxItem)">
            <summary>
            	Removes an item from the collection.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:CeGui.GridRowGTComparer">
            <summary>
            	Greater-than Comparer used for GridRows
            </summary>
        </member>
        <member name="T:CeGui.GridRowLTComparer">
            <summary>
            	Less-than Comparer used for GridRows
            </summary>
        </member>
        <member name="T:CeGui.PropertyInitialiser">
            <summary>
            Class that holds information about a property and it's required initial value.
            </summary>
        </member>
        <member name="F:CeGui.PropertyInitialiser.propertyName">
            <summary>
            Name of a property to be set.
            </summary>
        </member>
        <member name="F:CeGui.PropertyInitialiser.propertyValue">
            <summary>
            Value string to be set on the property.
            </summary>
        </member>
        <member name="M:CeGui.PropertyInitialiser.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="prop">String holding the name of the property targetted by this PropertyInitialiser.</param>
            <param name="val">String holding the value to be set by this PropertyInitialiser.</param>
        </member>
        <member name="M:CeGui.PropertyInitialiser.Apply(CeGui.PropertySet)">
            <summary>
            Apply this property initialiser to the specified target CEGUI::PropertySet object.
            </summary>
            <param name="target">PropertySet object to be initialised by this PropertyInitialiser.</param>
        </member>
        <member name="P:CeGui.PropertyInitialiser.TargetPropertyName">
            <summary>
            Return the name of the property targetted by this PropertyInitialiser.
            </summary>
        </member>
        <member name="P:CeGui.PropertyInitialiser.InitializerValue">
            <summary>
            Return the value string to be set on the property targetted by this PropertyInitialiser.
            </summary>
        </member>
        <member name="T:CeGui.Widgets.RadioButton">
            <summary>
            Summary description for RadioButton.
            </summary>
            C++ Version Sync
            .cpp:	1.4
            .h:		1.2
        </member>
        <member name="F:CeGui.Widgets.RadioButton.isChecked">
            <summary>
            	true if radio button is selected (has checkmark).
            </summary>
        </member>
        <member name="F:CeGui.Widgets.RadioButton.groupID">
            <summary>
            	Radio button group ID.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.RadioButton.#ctor(System.String,System.String)">
            <summary>
            	Constructor.
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="M:CeGui.Widgets.RadioButton.DeselectOtherButtonsInGroup">
            <summary>
            	Deselect any selected radio buttons attached to the same parent within the same group
            	(but not do not deselect 'this').
            </summary>
        </member>
        <member name="M:CeGui.Widgets.RadioButton.OnCheckStateChanged(CeGui.WindowEventArgs)">
            <summary>
            	Event triggered internally when state of checkbox changes.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:CeGui.Widgets.RadioButton.OnMouseButtonsUp(CeGui.MouseEventArgs)">
            <summary>
            	When the mouse up occurs, we change the selected state.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:CeGui.Widgets.RadioButton.Checked">
            <summary>
            	Get/Set the checked state of the checkbox.
            </summary>
            <value>
            	true to select the widget and give it the checkmark.  
            	false to deselect the widget and remove the checkmark.
            </value>
        </member>
        <member name="P:CeGui.Widgets.RadioButton.GroupID">
            <summary>
            	Get/Set the group ID for this radio button.
            </summary>
            <value>Integer value that holds the group ID which this radio button belongs to.</value>
        </member>
        <member name="E:CeGui.Widgets.RadioButton.CheckStateChanged">
            <summary>
            	Event triggered internally when state of check-box changes.
            </summary>
        </member>
        <member name="T:CeGui.Widgets.GridReference">
            <summary>
            	Simple structure used to hold grid references.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.GridReference.Row">
            <summary>
            The zero based row index of this grid reference.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.GridReference.Column">
            <summary>
            The zero based column index of this grid reference.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.GridReference.#ctor(System.Int32,System.Int32)">
            <summary>
            Ctor
            </summary>
            <param name="r"></param>
            <param name="c"></param>
        </member>
        <member name="M:CeGui.Widgets.GridReference.#ctor(CeGui.Widgets.GridReference)">
            <summary>
            copy ctor
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:CeGui.Widgets.GridReference.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CeGui.Widgets.GridReference.op_Equality(CeGui.Widgets.GridReference,CeGui.Widgets.GridReference)">
            <summary>
            Test for value equivelence
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:CeGui.Widgets.GridReference.Equals(System.Object)">
            <summary>
            Test for value equivelence
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CeGui.Widgets.GridReference.op_Inequality(CeGui.Widgets.GridReference,CeGui.Widgets.GridReference)">
            <summary>
            Test for value inequality
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:CeGui.Widgets.GridRow">
            <summary>
            	Class used to wrap a grid 'row' and also ease sorting
            </summary>
        </member>
        <member name="F:CeGui.Widgets.GridRow.rowItems">
            <summary>
            container to hold the items in the row
            </summary>
        </member>
        <member name="F:CeGui.Widgets.GridRow.sortColumnIndex">
            <summary>
            The column who's contents are used to order the grid
            </summary>
        </member>
        <member name="M:CeGui.Widgets.GridRow.op_LessThan(CeGui.Widgets.GridRow,CeGui.Widgets.GridRow)">
            <summary>
            Less than operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:CeGui.Widgets.GridRow.op_GreaterThan(CeGui.Widgets.GridRow,CeGui.Widgets.GridRow)">
            <summary>
            Greater than operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:CeGui.Widgets.GridRow.Item(System.Int32)">
            <summary>
            The item in the index'th column in the row
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:CeGui.Widgets.MultiColumnList">
            <summary>
            	Base class for the multi-column list / grid widget.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.MultiColumnList.verticalScrollbar">
            <summary>
            	vertical scroll-bar widget
            </summary>
        </member>
        <member name="F:CeGui.Widgets.MultiColumnList.horizontalScrollbar">
            <summary>
            	horizontal scroll-bar widget
            </summary>
        </member>
        <member name="F:CeGui.Widgets.MultiColumnList.listHeader">
            <summary>
            	The ListHeader widget.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.MultiColumnList.forceVerticalScrollbar">
            <summary>
            	true if vertical scrollbar should always be displayed
            </summary>
        </member>
        <member name="F:CeGui.Widgets.MultiColumnList.forceHorizontalScrollbar">
            <summary>
            	true if horizontal scrollbar should always be displayed
            </summary>
        </member>
        <member name="F:CeGui.Widgets.MultiColumnList.selectMode">
            <summary>
            	Holds selection mode (represented by settings below).
            </summary>
        </member>
        <member name="F:CeGui.Widgets.MultiColumnList.nominatedSelectColumn">
            <summary>
            	Nominated column for single column selection.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.MultiColumnList.nominatedSelectRow">
            <summary>
            	Nominated row for single row selection.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.MultiColumnList.multiSelect">
            <summary>
            	Allow multiple selections.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.MultiColumnList.fullRowSelect">
            <summary>
            	All items in a row should be selected.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.MultiColumnList.fullColumnSelect">
            <summary>
            	All items in a column should be selected.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.MultiColumnList.useNominatedRow">
            <summary>
            	true if we use a nominated row to select.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.MultiColumnList.useNominatedColumn">
            <summary>
            	true if we use a nominated col to select.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.MultiColumnList.lastSelectedItem">
            <summary>
            	holds the last selected item (used in range selections)
            </summary>
        </member>
        <member name="F:CeGui.Widgets.MultiColumnList.gridData">
            <summary>
            	Holds the grid data.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.#ctor(System.String,System.String)">
            <summary>
            	Constructor.
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.GetColumnIndexWithID(System.Int32)">
            <summary>
            	Return the zero based column index of the column with the specified ID.
            </summary>
            <param name="id">ID code of the column whos index is to be returned.</param>
            <returns>Zero based column index of the first column whos ID matches 'id'.</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if no attached column has the requested ID.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.GetColumnIndexWithHeaderText(System.String)">
            <summary>
            	Return the zero based index of the column whos header text matches the specified text.
            </summary>
            <param name="text">string containing the text to be searched for.</param>
            <returns>Zero based column index of the column whos header has the specified text.</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if no columns header has the requested text.</exception>"
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.GetColumnPixelWidth(System.Int32)">
            <summary>
            	Return the width of the column at the specified zero based index.
            </summary>
            <param name="columnIndex">Zero based index of the column whos width is to be returned.</param>
            <returns>Width of the column at the zero based column index specified by 'columnIndex', in absolute pixels.</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if columnIndex is out of range.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.GetColumnHeaderSegment(System.Int32)">
            <summary>
            	Return the ListHeaderSegment object for the column at the specified index.
            </summary>
            <param name="columnIndex">Zero based index of the column whos ListHeaderSegment is to be returned.</param>
            <returns>ListHeaderSegment object for the column at the requested index.</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if columnIndex is out of range.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.GetRowIndexOfItem(CeGui.Widgets.ListboxItem)">
            <summary>
            	Return the zero based index of the Row that contains the given ListboxItem.
            </summary>
            <param name="item">ListboxItem for which the row index is to be returned.</param>
            <returns>Zero based index of the row that contains ListboxItem 'item'.</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'item' is not attached to the grid.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.GetColumnIndexOfItem(CeGui.Widgets.ListboxItem)">
            <summary>
            	Return the zero based index of the column that contains 'item'.
            </summary>
            <param name="item">ListboxItem for which the column index is to returned.</param>
            <returns>Zero based index of the column that contains ListboxItem 'item'.</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'item' is not attached to the grid.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.GetGridReferenceOfItem(CeGui.Widgets.ListboxItem)">
            <summary>
            	Return the grid reference for 'item'.
            </summary>
            <param name="item">ListboxItem for which the grid reference is to be returned.</param>
            <returns>GridReference describing the current grid reference of ListboxItem 'item'.</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'item' is not attached to the grid.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.GetItemAtGridReference(CeGui.Widgets.GridReference)">
            <summary>
            	Return the ListboxItem at the specified grid reference.
            </summary>
            <param name="gridRef">GridReference that describes the position of the ListboxItem to be returned.</param>
            <returns>ListboxItem at grid reference 'gridRef'</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'gridRef' is invalid.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.IsItemInColumn(CeGui.Widgets.ListboxItem,System.Int32)">
            <summary>
            	Return whether ListboxItem 'item' is attached to the column at index 'columnIndex'.
            </summary>
            <param name="item">ListboxItem to look for.</param>
            <param name="columnIndex">Zero based index of the column that is to be searched.</param>
            <returns>
            	- true if 'item' is attached to column 'columnIndex'.
            	- false if 'item' is not attached to column 'columnIndex'.
            </returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'columnIndex' is out of range.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.IsItemInRow(CeGui.Widgets.ListboxItem,System.Int32)">
            <summary>
            	Return whether ListboxItem 'item' is attached to the row at index 'rowIndex'.
            </summary>
            <param name="item">ListboxItem to look for.</param>
            <param name="rowIndex">Zero based index of the row that is to be searched.</param>
            <returns>
            	- true if 'item' is attached to row 'rowIndex'.
            	- false if 'item' is not attached row 'rowIndex'.
            </returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'rowIndex' is out of range.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.IsItemInGrid(CeGui.Widgets.ListboxItem)">
            <summary>
            	Return whether ListboxItem 'item' is attached to the grid.
            </summary>
            <param name="item">ListboxItem to look for.</param>
            <returns>
            	- true if 'item' is attached to the grid.
            	- false if 'item' is not attached to the grid.
            </returns>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.GetColumnItemWithText(System.String,System.Int32,CeGui.Widgets.ListboxItem)">
            <summary>
            	Return the ListboxItem in column 'columnIndex' that has the text string 'text'.
            </summary>
            <param name="text">string containing the text to be searched for.</param>
            <param name="columnIndex">Zero based index of the column to be searched.</param>
            <param name="startItem">ListboxItem where the exclusive search is to start, or null to search from the top of the column.</param>
            <returns>The first ListboxItem in column 'columnIndex', after 'startItem', that has the string 'text'.</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'startItem' is not attached to the grid, or if 'columnIndex' is out of range.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.GetRowItemWithText(System.String,System.Int32,CeGui.Widgets.ListboxItem)">
            <summary>
            	Return the ListboxItem in row 'rowIndex' that has the text string 'text'.
            </summary>
            <param name="text">string containing the text to be searched for.</param>
            <param name="rowIndex">Zero based index of the row to be searched.</param>
            <param name="startItem">ListboxItem where the exclusive search is to start, or null to search from the start of the row.</param>
            <returns>The first ListboxItem in row 'rowIndex', after 'startItem', that has the string 'text'.</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'startItem' is not attached to the grid, or if 'rowIndex' is out of range.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.GetItemWithText(System.String,CeGui.Widgets.ListboxItem)">
            <summary>
            	Return the ListboxItem that has the text string 'text'.
            </summary>
            <remarks>Searching progresses across the columns in each row.</remarks>
            <param name="text">string containing the text to be searched for.</param>
            <param name="startItem">ListboxItem where the exclusive search is to start, or null to search the whole grid.</param>
            <returns>The first ListboxItem, after 'startItem', that has the string 'text'.</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'startItem' is not attached to the grid.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.GetFirstSelectedItem">
            <summary>
            	Return a the first selected ListboxItem attached to the grid.
            </summary>
            <remarks>Searching progresses across the columns in each row.</remarks>
            <returns>The first ListboxItem attached to the grid that is selected, or null if no item is selected.</returns>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.GetNextSelectedItem(CeGui.Widgets.ListboxItem)">
            <summary>
            	Return the next selected ListboxItem after 'startItem'.
            </summary>
            <remarks>Searching progresses across the columns in each row.</remarks>
            <param name="startItem">ListboxItem where the exclusive search is to start, or null to search the whole grid.</param>
            <returns>The first selected ListboxItem attached to the grid, after 'startItem', or null if no such item is selected.</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'startItem' is not attached to the grid.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.IsItemSelected(CeGui.Widgets.GridReference)">
            <summary>
            	Return whether the ListboxItem at 'gridRef' is selected.
            </summary>
            <param name="gridRef">GridReference describing the grid reference that is to be examined.</param>
            <returns>
            	- true if there is a ListboxItem at 'gridRef' and it is selected.
            	- false if there is no ListboxItem at 'gridRef', or if the item is not selected.
            </returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'gridRef' contains an invalid grid position.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.GetColumnID(System.Int32)">
            <summary>
            	Return the ID code assigned to the specified column.
            </summary>
            <param name="columnIndex">Zero based index of the column whos ID code is to be returned.</param>
            <returns>Current ID code assigned to the column at the requested index.</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'columnIndex' is out of range</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.Initialize">
            <summary>
            	Initialise the Window based object ready for use.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.ResetList">
            <summary>
            	Remove all items from the grid.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.AddColumn(System.String,System.Int32,System.Single)">
            <summary>
            	Add a column to the grid.
            </summary>
            <param name="heading">string containing the text label for the column header.</param>
            <param name="columnID">ID code to be assigned to the column header.</param>
            <param name="width">Initial width to be set for the column using the active metrics mode for this window.</param>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.AddColumns(System.Single[],System.String[])">
            <summary>
            	Add multiple columns to the grid.
            </summary>
            <param name="widths">Initial widths to be set for the columns using the active metrics mode for this window.</param>
            <param name="headers">the labels for the column header.</param>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.InsertColumn(System.String,System.Int32,System.Single,System.Int32)">
            <summary>
            Insert a new column in the grid.
            </summary>
            <param name="heading">string containing the text label for the column header.</param>
            <param name="columnID">ID code to be assigned to the column header.</param>
            <param name="width">Initial width to be set for the column using the active metrics mode for this window.</param>
            <param name="positionIndex">Zero based index where the column is to be inserted.  If this is greater than the current number of columns, the new column is inserted at the end.</param>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.RemoveColumn(System.Int32)">
            <summary>
            	Removes a column from the grid.
            </summary>
            <param name="columnIndex">Zero based index of the column to be removed.</param>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'columnIndex' is invalid.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.RemoveColumnWithID(System.Int32)">
            <summary>
            	Removes a column from the grid.
            </summary>
            <param name="columnID">ID code of the column to be deleted.</param>
            <exception cref="T:CeGui.InvalidRequestException">thrown if no column with 'columnID' is in the grid.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.MoveColumn(System.Int32,System.Int32)">
            <summary>
            	Move the column at index 'columnIndex' so it is at index 'positionIndex'.
            </summary>
            <param name="columnIndex">Zero based index of the column to be moved.</param>
            <param name="positionIndex">Zero based index of the new position for the column.</param>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'columnIndex' is invalid.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.MoveColumnWithID(System.Int32,System.Int32)">
            <summary>
            	Move the column with ID 'columnID' so it is at index 'positionIndex'.
            </summary>
            <param name="columnID">ID code of the column to be moved.</param>
            <param name="positionIndex">Zero based index of the new position for the column.</param>
            <exception cref="T:CeGui.InvalidRequestException">thrown if no column with ID 'columnID' is present.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.AddRow">
            <summary>
            	Add an empty row to the grid.
            </summary>
            <remarks>
            	If the list is being sorted, the new row will appear at an appropriate position according to the sorting being
            	applied.  If no sorting is being done, the new row will appear at the bottom of the list.
            </remarks>
            <returns>Initial zero based index of the new row.</returns>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.AddRow(CeGui.Widgets.ListboxItem,System.Int32)">
            <summary>
            	Add a row to the grid, and set the item in the column with ID 'columnID' to 'item'.
            </summary>
            <remarks>
            	If the list is being sorted, the new row will appear at an appropriate position according to the sorting being
            	applied.  If no sorting is being done, the new row will appear at the bottom of the list.
            </remarks>
            <param name="item">ListboxItem to be used as the initial contents for the column with ID 'columnID'.</param>
            <param name="columnID">ID code of the column whos initial item is to be set to 'item'.</param>
            <returns>Initial zero based index of the new row.</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if no column with the specified ID is present.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.InsertRow(System.Int32)">
            <summary>
            	Insert an empty row into the grid.
            </summary>
            <remarks>
            	If the list is being sorted, the new row will appear at an appropriate position according to the sorting being
            	applied.  If no sorting is being done, the new row will appear at the specified index.
            </remarks>
            <param name="rowIndex">Zero based index where the row should be inserted.  If this is greater than the current number of rows, the row is appended to the list.</param>
            <returns>Zero based index where the row was actually inserted.</returns>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.InsertRow(CeGui.Widgets.ListboxItem,System.Int32,System.Int32)">
            <summary>
            	Insert a row into the grid, and set the item in the column with ID 'columnID' to 'item'.
            </summary>
            <remarks>
            	If the list is being sorted, the new row will appear at an appropriate position according to the sorting being
            	applied.  If no sorting is being done, the new row will appear at the specified index.
            </remarks>
            <param name="item">ListboxItem to be used as the initial contents for the column with ID 'columnID'.</param>
            <param name="columnID">ID code of the column whos initial item is to be set to 'item'.</param>
            <param name="rowIndex">Zero based index where the row should be inserted.  If this is greater than the current number of rows, the row is appended to the list.</param>
            <returns>Zero based index where the row was actually inserted.</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if no column with the specified ID is present.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.RemoveRow(System.Int32)">
            <summary>
            	Remove the grid row at index 'rowIndex'.
            </summary>
            <param name="rowIndex">Zero based index of the row to be removed.</param>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'rowIndex' is invalid.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.SetGridItem(CeGui.Widgets.GridReference,CeGui.Widgets.ListboxItem)">
            <summary>
            	Set the ListboxItem for grid reference 'gridRef'.
            </summary>
            <param name="gridRef">GridReference describing the location of the item to be set.</param>
            <param name="item">ListboxItem to be set at 'gridRef'.</param>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'gridRef' contains an invalid grid reference.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.SetGridItem(System.Int32,System.Int32,CeGui.Widgets.ListboxItem)">
            <summary>
            	Set the ListboxItem for the column with ID 'columnID' in row 'rowIndex'.
            </summary>
            <param name="columnID">ID code of the column to receive 'item'.</param>
            <param name="rowIndex">Zero based index of the row to receive 'item'.</param>
            <param name="item">ListboxItem to be put into the grid.</param>
            <exception cref="T:CeGui.InvalidRequestException">thrown if no column with ID 'columnID' exists, or if 'rowIndex' is out of range.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.ClearAllSelections">
            <summary>
            	Remove the selected state from any currently selected ListboxItem attached to the grid.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.SetItemSelectState(CeGui.Widgets.ListboxItem,System.Boolean)">
            <summary>
            	Sets or clears the selected state of the given ListboxItem (which must be already attached to the grid).
            </summary>
            <remarks>
            	Depending upon the current selection mode, this may cause other items to be selected, other
            	items to be deselected, or for nothing to actually happen at all.
            </remarks>
            <param name="item">ListboxItem to be affected.</param>
            <param name="state">
            	- true to put the ListboxItem into the selected state.
            	- false to put the ListboxItem into the de-selected state.
            </param>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'item' is not attached to the grid.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.SetItemSelectState(CeGui.Widgets.GridReference,System.Boolean)">
            <summary>
            	Sets or clears the selected state of the ListboxItem at the given grid reference.
            </summary>
            <remarks>
            	Depending upon the current selection mode, this may cause other items to be selected, other
            	items to be deselected, or for nothing to actually happen at all.
            </remarks>
            <param name="gridRef">GridReference describing the position of the item to be affected.</param>
            <param name="state">
            	- true to put the ListboxItem into the selected state.
            	- false to put the ListboxItem into the de-selected state.
            </param>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'gridRef' is invalid.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.HandleUpdatedItemData">
            <summary>
            	Inform the grid that one or more attached ListboxItems have been externally modified, and
            	the list should re-sync its internal state and refresh the display as needed.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.SetColumnWidth(System.Int32,System.Single)">
            <summary>
            	Set the width of the specified column.
            </summary>
            <param name="columnIndex">Zero based column index of the column whos width is to be set.</param>
            <param name="width">float value specifying the new width for the column using the active metrics system.</param>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'columnIndex' is out of range.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.CreateListHeader">
            <summary>
            	Create and return a ListHeaer widget for use as the column headers.
            </summary>
            <returns>ListHeader based object.</returns>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.CreateVerticalScrollbar">
            <summary>
            	Create and return a Scrollbar widget for use as vertical scroll bar.
            </summary>
            <returns>Scrollbar to be used for scrolling the list vertically.</returns>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.CreateHorizontalScrollbar">
            <summary>
            	Create and return a Scrollbar widget for use as horizontal scroll bar.
            </summary>
            <returns>Scrollbar to be used for scrolling the list horizontally.</returns>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.LayoutComponentWidgets">
            <summary>
            	Setup SizeF and position for the component widgets.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.RenderBaseImagery(System.Single)">
            <summary>
            	Perform rendering of the widget control frame and other 'static' areas.  This
            	method should not render the actual items.  Note that the items are typically
            	rendered to layer 3, other layers can be used for rendering imagery behind and
            	infront of the items.
            </summary>
            <param name="z">Z co-ordinate for layer 0.</param>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.DrawSelf(System.Single)">
            <summary>
            	Perform the actual rendering for this Window.
            </summary>
            <param name="z">float value specifying the base Z co-ordinate that should be used when rendering.</param>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.ConfigureScrollbars">
            <summary>
            	display required integrated scroll bars according to current state of the list box and update their values.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.SelectRange(CeGui.Widgets.GridReference,CeGui.Widgets.GridReference)">
            <summary>
            	select all items between positions 'start' and 'end' (inclusive).
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns>true if something was modified.</returns>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.GetWidestColumnItemWidth(System.Int32)">
            <summary>
            	Return the width of the widest item in the given column
            </summary>
            <param name="columnIndex"></param>
            <returns>width of the widest item in the given column</returns>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.GetHighestRowItemHeight(System.Int32)">
            <summary>
            	Return the height of the highest item in the given row.
            </summary>
            <param name="rowIndex"></param>
            <returns>height of the highest item in the given row.</returns>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.ClearAllSelectionsImpl">
            <summary>
            	Clear the selected state for all items (implementation)
            </summary>
            <returns>true if some selections were cleared, false if nothing was changed.</returns>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.GetItemAtPoint(System.Drawing.PointF)">
            <summary>
            	Return the ListboxItem under the given window local pixel co-ordinate.
            </summary>
            <param name="point"></param>
            <returns>
            	ListboxItem that is under window pixel co-ordinate 'point', or null if no
            	item is under that position.
            </returns>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.SetItemSelectStateImpl(CeGui.Widgets.GridReference,System.Boolean)">
            <summary>
            	Set select state for the given item.
            	This appropriately selects other  items depending upon the select mode.
            </summary>
            <param name="gridRef"></param>
            <param name="state"></param>
            <returns>true if something is changed, else false.</returns>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.SetSelectForItemsInRow(System.Int32,System.Boolean)">
            <summary>
            	Set select state for all items in the given row
            </summary>
            <param name="rowIndex"></param>
            <param name="state"></param>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.SetSelectForItemsInColumn(System.Int32,System.Boolean)">
            <summary>
            	Set select state for all items in the given column
            </summary>
            <param name="columnIndex"></param>
            <param name="state"></param>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.MoveColumnImpl(System.Int32,System.Int32)">
            <summary>
            	Move the column at index 'columnIndex' so it is at index 'positionIndex'.
            	Implementation version which does not move the header segment (since that may have already happned).
            </summary>
            <param name="columnIndex"></param>
            <param name="positionIndex"></param>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'columnIndex' is invalid.</exception>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.ResetListImpl">
            <summary>
            	Remove all items from the grid.
            </summary>
            <returns>
            	- true if the grid contents were changed.
            	- false if the grid contents were not changed (already empty?).
            </returns>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.ResortGrid">
            <summary>
            	Causes a re-sort of the grid data in the appropriate direction
            </summary>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.OnSelectionModeChanged(CeGui.WindowEventArgs)">
            <summary>
            Internal handler triggered when the selection mode changes
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.OnNominatedSelectColumnChanged(CeGui.WindowEventArgs)">
            <summary>
            Internal handler triggered when the nominated selection column is changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.OnNominatedSelectRowChanged(CeGui.WindowEventArgs)">
            <summary>
            Internal handler triggered when the nominated selection row is changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.OnVerticalScrollbarModeChanged(CeGui.WindowEventArgs)">
            <summary>
            Internal handler triggered when the vertical scroll bar 'force' setting is changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.OnHorizontalScrollbarModeChanged(CeGui.WindowEventArgs)">
            <summary>
            Internal handler triggered when the horizontal scroll bar 'force' setting is changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.OnSelectionChanged(CeGui.WindowEventArgs)">
            <summary>
            Internal handler triggered when the grid selection changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.OnContentsChanged(CeGui.WindowEventArgs)">
            <summary>
            Internal handler triggered when the grid content changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.OnSortColumnChanged(CeGui.WindowEventArgs)">
            <summary>
            Internal handler triggered when the sort column changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.OnSortDirectionChanged(CeGui.WindowEventArgs)">
            <summary>
            Internal handler triggered when the sort direction changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.OnColumnSized(CeGui.WindowEventArgs)">
            <summary>
            Internal handler triggered when a column SizeF changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.OnColumnMoved(CeGui.WindowEventArgs)">
            <summary>
            Internal handler triggered when the column sequence changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.OnSized(CeGui.GuiEventArgs)">
            <summary>
            Called when the window's size is changed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.OnMouseButtonsDown(CeGui.MouseEventArgs)">
            <summary>
            Called when user clicks mouse inside window
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.MultiColumnList.OnMouseWheel(CeGui.MouseEventArgs)">
            <summary>
            Called when user spins mouse wheel
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:CeGui.Widgets.MultiColumnList.UserSortControlEnabled">
            <summary>
            	Gets/Sets whether use control of the sort column and sort direction is enabled.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.MultiColumnList.UserColumnSizingEnabled">
            <summary>
            	Gets/Sets whether the user may SizeF column segments.
            </summary>		
        </member>
        <member name="P:CeGui.Widgets.MultiColumnList.UserColumnDraggingEnabled">
            <summary>
            	Gets/Sets whether the user may modify the order of the columns.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.MultiColumnList.ColumnCount">
            <summary>
            	Gets the number of columns in the grid.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.MultiColumnList.RowCount">
            <summary>
            	Gets the number of rows in the grid.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.MultiColumnList.SortColumnIndex">
            <summary>
            	Gets/Sets the zero based index of the current sort column.
            	NB: There must be at least one column to successfully read this property.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.MultiColumnList.SortColumnID">
            <summary>
            Gets/Gets the current sort column by ID code.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.MultiColumnList.TotalColumnHeadersWidth">
            <summary>
            	Gets the total width of all column headers using the active metrics system.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.MultiColumnList.SortDirection">
            <summary>
            	Gets/Sets the current sort direction.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.MultiColumnList.SelectedItemCount">
            <summary>
            	Gets the number of selected ListboxItems attached to the grid.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.MultiColumnList.NominatedSelectionColumnID">
            <summary>
            	Gets/Sets the ID of the column to be used when one of the 'NominatedColumn' selection modes is used.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.MultiColumnList.NominatedSelectionColumn">
            <summary>
            	Gets/Sets the index of the column to be used when one of the 'NominatedColumn' selection modes is used. 
            </summary>
        </member>
        <member name="P:CeGui.Widgets.MultiColumnList.NominatedSelectionRow">
            <summary>
            	Gets/Sets the index of the row to be used when one of the 'NominatedRow' selection modes is used.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.MultiColumnList.SelectionMode">
            <summary>
            	Gets/Sets the selection mode to be used with the grid.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.MultiColumnList.AlwaysShowVerticalScrollbar">
            <summary>
            	Gets/Sets whether the vertical scroll bar will be shown even if it is not required.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.MultiColumnList.AlwaysShowHorizontalScrollbar">
            <summary>
            	Gets/Sets whether the horizontal scroll bar will be shown even if it is not required.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.MultiColumnList.ListRenderArea">
            <summary>
            	Gets the area in un-clipped pixels, the window relative area
            	that is to be used for rendering grid items.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.MultiColumnList.TotalRowsHeight">
            <summary>
            	Gets the sum of all row heights
            </summary>
        </member>
        <member name="E:CeGui.Widgets.MultiColumnList.SelectionModeChanged">
            <summary>
            	Event fired when the selection mode for the grid changes.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.MultiColumnList.NominatedSelectColumnChanged">
            <summary>
            	Event fired when the nominated select column changes.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.MultiColumnList.NominatedSelectRowChanged">
            <summary>
            	Event fired when the nominated select row changes.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.MultiColumnList.VerticalScrollbarModeChanged">
            <summary>
            	Event fired when the vertical scroll bar 'force' setting changes.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.MultiColumnList.HorizontalScrollbarModeChanged">
            <summary>
            	Event fired when the horizontal scroll bar 'force' setting changes.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.MultiColumnList.SelectionChanged">
            <summary>
            	Event fired when the current selection(s) within the grid changes.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.MultiColumnList.ContentsChanged">
            <summary>
            	Event fired when the contents of the grid changes.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.MultiColumnList.SortColumnChanged">
            <summary>
            	Event fired when the sort column changes.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.MultiColumnList.SortDirectionChanged">
            <summary>
            	Event fired when the sort direction changes.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.MultiColumnList.ColumnSized">
            <summary>
            	Event fired when the width of a column in the grid changes.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.MultiColumnList.ColumnMoved">
            <summary>
            	Event fired when the column order changes.
            </summary>
        </member>
        <member name="T:CeGui.Widgets.ComboDropList">
            <summary>
            Summary description for ComboDropList.
            </summary>
        </member>
        <member name="T:CeGui.Widgets.Listbox">
            <summary>
            Base class for standard Listbox widget.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Listbox.sorted">
            <summary>
            true if list items are sorted.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Listbox.multiSelect">
            <summary>
            true if the multi-select is enabled.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Listbox.forceVertScrollbar">
            <summary>
            true if vertical scrollbar should always be shown.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Listbox.forceHorzScrollbar">
            <summary>
            true if horizontal scrollbar should always be shown.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Listbox.vertScrollbar">
            <summary>
            Widget used as the vertical scrollbar of the Listbox.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Listbox.horzScrollbar">
            <summary>
            Widget used as the horizontal scrollbar of the Listbox.
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Listbox.lastSelectedItem">
            <summary>
            Reference to the last selected item (null for none)
            </summary>
        </member>
        <member name="F:CeGui.Widgets.Listbox.items">
            <summary>
            The list of ListboxItems in the Listbox
            </summary>
        </member>
        <member name="M:CeGui.Widgets.Listbox.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="type"></param>
            <param name="name">unique name for the Window</param>
        </member>
        <member name="M:CeGui.Widgets.Listbox.ResetList">
            <summary>
            Remove all items from the list.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.Listbox.AddItems(CeGui.Widgets.ListboxItem[])">
            <summary>
            Append a number of items to the end of the list
            </summary>
            <param name="items">the items to add</param>
        </member>
        <member name="M:CeGui.Widgets.Listbox.AddItems(System.String[])">
            <summary>
            Append a number of entries to the end of the list
            </summary>
            <param name="textItems">the "text" to show for the entries</param>
        </member>
        <member name="M:CeGui.Widgets.Listbox.AddItem(CeGui.Widgets.ListboxItem)">
            <summary>
            Add an item to the list
            </summary>
            <param name="item">ListboxItem based object to be added to the Listbox.</param>
        </member>
        <member name="M:CeGui.Widgets.Listbox.AddItem(System.String)">
            <summary>
            Creates a ListboxItem, and appends it to the list.
            </summary>
            <param name="text">text to give the ListboxItem</param>
            <returns>the ListboxItem that has been created</returns>
        </member>
        <member name="M:CeGui.Widgets.Listbox.AddItem(System.String,System.Int32)">
            <summary>
            Creates the specified ListboxItem, and appends it to the list.
            </summary>
            <param name="text">text to give the ListboxItem</param>
            <param name="id">id to give the ListboxItem</param>
            <returns>the ListboxItem that has been created</returns>
        </member>
        <member name="M:CeGui.Widgets.Listbox.AddItem(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates the specified ListboxItem, and appends it to the list.
            </summary>
            <param name="text">text to give the ListboxItem</param>
            <param name="id">id to give the ListboxItem</param>
            <param name="disabled">if the  ListboxItem is disabled</param>
            <returns>the ListboxItem that has been created</returns>
        </member>
        <member name="M:CeGui.Widgets.Listbox.AddItem(System.String,System.Int32,System.Object)">
            <summary>
            Creates the specified ListboxItem, and appends it to the list.
            </summary>
            <param name="text">text to give the ListboxItem</param>
            <param name="id">id to give the ListboxItem</param>
            <param name="data">data object to give the ListboxItem</param>
            <returns>the ListboxItem that has been created</returns>
        </member>
        <member name="M:CeGui.Widgets.Listbox.AddItem(System.String,System.Int32,System.Object,System.Boolean)">
            <summary>
            Creates the specified ListboxItem, and appends it to the list.
            </summary>
            <param name="text">text to give the ListboxItem</param>
            <param name="id">id to give the ListboxItem</param>
            <param name="data">data object to give the ListboxItem</param>
            <returns>the ListboxItem that has been created</returns>
            <param name="disabled">if the  ListboxItem is disabled</param>
        </member>
        <member name="M:CeGui.Widgets.Listbox.InsertItem(CeGui.Widgets.ListboxItem,CeGui.Widgets.ListboxItem)">
            <summary>
            Insert an item into the list box after a specified item already in the list.
            </summary>
            <remarks>
            Note that if the list is sorted, the item may not end up in the requested position.
            </remarks>
            <param name="item">ListboxItem to be inserted.  If this parameter is null, nothing happens.</param>
            <param name="position">ListboxItem that 'item' is to be inserted after.  If this parameter is null, the item is inserted at the start of the list.</param>
        </member>
        <member name="M:CeGui.Widgets.Listbox.RemoveItem(CeGui.Widgets.ListboxItem)">
            <summary>
            Removes the given item from the list box.
            </summary>
            <param name="item">ListboxItem that is to be removed.  If the item is not attached to this list box then nothing will happen.</param>
        </member>
        <member name="M:CeGui.Widgets.Listbox.ClearAllSelections">
            <summary>
            Clear the selected state for all items.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.Listbox.SetItemSelectState(CeGui.Widgets.ListboxItem,System.Boolean)">
            <summary>
            Set the select state of an attached ListboxItem.
            </summary>
            <remarks>
            This is the recommended way of selecting and deselecting items attached
            to a list box as it respects the multi-select mode setting.  It is
            possible to modify the setting on ListboxItems directly, but that
            approach does not respect the settings of the list box.					
            </remarks>
            <param name="item">The ListboxItem to be affected.  This item must be attached to the list box.</param>
            <param name="selectState">true to select the item, false to de-select the item.</param>
            <exception cref="T:CeGui.InvalidRequestException">Thrown if the specified item is not attached to the Listbox.</exception>
        </member>
        <member name="M:CeGui.Widgets.Listbox.SetItemSelectState(System.Int32,System.Boolean)">
            <summary>
            Set the select state of an attached ListboxItem.
            </summary>
            <remarks>
            This is the recommended way of selecting and deselecting items attached
            to a list box as it respects the multi-select mode setting.  It is
            possible to modify the setting on ListboxItems directly, but that
            approach does not respect the settings of the list box.					
            </remarks>
            <param name="itemIndex">The zero based index of the ListboxItem to be affected.  This must be a valid index (0 &lt;= itemIndex &lt; ItemCount)</param>
            <param name="selectState">true to select the item, false to de-select the item.</param>
            <exception cref="T:CeGui.InvalidRequestException">Thrown if the specified item index is out of range.</exception>
        </member>
        <member name="M:CeGui.Widgets.Listbox.HandleUpdatedItemData">
            <summary>
            Causes the list box to update it's internal state after changes have been made to one or more
            attached ListboxItem objects.
            </summary>
            <remarks>
            Client code must call this whenever it has made any changes to ListboxItem objects already attached to the
            list box.  If you are just adding items, or removed items to update them prior to re-adding them, there is
            no need to call this method.
            </remarks>
        </member>
        <member name="M:CeGui.Widgets.Listbox.EnsureItemIsVisible(System.Int32)">
            <summary>
            Ensure the item at the specified index is visible within the list box.
            </summary>
            <remarks>
            If the specified index value is out of range, the list is always scrolled to the bottom.
            </remarks>
            <param name="itemIndex">Zero based index of the item to be made visible in the list box.</param>
        </member>
        <member name="M:CeGui.Widgets.Listbox.EnsureItemIsVisible(CeGui.Widgets.ListboxItem)">
            <summary>
            Ensure the item at the specified index is visible within the list box.
            </summary>
            <param name="item">ListboxItem to be made visible in the list box.</param>
            <exception cref="T:CeGui.InvalidRequestException">thrown if the specified item is not attached to this list box.</exception>
        </member>
        <member name="M:CeGui.Widgets.Listbox.GetFirstSelectedItem">
            <summary>
            Return the first selected item.
            </summary>
            <returns>First selected ListboxItem or null if no item is selected.</returns>
        </member>
        <member name="M:CeGui.Widgets.Listbox.GetNextSelectedItem(CeGui.Widgets.ListboxItem)">
            <summary>
            Return the next selected item after item 'startItem'.
            </summary>
            <param name="startItem">ListboxItem where the search for the next selected item is to begin.  If this parameter is null, the search will begin with the first item in the list box.</param>
            <returns>ListboxItem based object that is the next selected item in the list after the item specified by \a start_item.  Will return null if no further items were selected.</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if the specified item is not attached to this list box.</exception>
        </member>
        <member name="M:CeGui.Widgets.Listbox.GetItemIndex(CeGui.Widgets.ListboxItem)">
            <summary>
            Return the index of ListboxItem 'item'.
            </summary>
            <param name="item">ListboxItem whos zero based index is to be returned.</param>
            <returns>Zero based index indicating the position of ListboxItem 'item' in the list box.</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if the specified item is not attached to this list box.</exception>
        </member>
        <member name="M:CeGui.Widgets.Listbox.IsItemSelected(System.Int32)">
            <summary>
            return whether the string at index position 'index' is selected
            </summary>
            <param name="index">Index of item to check.</param>
            <returns>true if the item is selected, false if the item is not selected.</returns>
            <exception cref="T:CeGui.InvalidRequestException">Thrown if the specified item index is out of range.</exception>
        </member>
        <member name="M:CeGui.Widgets.Listbox.FindItemWithText(System.String,CeGui.Widgets.ListboxItem)">
            <summary>
            Search the list for an item with the specified text.
            </summary>
            <remarks>
            The search will not include 'startItem'.  If 'startItem' is NULL, the search will
            begin from the first item in the list.
            </remarks>
            <param name="text">string containing the text to be searched for.</param>
            <param name="startItem">ListboxItem where the search is to begin.</param>
            <returns>The first ListboxItem in the list after 'startItem' that has text matching 'text'.  If no item matches the criteria NULL is returned.</returns>
            <exception cref="T:CeGui.InvalidRequestException">thrown if 'startItem' is not attached to this list box.</exception>
        </member>
        <member name="M:CeGui.Widgets.Listbox.IsListboxItemInList(CeGui.Widgets.ListboxItem)">
            <summary>
            Returns whether the given ListboxItem is attached to the Listbox.
            </summary>
            <param name="item">ListboxItem to test for.</param>
            <returns>true if the item is attached, false if the item is not attached.</returns>
        </member>
        <member name="M:CeGui.Widgets.Listbox.CreateVerticalScrollbar">
            <summary>
            Create a Widget to be used as the vertical scrollbar in this Listbox.
            </summary>
            <returns>A Scrollbar based object.</returns>
        </member>
        <member name="M:CeGui.Widgets.Listbox.CreateHorizontalScrollbar">
            <summary>
            Create a widget to be used as the horizontal scrollbar in this Listbox.
            </summary>
            <returns>A Scrollbar based object.</returns>
        </member>
        <member name="M:CeGui.Widgets.Listbox.LayoutComponentWidgets">
            <summary>
            Layout the component widgets of this Listbox.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.Listbox.RenderListboxBaseImagery(System.Single)">
            <summary>
            Perform rendering of the widget control frame and other 'static' areas.  This
            method should not render the actual items.  Note that the items are typically
            rendered to layer 3, other layers can be used for rendering imagery behind and
            infront of the items.
            </summary>
            <param name="z">base z co-ordinate (layer 0)</param>
        </member>
        <member name="M:CeGui.Widgets.Listbox.Initialize">
            <summary>
            	Intialize this Listbox widget.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.Listbox.DrawSelf(System.Single)">
            <summary>
            Perform rendering for this Listbox.
            </summary>
            <param name="z">float value specifying the base Z co-ordinate that should be used when rendering.</param>
        </member>
        <member name="M:CeGui.Widgets.Listbox.ConfigureScrollbars">
            <summary>
            display required integrated scroll bars according to current state of the list box and update their values.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.Listbox.SelectRange(System.Int32,System.Int32)">
            <summary>
            Select all strings between positions startIndex and endIndex (inclusive).
            </summary>
            <param name="startIndex">Zero based index of the first item to be selected.</param>
            <param name="endIndex">Zero based index of the last item to be selected.</param>
        </member>
        <member name="M:CeGui.Widgets.Listbox.ClearAllSelectionsImpl">
            <summary>
            Clear the selected state for all items (implementation)
            </summary>
            <returns>true if some selections were cleared, false nothing was changed.</returns>
        </member>
        <member name="M:CeGui.Widgets.Listbox.GetItemAtPoint(System.Drawing.PointF)">
            <summary>
            Return the ListboxItem under the given window local pixel co-ordinate.
            </summary>
            <param name="point"></param>
            <returns>ListboxItem that is under window pixel co-ordinate specified in 'point', or null if no item is under that position.</returns>
        </member>
        <member name="M:CeGui.Widgets.Listbox.OnListContentsChanged(CeGui.WindowEventArgs)">
            <summary>
            Triggered when the contents of the Listbox is changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.Listbox.OnSelectionChanged(CeGui.WindowEventArgs)">
            <summary>
            Triggered when the current selection within the Listbox changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.Listbox.OnSortModeChanged(CeGui.WindowEventArgs)">
            <summary>
            Triggered when the sort mode of the Listbox changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.Listbox.OnVerticalScrollbarModeChanged(CeGui.WindowEventArgs)">
            <summary>
            Triggered when the 'always show' mode of the vertical scrollbar is changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.Listbox.OnHorizontalScrollbarModeChanged(CeGui.WindowEventArgs)">
            <summary>
            Triggered when the 'always show' mode of the horizontal scrollbar is changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.Listbox.OnSelectionModeChanged(CeGui.WindowEventArgs)">
            <summary>
            Triggered when the selection mode of the Listbox changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.Listbox.OnMouseButtonsDown(CeGui.MouseEventArgs)">
            <summary>
            Handler for when the mouse button is pressed
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:CeGui.Widgets.Listbox.OnSized(CeGui.GuiEventArgs)">
            <summary>
            Handler for when the window or widget is sized.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:CeGui.Widgets.Listbox.OnMouseWheel(CeGui.MouseEventArgs)">
            <summary>
            Handler for when the mouse wheel position is changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="P:CeGui.Widgets.Listbox.ItemCount">
            <summary>
            Get the number of items in the Listbox.  (read only).
            </summary>
        </member>
        <member name="P:CeGui.Widgets.Listbox.SelectedCount">
            <summary>
            Get the number of selected items in the Listbox.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.Listbox.Sorted">
            <summary>
            Get/Set whether the items in the list box are sorted.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.Listbox.Multiselect">
            <summary>
            Get/Set the selection mode for the Listbox.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.Listbox.AlwaysShowVerticalScrollbar">
            <summary>
            Get/Set whether the vertical scrollbar will shown even if it is not required.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.Listbox.AlwaysShowHorizontalScrollbar">
            <summary>
            Get/Set whether the horizontal scrollbar will be shown even if it is not required.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.Listbox.Item(System.Int32)">
            <summary>
            Get the ListboxItem at the given index.
            </summary>
            <exception cref="T:CeGui.InvalidRequestException">Thrown if the specified index is out of range.</exception>
        </member>
        <member name="P:CeGui.Widgets.Listbox.ListRenderArea">
            <summary>
            Get the Rect that describes, in un-clipped pixels, the window relative area
            that is to be used for rendering list items.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.Listbox.TotalItemsHeight">
            <summary>
            Get the sum of all item heights.
            </summary>
        </member>
        <member name="P:CeGui.Widgets.Listbox.WidestItemWidth">
            <summary>
            Get the width of the widest item attached to the listbox.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.Listbox.ListContentsChanged">
            <summary>
            Event fired when an item is added to, or removed from, the Listbox.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.Listbox.SelectionChanged">
            <summary>
            Event fired when the current list selection changes.
            </summary>
        </member>
        <member name="E:CeGui.Widgets.Listbox.SortModeChanged">
            <summary>
            Event fired when the sorting mode of the Listbox changes
            </summary>
        </member>
        <member name="E:CeGui.Widgets.Listbox.VerticalScrollbarModeChanged">
            <summary>
            Event fired when the 'always show' mode for the vertical scrollbar is changed
            </summary>
        </member>
        <member name="E:CeGui.Widgets.Listbox.HorizontalScrollbarModeChanged">
            <summary>
            Event fired when the 'always show' mode for the horizontal scrollbar is changed
            </summary>
        </member>
        <member name="E:CeGui.Widgets.Listbox.SelectionModeChanged">
            <summary>
            Event fired when the selection mode of the Listbox is changed.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.ComboDropList.#ctor(System.String,System.String)">
            <summary>
            	Constructor.
            </summary>
            <param name="name">Name of this widget.</param>
        </member>
        <member name="M:CeGui.Widgets.ComboDropList.Initialize">
            <summary>
            	Prepares this widget for use.
            </summary>
        </member>
        <member name="M:CeGui.Widgets.ComboDropList.OnListSelectionAccepted(CeGui.WindowEventArgs)">
            <summary>
            	Handles an item in the list being selected.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.ComboDropList.OnMouseMove(CeGui.MouseEventArgs)">
            <summary>
            	Handles mouse movement within this widget.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.ComboDropList.OnMouseButtonsDown(CeGui.MouseEventArgs)">
            <summary>
            	Handler for mouse button pressed events.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.ComboDropList.OnMouseButtonsUp(CeGui.MouseEventArgs)">
            <summary>
            	Handler for mouse button release events.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.ComboDropList.OnCaptureLost(CeGui.GuiEventArgs)">
            <summary>
            	Handler for when input capture is lost.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CeGui.Widgets.ComboDropList.OnActivated(CeGui.WindowEventArgs)">
            <summary>
            	Handler for when window is activated.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:CeGui.Vector2">
            <summary>
            Class used as a two dimensional vector (aka a Point)
            </summary>
        </member>
        <member name="T:CeGui.StateImagery">
            <summary>
            Class the encapsulates imagery for a given widget state.
            </summary>
        </member>
        <member name="F:CeGui.StateImagery.name">
            <summary>
            Name of this state.
            </summary>
        </member>
        <member name="F:CeGui.StateImagery.layers">
            <summary>
            Collection of LayerSpecification objects to be drawn for this state.
            </summary>
        </member>
        <member name="F:CeGui.StateImagery.clipToDisplay">
            <summary>
            true if Imagery for this state should be clipped to the display instead of winodw (effectively, not clipped).
            </summary>
        </member>
        <member name="M:CeGui.StateImagery.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CeGui.StateImagery.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of the state</param>
        </member>
        <member name="M:CeGui.StateImagery.Render(CeGui.Window,CeGui.ColourRect,CeGui.Rect)">
            <summary>
            Render imagery for this state.
            </summary>
            <param name="srcWindow">Window to use when convering BaseDim values to pixels.</param>
            <param name="modcols"></param>
            <param name="clipper"></param>
        </member>
        <member name="M:CeGui.StateImagery.Render(CeGui.Window,CeGui.Rect,CeGui.ColourRect,CeGui.Rect)">
            <summary>
            Render imagery for this state.
            </summary>
            <param name="srcWindow">Window to use when convering BaseDim values to pixels.</param>
            <param name="baseRect">Rect to use when convering BaseDim values to pixels.</param>
            <param name="modcols"></param>
            <param name="clipper"></param>
        </member>
        <member name="M:CeGui.StateImagery.AddLayer(CeGui.LayerSpecification)">
            <summary>
            Add an imagery LayerSpecification to this state.
            </summary>
            <param name="layer">LayerSpecification to be added to this state (will be copied)</param>
        </member>
        <member name="M:CeGui.StateImagery.ClearLayers">
            <summary>
            Removed all LayerSpecifications from this state.
            </summary>
        </member>
        <member name="P:CeGui.StateImagery.Name">
            <summary>
            Return the name of this state.
            </summary>
        </member>
        <member name="P:CeGui.StateImagery.ClippedToDisplay">
             <summary>
                Return whether this state imagery should be clipped to the display rather than the target window.
            
                Clipping to the display effectively implies that the imagery should be rendered unclipped.
             </summary>
        </member>
        <member name="T:CeGui.ListboxTextItem">
            <summary>
            Summary description for ListboxTextItem.
            </summary>
        </member>
        <member name="F:CeGui.ListboxTextItem.font">
            <summary>
            Font to use for text rendering.
            </summary>
        </member>
        <member name="F:CeGui.ListboxTextItem.textColors">
            <summary>
            Colors to use when rendering text.
            </summary>
        </member>
        <member name="M:CeGui.ListboxTextItem.SetTextColors(CeGui.Colour,CeGui.Colour,CeGui.Colour,CeGui.Colour)">
            <summary>
            Set the colors to use for the text.
            </summary>
            <param name="topLeft"></param>
            <param name="topRight"></param>
            <param name="bottomLeft"></param>
            <param name="bottomRight"></param>
        </member>
        <member name="M:CeGui.ListboxTextItem.SetTextColors(CeGui.Colour)">
            <summary>
            Set the text color to be used.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:CeGui.ListboxTextItem.Draw(CeGui.Vector3,System.Single,CeGui.Rect)">
            <summary>
            Perform rendering for this ListboxItem
            </summary>
            <param name="position">Vector3 object describing the upper-left corner of area that should be rendered in to for the draw operation.</param>
            <param name="alpha">Alpha value to be used when rendering the item (between 0.0f and 1.0f).</param>
            <param name="clipper">Rect object describing the clipping Rect for the draw operation.</param>
        </member>
        <member name="P:CeGui.ListboxTextItem.Font">
            <summary>
            Get/Set the font used for text rendering.
            </summary>
        </member>
        <member name="P:CeGui.ListboxTextItem.TextColors">
            <summary>
            Get/Set the text colors for this ListboxItem.
            </summary>
        </member>
        <member name="P:CeGui.ListboxTextItem.Size">
            <summary>
            Return the pixel SizeF of this ListboxItem.
            </summary>
        </member>
        <member name="T:CeGui.Imageset">
            <summary>
              Offers functions to define, access, and draw, a set of image components 
              on a single graphical surface or <see cref="P:CeGui.Imageset.Texture"/>
            </summary>
            <remarks>
              Imageset objects are a means by which a single graphical image (file, Texture, etc),
              can be split into a number of 'components' which can later be accessed via name.
              The components of an Imageset can queried for various details, and sent to the
              <see cref="T:CeGui.Renderer"/> object for drawing
            </remarks>
        </member>
        <member name="F:CeGui.Imageset.SchemaFileName">
            <summary>Name of the XSD file to use for validation</summary>
        </member>
        <member name="F:CeGui.Imageset.DefaultNativeHorzRes">
            <summary>Default native horizontal resolution (for fonts and imagesets)</summary>
        </member>
        <member name="F:CeGui.Imageset.DefaultNativeVertRes">
            <summary>Default native vertical resolution (for fonts and imagesets)</summary>
        </member>
        <member name="M:CeGui.Imageset.#ctor(System.String,CeGui.Texture)">
            <summary>
              Construct a new Imageset object. Object will initially have no Images defined
            </summary>
            <param name="name">Name that will be assigned to this image set</param>
            <param name="texture">
              Texture object that holds the imagery for the Imageset being created
            </param>
        </member>
        <member name="M:CeGui.Imageset.#ctor(System.String,System.String)">
            <summary>
              Internal constructor. Constructs a new Imageset object using data contained
              in the specified file
            </summary>
            <remarks>
              This is internal, and only needs to be accessible via the various CreateXXX
              methods of the <see cref="T:CeGui.ImagesetManager"/>
            </remarks>
            <param name="fileName">
              The name of the Imageset data file that is to be processed
            </param>
            <param name="resourceGroup">
              Resource group identifier to be passed to the resource manager.
              NB: This affects the imageset xml file only, the texture loaded may have
              its own group specified in the XML file
            </param>
            <exception cref="T:System.IO.FileNotFoundException">
              If the specified file simply does not exist
            </exception>
        </member>
        <member name="M:CeGui.Imageset.#ctor(System.String,System.String,System.String)">
            <summary>
              Construct a new Imageset using the specified image file and imageset name. The
              created imageset will, by default, have a single Image defined named "full_image"
              which represents the entire area of the loaded image file.
            </summary>
            <remarks>
              Under certain renderers it may be required that the source image dimensions be
              some power of 2, if this condition is not met then stretching and other undesired
              side-effects may be experienced. To be safe from such effects it is generally
              recommended that all images that you load have dimensions that are some power of 2
            </remarks>
            <param name="name">Name to be assigned to the created Imageset</param>
            <param name="fileName">Filename of the Image that is to be loaded</param>
            <param name="resourceGroup">
              Resource group identifier to be passed to the resource manager, which may specify
              a group from which the image file is to be loaded
            </param>
        </member>
        <member name="M:CeGui.Imageset.Dispose">
            <summary>Cleans up resources in use</summary>
        </member>
        <member name="M:CeGui.Imageset.IsImageDefined(System.String)">
            <summary>Returns true if an Image with the specified name exists</summary>
            <param name="name">The name of the image to look for</param>
            <returns>
              True if an Image with the given name is defined for this Imageset, else false
            </returns>
        </member>
        <member name="M:CeGui.Imageset.GetImage(System.String)">
            <summary>Gets the image with the specified name</summary>
            <param name="name">The name of the Image object to be returned</param>
            <returns>Image object that has the requested name</returns>
        </member>
        <member name="M:CeGui.Imageset.UndefineImage(System.String)">
            <summary>
              Remove the definition for the Image with the specified name.  
              If no such Image exists, nothing happens
            </summary>
            <param name="name">The name of the Image object to be removed from the Imageset</param>
        </member>
        <member name="M:CeGui.Imageset.UndefineAllImages">
            <summary>
              Removes the definitions for all Image objects currently defined in the Imageset
            </summary>
        </member>
        <member name="M:CeGui.Imageset.DefineImage(System.String,System.Drawing.PointF,System.Drawing.SizeF,System.Drawing.PointF)">
            <summary>Define a new Image for this Imageset</summary>
            <param name="name">
              The name that will be assigned to the new Image, which must be unique within the Imageset
            </param>
            <param name="position">
              Point describing the pixel location of the Image on the image file / texture associated
              with this Imageset
            </param>
            <param name="size">Size describing the dimensions of the Image, in pixels</param>
            <param name="renderOffset">
              Point describing the offsets, in pixels, that are to be applied to the Image when it
              is drawn
            </param>
            <exception cref="T:CeGui.AlreadyExistsException">
              If an image named <paramref name="name"/> already exists
            </exception>
        </member>
        <member name="M:CeGui.Imageset.DefineImage(System.String,CeGui.Rect,System.Drawing.PointF)">
            <summary>Define a new Image for this Imageset</summary>
            <param name="name">
              The name that will be assigned to the new Image, which must be unique within the Imageset
            </param>
            <param name="imageRect">
              The area on the image file / texture associated with this Imageset that will be used for
              the Image
            </param>
            <param name="renderOffset">
              Point describing the offsets, in pixels, that are to be applied to the Image when it
              is drawn
            </param>
            <exception cref="T:CeGui.AlreadyExistsException">
              If an image named <paramref name="name"/> already exists
            </exception>
        </member>
        <member name="M:CeGui.Imageset.Draw(CeGui.Rect,CeGui.Rect,System.Single,CeGui.Rect,CeGui.ColourRect,CeGui.QuadSplitMode)">
            <summary>Queues an area of the associated Texture the be drawn on the screen</summary>
            <remarks>Low-level routine to be used carefully!</remarks>
            <param name="sourceRect">
              Rect describing the area of the image file / texture that is to be queued for drawing
            </param>
            <param name="destRect">
              Rect describing the area of the screen that will be filled with the imagery
              from <paramref name="sourceRect"/>
            </param>
            <param name="z">
              float value specifying 'z' order. 0 is topmost with increasing values moving back
              into the screen
            </param>
            <param name="clipRect">
              Rect describing a 'clipping Rect' that will be applied when drawing the requested imagery
            </param>
            <param name="colors">
              ColorRect holding the ARGB colors to be applied to the four corners of the
              rendered imagery
            </param>
            <param name="quadSplitMode">
              One of the QuadSplitMode values specifying the way quads are split into triangles
            </param>
        </member>
        <member name="M:CeGui.Imageset.NotifyScreenResolution(System.Drawing.SizeF)">
            <summary>Notify the Imageset of the current (usually new) display resolution</summary>
            <param name="size">Size describing the display resolution</param>
        </member>
        <member name="M:CeGui.Imageset.System#Collections#Generic#IEnumerable{CeGui#Image}#GetEnumerator">
            <summary>
              Returns an enumerator that can be used to iterate over the
              Image objects in the Imageset
            </summary>
        </member>
        <member name="M:CeGui.Imageset.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that can be used to iterate over the
              Image objects in the Imageset
            </summary>
        </member>
        <member name="M:CeGui.Imageset.WriteToXml(System.Xml.XmlWriter)">
            <summary>Writes an xml representation of this Imageset</summary>
            <param name="writer">Stream to write to</param>
        </member>
        <member name="F:CeGui.Imageset.DefaultResourceGroup">
            <summary>Default resource group to be used when loading Imageset data</summary>
        </member>
        <member name="M:CeGui.Imageset.Load(System.String,System.String)">
            <summary>
            Initialize the image set with information taken from the specified file
            </summary>
            <param name="fileName">The name of the Imageset data file that is to be processed</param>
            <param name="resourceGroup">Resource group to be used when loading Imageset data</param>
        </member>
        <member name="M:CeGui.Imageset.Unload">
            <summary>
              Unloads all loaded data and leaves the Imageset in a clean (but un-usable) state
            </summary>
            <remarks>
              This should be called for cleanup purposes only.
            </remarks>
        </member>
        <member name="M:CeGui.Imageset.UpdateImageScalingFactors">
            <summary>
              Sets the scaling factor for all Images that are a part of this Imageset
            </summary>
        </member>
        <member name="F:CeGui.Imageset.name">
            <summary>Name of this image set</summary>
        </member>
        <member name="F:CeGui.Imageset.imageRegistry">
            <summary>List of images defined in this set</summary>
        </member>
        <member name="F:CeGui.Imageset.texture">
            <summary>Texture object that handles imagery for this Imageset</summary>
        </member>
        <member name="F:CeGui.Imageset.textureFileName">
            <summary>The name of the texture file (if any)</summary>
        </member>
        <member name="F:CeGui.Imageset.autoScale">
            <summary>True when auto-scaling is enabled</summary>
        </member>
        <member name="F:CeGui.Imageset.horzScaling">
            <summary>Current horizontal scaling factor</summary>
        </member>
        <member name="F:CeGui.Imageset.vertScaling">
            <summary>Current vertical scaling factor</summary>
        </member>
        <member name="F:CeGui.Imageset.nativeResolution">
            <summary>Native horizontal/vertical resolution for this Imageset</summary>
        </member>
        <member name="P:CeGui.Imageset.Texture">
            <summary>The Texture object to be used by this Imageset</summary>
            <remarks>
              <para>
                Changing textures on an Imageset that is in use is not a good idea!
              </para>
              <para>
                The old texture is NOT disposed of, that is the clients responsibility.
              </para>
            </remarks>
        </member>
        <member name="P:CeGui.Imageset.Name">
            <summary>Name of the Imageset</summary>
            <value>String holding the name of this Imageset.</value>
        </member>
        <member name="P:CeGui.Imageset.ImageCount">
            <summary>Gets the number of images defined for this Imageset</summary>
            <value>Integer value equal to the number of Image objects defined for the Imageset</value>
        </member>
        <member name="P:CeGui.Imageset.AutoScaled">
            <summary>Get/Set flag indicating whether to use auto-scaling for this Imageset</summary>
            <value>true to enable auto-scaling, false to disable auto-scaling.</value>
        </member>
        <member name="P:CeGui.Imageset.NativeResolution">
            <summary>Get/Set the native resolution for this Imageset</summary>
            <value>SizeF describing the new native screen resolution for this Imageset</value>
        </member>
        <member name="T:CeGui.Font">
            <summary>Class that encapsulates text rendering functionality for a typeface</summary>
            <remarks>
              <para>
                A Font object is created for each unique typeface required. The Font class provides
                methods for loading typefaces from various sources, and then for outputting text via
                the <see cref="T:CeGui.Renderer"/> object
              </para>
              <para>
                Based on the font generation code found in the Axiom Engine (http://axiomengine.sf.net)
              </para>
            </remarks>
        </member>
        <member name="F:CeGui.Font.BitmapHeaderSize">
            <summary>
              Needed to offset the start of the in memory bitmap to exclude this data.
            </summary>
        </member>
        <member name="F:CeGui.Font.DefaultColor">
            <summary>
              Default color to use for rendering glyphs when no color is specified.
            </summary>
        </member>
        <member name="M:CeGui.Font.#ctor(System.String)">
            <summary>Constructor which creates a Font from an xml file</summary>
            <param name="fileName"></param>
        </member>
        <member name="M:CeGui.Font.#ctor(System.String,System.String,System.Int32,CeGui.FontFlags,System.Char,System.Char)">
            <summary>Contructor</summary>
            <param name="name">What to call this font</param>
            <param name="fontName">The windows FontFamily to use for the font</param>
            <param name="size"></param>
            <param name="flags"></param>
            <param name="firstCodePoint"></param>
            <param name="lastCodePoint"></param>
        </member>
        <member name="M:CeGui.Font.#ctor(System.String,System.String,System.Int32,CeGui.FontFlags,System.String)">
            <summary>
            	Constructor.
            </summary>
            <param name="name">What to call this font</param>
            <param name="fontName">The windows FontFamily to use for the font</param>
            <param name="size"></param>
            <param name="flags"></param>
            <param name="glyphSet"></param>
        </member>
        <member name="M:CeGui.Font.#ctor(System.String,System.String,System.Int32,CeGui.FontFlags)">
            <summary>
            	Constructor.  Creates fonts from ASCII 32-127.
            </summary>
            <param name="name">What to call this font</param>
            <param name="fontName">The windows FontFamily to use for the font</param>
            <param name="size"></param>
            <param name="flags"></param>
        </member>
        <member name="M:CeGui.Font.DrawText(System.String,CeGui.Rect,System.Single,CeGui.Rect,CeGui.HorizontalTextFormat,CeGui.ColourRect)">
            <summary>
            	Draw text into a specified area of the display.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="drawArea">
            	Rect object describing the area of the display where the text is to be rendered.  The text is not clipped to this Rect, but is formatted
            	using this Rect depending upon the option specified in <paramref name="format"/>.
            </param>
            <param name="z">float value specifying the z co-ordinate for the drawn text.</param>
            <param name="clipRect">Rect object describing the clipping area for the drawing.  No drawing will occur outside this Rect.</param>
            <param name="format">The text formatting required.</param>
            <param name="colors">
            	ColorRect object describing the colors to be applied when drawing the text.
            	The colors specified in here are applied to each glyph, rather than the text as a whole.
            </param>
            <returns>The number of lines output.  This does not consider clipping, so if all text was clipped, this would still return >=1.</returns>
        </member>
        <member name="M:CeGui.Font.DrawText(System.String,CeGui.Rect,System.Single,CeGui.Rect,CeGui.HorizontalTextFormat)">
            <summary>
            	Draw text into a specified area of the display using the default colors and default text format (Left aligned).
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="drawArea">
            	Rect object describing the area of the display where the text is to be rendered.  The text is not clipped to this Rect, but is formatted
            	using this Rect depending upon the option specified in <paramref name="format"/>.
            </param>
            <param name="z">float value specifying the z co-ordinate for the drawn text.</param>
            <param name="clipRect">Rect object describing the clipping area for the drawing.  No drawing will occur outside this Rect.</param>
            <param name="format">The text formatting required.</param>
            <returns>The number of lines output.  This does not consider clipping, so if all text was clipped, this would still return >=1.</returns>
        </member>
        <member name="M:CeGui.Font.DrawText(System.String,CeGui.Rect,System.Single,CeGui.Rect)">
            <summary>
            	Draw text into a specified area of the display using the default colors.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="drawArea">
            	Rect object describing the area of the display where the text is to be rendered.  The text is not clipped to this Rect, but is formatted
            	using this Rect depending upon the option specified in <paramref name="format"/>.
            </param>
            <param name="z">float value specifying the z co-ordinate for the drawn text.</param>
            <param name="clipRect">Rect object describing the clipping area for the drawing.  No drawing will occur outside this Rect.</param>
        </member>
        <member name="M:CeGui.Font.DrawText(System.String,CeGui.Rect,System.Single,CeGui.HorizontalTextFormat,CeGui.ColourRect)">
            <summary>
            	Draw text into a specified area of the display using the default colors.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="drawArea">
            	Rect object describing the area of the display where the text is to be rendered.  The text is not clipped to this Rect, but is formatted
            	using this Rect depending upon the option specified in <paramref name="format"/>.
            </param>
            <param name="z">float value specifying the z co-ordinate for the drawn text.</param>
            <param name="format">The text formatting required.</param>
            <param name="colors">
            	ColorRect object describing the colors to be applied when drawing the text.
            	The colors specified in here are applied to each glyph, rather than the text as a whole.
            </param>
            <returns>The number of lines output.  This does not consider clipping, so if all text was clipped, this would still return >=1.</returns>
        </member>
        <member name="M:CeGui.Font.DrawText(System.String,CeGui.Rect,System.Single,CeGui.HorizontalTextFormat)">
            <summary>
            	Draw text into a specified area of the display using the default colors.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="drawArea">
            	Rect object describing the area of the display where the text is to be rendered.  The text is not clipped to this Rect, but is formatted
            	using this Rect depending upon the option specified in <paramref name="format"/>.
            </param>
            <param name="z">float value specifying the z co-ordinate for the drawn text.</param>
            <param name="format">The text formatting required.</param>
            <returns>The number of lines output.  This does not consider clipping, so if all text was clipped, this would still return >=1.</returns>
        </member>
        <member name="M:CeGui.Font.DrawText(System.String,CeGui.Rect,System.Single)">
            <summary>
            	Draw text into a specified area of the display using the default colors.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="drawArea">
            	Rect object describing the area of the display where the text is to be rendered.  The text is not clipped to this Rect, but is formatted
            	using this Rect depending upon the option specified in <paramref name="format"/>.
            </param>
            <param name="z">float value specifying the z co-ordinate for the drawn text.</param>
        </member>
        <member name="M:CeGui.Font.DrawText(System.String,CeGui.Vector3,CeGui.Rect,CeGui.ColourRect)">
            <summary>
            	Draw text at the specified location.
            </summary>
            <param name="text">Text to be drawn.</param>
            <param name="position">
            	Vector3 object describing the location for the text.  NB: The position specified here corresponds to the text baseline and not the
            	top of any glyph.  The baseline spacing required can be retrieved by checking the <see cref="P:CeGui.Font.Baseline"/> property.
            </param>
            <param name="clipRect">Rect describing the clipping area for the drawing.  No drawing will occur outside this Rect.</param>
            <param name="colors">
            	ColorRect describing the colors to be applied when drawing the text.  
            	The colors specified in here are applied to each glyph, rather than the text as a whole.
            </param>
        </member>
        <member name="M:CeGui.Font.DrawText(System.String,CeGui.Vector3,CeGui.Rect)">
            <summary>
            	Draw text at the specified location, using the default colors.
            </summary>
            <param name="text">Text to be drawn.</param>
            <param name="position">
            	Vector3 object describing the location for the text.  NB: The position specified here corresponds to the text baseline and not the
            	top of any glyph.  The baseline spacing required can be retrieved by checking the <see cref="P:CeGui.Font.Baseline"/> property.
            </param>
            <param name="clipRect">Rect describing the clipping area for the drawing.  No drawing will occur outside this Rect.</param>
        </member>
        <member name="M:CeGui.Font.DrawTextLine(System.String,CeGui.Vector3,CeGui.Rect,CeGui.ColourRect)">
            <summary>
            	
            </summary>
            <param name="text"></param>
            <param name="position"></param>
            <param name="clipRect"></param>
            <param name="colors"></param>
        </member>
        <member name="M:CeGui.Font.DrawWrappedText(System.String,CeGui.Rect,System.Single,CeGui.Rect,CeGui.HorizontalTextFormat,CeGui.ColourRect)">
            <summary>
            	Draws wrapped text, returning the final line count.
            </summary>
            <param name="text"></param>
            <param name="drawArea"></param>
            <param name="z"></param>
            <param name="clipRect"></param>
            <param name="format"></param>
            <param name="colors"></param>
            <returns>The number of lines in the formatted text.</returns>
        </member>
        <member name="M:CeGui.Font.GetCharAtPixel(System.String,System.Int32,System.Single)">
            <summary>
            	
            </summary>
            <param name="text"></param>
            <param name="startChar"></param>
            <param name="pixel"></param>
            <returns></returns>
        </member>
        <member name="M:CeGui.Font.GetFormattedLineCount(System.String,CeGui.Rect,CeGui.HorizontalTextFormat)">
            <summary>
            	Return the number of lines the given text would be formatted to.
            </summary>
            <remarks>
            	Since text formatting can result in multiple lines of text being output, it can be useful to know
            	how many lines would be output without actually rendering the text.
            </remarks>
            <param name="text">The text to be measured.</param>
            <param name="formatArea">
            	Rect describing the area to be used when formatting the text depending upon the option specified 
            	in <paramref name="format"/>.</param>
            <param name="format">Formatting to consider for the line count.</param>
            <returns>The number of lines produced from the specified formatting.</returns>
        </member>
        <member name="M:CeGui.Font.IsCharacterAvailable(System.Char)">
            <summary>
            	Return whether this Font can currently draw the specified code-point.
            </summary>
            <param name="c">Code point that is the subject of the query.</param>
            <returns>True if this font contains a mapping for code point 'c', false otherwise.</returns>
        </member>
        <member name="M:CeGui.Font.CreateFontGlyphSet(System.String,System.Int32)">
            <summary>
            	Creates a font glyph set from all the characters in the given string.
            </summary>
            <param name="glyphs">String containing all the characters to use for the glyph set.</param>
            <param name="size">SizeF of the font.</param>
        </member>
        <member name="M:CeGui.Font.CreateFontGlyphSet(System.Char,System.Char,System.Int32)">
            <summary>
            	Creates a font glyph set for the given range of characters.
            </summary>
            <param name="firstCodePoint">Starting character.</param>
            <param name="lastCodePoint">Ending character.</param>
            <param name="SizeF">SizeF of the font.</param>
        </member>
        <member name="M:CeGui.Font.GetTextExtent(System.String)">
            <summary>
            	Gets the width in pixels of the specified text.
            </summary>
            <param name="text">Text to measure.</param>
            <returns>Width of the specified string for this font.</returns>
        </member>
        <member name="M:CeGui.Font.Load(System.String)">
            <summary>
            	Load and complete construction of 'this' via an XML file.
            </summary>
            <param name="fileName">The name of the XML file that holds details about the font to create.</param>
        </member>
        <member name="M:CeGui.Font.ToString">
            <summary>
            	Returns a string representation of this Font.
            </summary>
            <returns>String representation of the Font.</returns>
        </member>
        <member name="M:CeGui.Font.Parse(System.String)">
            <summary>
            	Parses the String representation of a Font, and returns the corresponding
            	Font object.
            </summary>
            <param name="data">String representation of a Font.</param>
            <returns>Font object that matches the string representation.</returns>
        </member>
        <member name="F:CeGui.Font.name">
            <summary>
            	Name of this font.
            </summary>
        </member>
        <member name="F:CeGui.Font.fontName">
            <summary>
            The windows FontFamily to use for the font
            </summary>
        </member>
        <member name="F:CeGui.Font.glyphImages">
            <summary>
            	Imageset that holds the glyphs for this font.
            </summary>
        </member>
        <member name="F:CeGui.Font.pointSize">
            <summary>
            	Point SizeF of the font.
            </summary>
        </member>
        <member name="F:CeGui.Font.trueType">
            <summary>
            	True if this font is created from a true type font.
            </summary>
        </member>
        <member name="F:CeGui.Font.ySpacing">
            <summary>
            	Height of font in pixels, a.k.a Line spacing.
            </summary>
        </member>
        <member name="F:CeGui.Font.maxBearingY">
            <summary>
            	Maximum bearingY value (gives required spacing down to baseline).
            </summary>
        </member>
        <member name="F:CeGui.Font.autoScale">
            <summary>
            	true when auto-scaling is enabled.
            </summary>
        </member>
        <member name="F:CeGui.Font.horzScaling">
            <summary>
            	Current horizontal scaling factor.
            </summary>
        </member>
        <member name="F:CeGui.Font.vertScaling">
            <summary>
            	Current vertical scaling factor.
            </summary>
        </member>
        <member name="F:CeGui.Font.nativeHorzRes">
            <summary>
            	Native horizontal resolution for this Imageset.
            </summary>
        </member>
        <member name="F:CeGui.Font.verticalHorzRes">
            <summary>
            	Native vertical resolution for this Imageset.
            </summary>
        </member>
        <member name="F:CeGui.Font.glyphData">
            <summary>
            Information on each of the glyphs in the font
            </summary>
        </member>
        <member name="F:CeGui.Font.glyphs">
            <summary>
            The characters in the font
            </summary>
        </member>
        <member name="P:CeGui.Font.Baseline">
            <summary>
            Return the number of pixels from the top of the highest glyph to the baseline
            </summary>
        </member>
        <member name="P:CeGui.Font.LineSpacing">
            <summary>
            	Return the pixel height for this Font.
            </summary>
            <value>
            	Number of pixels between vertical base lines, 
            	i.e. The minimum pixel space between two lines of text.
            </value>
        </member>
        <member name="P:CeGui.Font.Name">
            <summary>
            	Gets the name of this font object.
            </summary>
        </member>
        <member name="T:CeGui.Font.GlyphData">
            <summary>
            	Struct for hold per-glyph data.
            </summary>
        </member>
        <member name="F:CeGui.Font.GlyphData.Image">
            <summary>
            The bitmap holding an image of the glyph
            </summary>
        </member>
        <member name="F:CeGui.Font.GlyphData.HorizontalAdvance">
            <summary>
            Width of the glyph
            </summary>
        </member>
        <member name="F:CeGui.Font.GlyphData.HorizontalAdvanceUnscaled">
            <summary>
            Currently unused
            </summary>
        </member>
        <member name="F:CeGui.Font.GlyphData.Glyph">
            <summary>
            Unicode value of the Glyph
            </summary>
        </member>
        <member name="T:CeGui.WidgetComponent">
            <summary>
            Class that encapsulates information regarding a sub-widget required for a widget.
            
            TODO: Much more porting work to be done here.
            
            TODO: This is not finished in the slightest!  There will be many changes here...
            </summary>
        </member>
        <member name="F:CeGui.WidgetComponent.area">
            <summary>
            Destination area for the widget (relative to it's parent).
            </summary>
        </member>
        <member name="F:CeGui.WidgetComponent.baseType">
            <summary>
            Type of widget to be created.
            </summary>
        </member>
        <member name="F:CeGui.WidgetComponent.imageryName">
            <summary>
            Name of a WidgetLookFeel to be used for the widget.
            </summary>
        </member>
        <member name="F:CeGui.WidgetComponent.nameSuffix">
            <summary>
            Suffix to apply to the parent Window name to create this widgets unique name.
            </summary>
        </member>
        <member name="F:CeGui.WidgetComponent.vertAlignment">
            <summary>
            Vertical alignment to be used for this widget.
            </summary>
        </member>
        <member name="F:CeGui.WidgetComponent.horzAlignment">
            <summary>
            Horizontal alignment to be used for this widget.
            </summary>
        </member>
        <member name="F:CeGui.WidgetComponent.properties">
            <summary>
            Collection of PropertyInitialisers to be applied the the widget upon creation.
            </summary>
        </member>
        <member name="M:CeGui.WidgetComponent.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="type">Type of widget to be created</param>
            <param name="look">Name of WidgetLookFeel to be used for the widget</param>
            <param name="suffix">Suffix to apply to the parent Window name to create this widget's unique name.</param>
        </member>
        <member name="M:CeGui.WidgetComponent.Create(CeGui.Window)">
            <summary>
            Create an instance of this widget component adding it as a child to the given Window.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:CeGui.WidgetComponent.AddPropertyInitializer(CeGui.PropertyInitialiser)">
            <summary>
            Add an initialiser to the Collection of PropertyInitialisers to be applied the the widget upon creation.
            </summary>
            <param name="initializer">initialise to add</param>
        </member>
        <member name="M:CeGui.WidgetComponent.ClearPropertyInitializers">
            <summary>
            Get rid of all PropertyInitialisers to apply the the widget upon creation.
            </summary>
        </member>
        <member name="M:CeGui.WidgetComponent.Layout(CeGui.Window)">
            <summary>
            
            </summary>
            <param name="owner"></param>
        </member>
        <member name="P:CeGui.WidgetComponent.ComponentArea">
            <summary>
            Area of the widget (relative to it's parent).
            </summary>
        </member>
        <member name="P:CeGui.WidgetComponent.BaseWidgetType">
            <summary>
            Type of widget
            </summary>
        </member>
        <member name="P:CeGui.WidgetComponent.WidgetLookName">
            <summary>
            Name of WidgetLookFeel used for the widget
            </summary>
        </member>
        <member name="P:CeGui.WidgetComponent.WidgetNameSuffix">
            <summary>
            Suffix applied to the parent Window name to create this widget's unique name.
            </summary>
        </member>
        <member name="P:CeGui.WidgetComponent.VerticalAlignment">
            <summary>
            Vertical alignment to be used for this widget.
            </summary>
        </member>
        <member name="P:CeGui.WidgetComponent.HorizontalAlignment">
            <summary>
            Horizontal alignment to be used for this widget.
            </summary>
        </member>
        <member name="T:CeGui.FrameComponent">
             <summary>
             Class that encapsulates information for a frame with background (9 images in total)
            
             Corner images are always drawn at their natural SizeF, edges are stretched between the corner
             pieces for a particular edge, the background image will cover the inner Rect formed by
             the edge images and can be stretched or tiled in either dimension.
             </summary>
        </member>
        <member name="F:CeGui.FrameComponent.vertFormatting">
            <summary>
            Vertical formatting to be applied when rendering the background for the component.
            </summary>
        </member>
        <member name="F:CeGui.FrameComponent.horzFormatting">
            <summary>
            Horizontal formatting to be applied when rendering the background for the component.
            </summary>
        </member>
        <member name="F:CeGui.FrameComponent.frameImages">
            <summary>
            Array that holds the assigned images.
            </summary>
        </member>
        <member name="M:CeGui.FrameComponent.GetImage(CeGui.FrameImageComponent)">
            <summary>
            Return the Image object that will be drawn by this FrameComponent for a specified frame part.
            </summary>
            <param name="part">One of the FrameImageComponent enumerated values specifying the component image to be accessed.</param>
            <returns>Image object</returns>
        </member>
        <member name="M:CeGui.FrameComponent.SetImage(CeGui.FrameImageComponent,CeGui.Image)">
            <summary>
            Set the Image that will be drawn by this ImageryComponent.
            </summary>
            <param name="part">One of the FrameImageComponent enumerated values specifying the component image to be accessed.</param>
            <param name="image">Pointer to the Image object to be drawn by this FrameComponent.</param>
        </member>
        <member name="M:CeGui.FrameComponent.SetImage(CeGui.FrameImageComponent,System.String,System.String)">
            <summary>
            Set the Image that will be drawn by this FrameComponent.
            </summary>
            <param name="part">One of the FrameImageComponent enumerated values specifying the component image to be accessed.</param>
            <param name="imageset">String holding the name of the Imagset that contains the Image to be rendered.</param>
            <param name="image">String holding the name of the Image to be rendered.</param>
        </member>
        <member name="P:CeGui.FrameComponent.BackgroundVerticalFormatting">
            <summary>
            Gets/Sets the current vertical formatting setting for this FrameComponent.
            </summary>
        </member>
        <member name="P:CeGui.FrameComponent.BackgroundHorizontalFormatting">
            <summary>
            Gets/Sets the current horizontal formatting setting for this FrameComponent.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:CeGui.WidgetLookFeel" -->
        <member name="M:CeGui.WidgetLookFeel.#ctor">
            <summary>Initializes the look and feel informations</summary>
        </member>
        <member name="M:CeGui.WidgetLookFeel.#ctor(System.String)">
            <summary>Initializes the look and feel informations with the given name</summary>
            <param name="name">Name to assign to this widget look and feel</param>
        </member>
        <member name="M:CeGui.WidgetLookFeel.GetStateImagery(System.String)">
            <summary>Returns the StateImagery object for the specified state</summary>
            <param name="state">State for which to get the imagery object</param>
            <returns>StateImagery object for the requested state</returns>
        </member>
        <member name="M:CeGui.WidgetLookFeel.GetImagerySection(System.String)">
            <summary>Returns the ImagerySection object with the specified name</summary>
            <param name="section">Name of the section to return</param>
            <returns>ImagerySection object with the specified name</returns>
        </member>
        <member name="M:CeGui.WidgetLookFeel.AddImagerySection(CeGui.ImagerySection)">
            <summary>Add an ImagerySection to the WidgetLookFeel</summary>
            <param name="section">ImagerySection object to be added</param>
        </member>
        <member name="M:CeGui.WidgetLookFeel.AddWidgetComponent(CeGui.WidgetComponent)">
            <summary>Add a WidgetComponent to the WidgetLookFeel</summary>
            <param name="widget">WidgetComponent object to be added</param>
        </member>
        <member name="M:CeGui.WidgetLookFeel.addStateSpecification(CeGui.StateImagery)">
            <summary>Add a state specification (StateImagery object) to the WidgetLookFeel</summary>
            <param name="state">StateImagery object to be added</param>
        </member>
        <member name="M:CeGui.WidgetLookFeel.AddPropertyInitialiser(CeGui.PropertyInitialiser)">
            <summary>Add a property initialiser to the WidgetLookFeel</summary>
            <param name="initialiser">PropertyInitialiser object to be added</param>
        </member>
        <member name="M:CeGui.WidgetLookFeel.ClearImagerySections">
            <summary>Clear all ImagerySections from the WidgetLookFeel</summary>
        </member>
        <member name="M:CeGui.WidgetLookFeel.ClearWidgetComponents">
            <summary>Clear all WidgetComponents from the WidgetLookFeel</summary>
        </member>
        <member name="M:CeGui.WidgetLookFeel.ClearStateSpecifications">
            <summary>Clear all StateImagery objects from the WidgetLookFeel</summary>
        </member>
        <member name="M:CeGui.WidgetLookFeel.ClearPropertyInitialisers">
            <summary>Clear all PropertyInitialiser objects from the WidgetLookFeel</summary>
        </member>
        <member name="M:CeGui.WidgetLookFeel.InitialiseWidget(CeGui.Window)">
            <summary>
              Initialise the given window using PropertyInitialsers and component widgets
              specified for this WidgetLookFeel
            </summary>
            <param name="widget">Window based object to be initialised</param>
        </member>
        <member name="F:CeGui.WidgetLookFeel.lookName">
            <summary>Name of this WidgetLookFeel</summary>
        </member>
        <member name="F:CeGui.WidgetLookFeel.imagerySections">
            <summary>Collection of ImagerySection objects</summary>
        </member>
        <member name="F:CeGui.WidgetLookFeel.childWidgets">
            <summary>Collection of WidgetComponent objects</summary>
        </member>
        <member name="F:CeGui.WidgetLookFeel.stateImagery">
            <summary>Collection of StateImagery objects</summary>
        </member>
        <member name="F:CeGui.WidgetLookFeel.properties">
            <summary>Collection of PropertyInitialser objects</summary>
        </member>
        <member name="F:CeGui.WidgetLookFeel.namedAreas">
            <summary>Collection of NamedArea objects</summary>
        </member>
        <member name="F:CeGui.WidgetLookFeel.propertyDefinitions">
            <summary>Collection of PropertyDefinition objects</summary>
        </member>
        <member name="F:CeGui.WidgetLookFeel.propertyLinkDefinitions">
            <summary>Collection of PropertyLinkDefinition objects</summary>
        </member>
        <member name="P:CeGui.WidgetLookFeel.Name">
            <summary>Return the name of the widget look</summary>
            <value>String object holding the name of the WidgetLookFeel</value>
        </member>
        <member name="T:CeGui.RenderCache">
             <summary>
             Class that acts as a cache for images that need to be rendered.
            
             This is in many ways an optimisation cache, it allows a full image redraw
             to occur while limiting the amount of information that needs to be re-calculated.
             <para>Basically, unless the actual images (or their SizeF) change, or the colours (or alpha) change
             then imagery cached in here will suffice for a full redraw.  The reasoning behind this is that
             when some window underneath window 'X' changes, a full image redraw is required by the
             renderer, however, since window 'X' is unchanged, performing a total recalculation of all
             imagery is very wasteful, and so we use this cache to limit such waste.</para>
             <para>As another example, when a window is simply moved, there is no need to perform a total imagery
             recalculation; we can still use the imagery cached here since it is position independant.</para>
             </summary>
        </member>
        <member name="F:CeGui.RenderCache.imageryList">
            <summary>
            Collection of ImageInfo structs.
            </summary>
        </member>
        <member name="F:CeGui.RenderCache.textList">
            <summary>
            Collection of TextInfo structs.
            </summary>
        </member>
        <member name="M:CeGui.RenderCache.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CeGui.RenderCache.Render(System.Drawing.PointF,System.Single,CeGui.Rect)">
            <summary>
            Send the contents of the cache to the Renderer.
            </summary>
            <param name="basePos">Point that describes a screen offset that cached imagery will be rendered relative to.</param>
            <param name="baseZ">Z value that cached imagery will use as a base figure when calculating final z values.</param>
            <param name="clipper">Rect object describing a Rect to which imagery will be clipped.</param>
        </member>
        <member name="M:CeGui.RenderCache.ClearCachedImagery">
            <summary>
            Erase any stored image information.
            </summary>
        </member>
        <member name="M:CeGui.RenderCache.CacheImage(CeGui.Image,CeGui.Rect,System.Single,CeGui.ColourRect,CeGui.Rect,System.Boolean)">
            <summary>
            Add an image to the cache.
            </summary>
            <param name="image">Image object to be cached.</param>
            <param name="destArea">
            Destination area over which the Image object will be rendered.  This area should be position
            independant; so position (0,0) will be to top-left corner of whatever it is you're rendering
            (like a Window for example).
            </param>
            <param name="zOffset">Zero based z offset for this image.  Allows imagery to be layered.</param>
            <param name="colors">ColourRect object describing the colours to be applied when rendering this image.</param>
            <param name="clipper"></param>
            <param name="clipToDisplay"></param>
        </member>
        <member name="M:CeGui.RenderCache.CacheText(System.String,CeGui.Font,CeGui.TextFormatting,CeGui.Rect,System.Single,CeGui.ColourRect,CeGui.Rect,System.Boolean)">
            <summary>
            Add a text to the cache.
            </summary>
            <param name="text">String object to be cached.</param>
            <param name="font">Font to be used when rendering.</param>
            <param name="format">TextFormatting value specifying the formatting to use when rendering.</param>
            <param name="destArea">
            Destination area over which the Image object will be rendered.  This area should be position
            independant; so position (0,0) will be to top-left corner of whatever it is you're rendering
            (like a Window for example).
            </param>
            <param name="zOffset">Zero based z offset for this image.  Allows imagery to be layered.</param>
            <param name="cols">ColorRect object describing the colours to be applied when rendering this image.</param>
            <param name="clipper"></param>
            <param name="clipToDisplay"></param>
        </member>
        <member name="P:CeGui.RenderCache.HasCachedImagery">
            <summary>
            Return whether the cache contains anything to draw.
            </summary>
            <value>
            - true if the cache contains information about images to be drawn.
            - false if the cache is empty.
            </value>
        </member>
        <member name="T:CeGui.RenderCache.ImageInfo">
            <summary>
            internal struct that holds info about a single image to be drawn.
            </summary>
        </member>
        <member name="T:CeGui.RenderCache.TextInfo">
            <summary>
            internal struct that holds info about text to be drawn.
            </summary>
        </member>
        <member name="T:CeGui.Logger">
            <summary>
            	Class that implements logging for the GUI system.
            </summary>
        </member>
        <member name="F:CeGui.Logger.loggingLevel">
            <summary>
            	Level of logging that will be written to the log file.
            </summary>
        </member>
        <member name="F:CeGui.Logger.writer">
            <summary>
            	Stream writer used to output the log messages.
            </summary>
        </member>
        <member name="F:CeGui.Logger.instance">
            <summary>
            	Singlton instance of this class.
            </summary>
        </member>
        <member name="M:CeGui.Logger.#ctor(System.String)">
            <summary>
            	Constructor.
            </summary>
            <param name="name">Name of the log file to create.</param>
        </member>
        <member name="M:CeGui.Logger.#ctor(System.String,System.Boolean)">
            <summary>
            	Constructor.
            </summary>
            <param name="name">Name of the log file to create.</param>
            <param name="append">
            	If true, events will be added to the end of the current file.
            	If false, the current contents of the file will be discarded.
            </param>
        </member>
        <member name="M:CeGui.Logger.LogEvent(System.String)">
            <summary>
            	Adds an event to the log.
            </summary>
            <remarks>Uses <see cref="!:LoggingLevel.Standard"/> by default.</remarks>
            <param name="message">Message to be added to the log.</param>
        </member>
        <member name="M:CeGui.Logger.LogEvent(System.String,CeGui.LoggingLevel)">
            <summary>
            	Adds an event to the log.
            </summary>
            <param name="message">Message to be added to the log.</param>
            <param name="level"></param>
        </member>
        <member name="M:CeGui.Logger.Dispose">
            <summary>
            	Ensures the log file has been closed properly.
            </summary>
        </member>
        <member name="P:CeGui.Logger.Instance">
            <summary>
            	Gets the singleton GuiSystem instance.
            </summary>
            <value></value>
        </member>
        <member name="P:CeGui.Logger.LoggingLevel">
            <summary>
            	Gets/Set the level of logging information that will get out to the log file.
            </summary>
            <value>Level of logging to do.</value>
        </member>
        <member name="T:CeGui.TextUtil">
            <summary>
            Summary description for TextUtil.
            </summary>
        </member>
        <member name="F:CeGui.TextUtil.DefaultWhitespace">
            <summary>
            	The default set of whitespace.
            </summary>
        </member>
        <member name="F:CeGui.TextUtil.DefaultAlphanumerical">
            <summary>
            	The default set of alpha-numeric characters.
            </summary>
        </member>
        <member name="F:CeGui.TextUtil.DefaultWrapDelimiters">
            <summary>
            	The default set of word-wrap delimiters.
            </summary>
        </member>
        <member name="M:CeGui.TextUtil.#ctor">
            <summary>
            	Private: meant to be a static class.
            </summary>
        </member>
        <member name="M:CeGui.TextUtil.GetNextWord(System.String,System.Int32,System.String)">
            <summary>
            	Returns a String containing the the next word in a String.
            </summary>
            <remarks>
            	This method returns a String containing the word, starting at <paramref name="startIndex"/>, 
            	of <paramref name="text"/> as delimited by the characters specified in <paramref name="delimeters"/> 
            	(or the ends of the input string).
            </remarks>
            <param name="text">Text to test.</param>
            <param name="startIndex">Index into <paramref name="text"/> where the search for the next word is to begin.</param>
            <param name="delimeters">
            	String containing the set of delimiter code points to be used when determining the start and end
            	points of a word in <paramref name="text"/>.</param>
            <returns>
            	String object containing the next <paramref name="delimeters"/> delimited word from 
            	<paramref name="text"/>, starting at index <paramref name="startIndex"/>.
            </returns>
        </member>
        <member name="M:CeGui.TextUtil.GetNextWordStartIdx(System.String,System.Int32)">
            <summary>
            	Return the index of the first character of the word after the word at 'index'.
            </summary>
            <param name="str">String containing text.</param>
            <param name="index">Index into 'str' where search is to begin.</param>
            <returns>
            	Index into 'str' which marks the begining of the word at after the word at 'index'.
            	If 'index' is within the last word, then the return is the last index in 'str'.
            </returns>
        </member>
        <member name="M:CeGui.TextUtil.GetWordStartIdx(System.String,System.Int32)">
            <summary>
            	Return the index of the first character of the word at 'index'.
            </summary>
            <param name="str">String containing text.</param>
            <param name="index">Index into 'str' were search of work is to begin.</param>
            <returns>Index into 'str' which marks the beginning of the work at 'index'.</returns>
        </member>
        <member name="M:CeGui.TextUtil.IndexNotOf(System.String,System.String,System.Int32)">
            <summary>
            	
            </summary>
            <param name="delimiters"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="T:CeGui.SectionSpecification">
            <summary>
            Class that represents a simple 'link' to an ImagerySection.
            This class enables sections to be easily re-used, by different states and/or layers, by allowing
            sections to be specified by name rather than having mutiple copies of the same thing all over the place.
            </summary>
        </member>
        <member name="F:CeGui.SectionSpecification.owner">
            <summary>
            Name of the WidgetLookFeel containing the required section.
            </summary>
        </member>
        <member name="F:CeGui.SectionSpecification.sectionName">
            <summary>
            Name of the required section within the specified WidgetLookFeel.
            </summary>
        </member>
        <member name="F:CeGui.SectionSpecification.colorsOverride">
            <summary>
            Colours to use when override is enabled.
            </summary>
        </member>
        <member name="F:CeGui.SectionSpecification.usingColorOverride">
            <summary>
            true if colour override is enabled.
            </summary>
        </member>
        <member name="F:CeGui.SectionSpecification.colorPropertyName">
            <summary>
            name of property to fetch colours from.
            </summary>
        </member>
        <member name="F:CeGui.SectionSpecification.colorPropertyIsRect">
            <summary>
            true if the colour property will fetch a full ColourRect.
            </summary>
        </member>
        <member name="M:CeGui.SectionSpecification.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="owner">String holding the name of the WidgetLookFeel object that contains the target section.</param>
            <param name="sectionName">String holding the name of the target section.</param>
        </member>
        <member name="M:CeGui.SectionSpecification.#ctor(System.String,System.String,CeGui.ColourRect)">
            <summary>
            Constructor
            </summary>
            <param name="owner">String holding the name of the WidgetLookFeel object that contains the target section.</param>
            <param name="sectionName">String holding the name of the target section.</param>
            <param name="colors">Override colours to be used (modulates sections master colours).</param>
        </member>
        <member name="M:CeGui.SectionSpecification.Render(CeGui.Window,System.Single,CeGui.ColourRect,CeGui.Rect,System.Boolean)">
            <summary>
            Render the section specified by this SectionSpecification.
            </summary>
            <param name="srcWindow">Window object to be used when calculating pixel values from BaseDim values.</param>
            <param name="base_z">base z co-ordinate to use for all imagery in the linked section.</param>
            <param name="modcols"></param>
            <param name="clipper"></param>
            <param name="clipToDisplay"></param>
        </member>
        <member name="M:CeGui.SectionSpecification.Render(CeGui.Window,System.Single,CeGui.ColourRect,CeGui.Rect)">
            <summary>
            Render the section specified by this SectionSpecification.
            </summary>
            <param name="srcWindow">Window object to be used when calculating pixel values from BaseDim values.</param>
            <param name="base_z">base z co-ordinate to use for all imagery in the linked section.</param>
            <param name="modcols"></param>
            <param name="clipper"></param>
        </member>
        <member name="M:CeGui.SectionSpecification.Render(CeGui.Window,System.Single,CeGui.ColourRect)">
            <summary>
            Render the section specified by this SectionSpecification.
            </summary>
            <param name="srcWindow">Window object to be used when calculating pixel values from BaseDim values.</param>
            <param name="base_z">base z co-ordinate to use for all imagery in the linked section.</param>
            <param name="modcols"></param>
        </member>
        <member name="M:CeGui.SectionSpecification.Render(CeGui.Window,System.Single)">
            <summary>
            Render the section specified by this SectionSpecification.
            </summary>
            <param name="srcWindow">Window object to be used when calculating pixel values from BaseDim values.</param>
            <param name="base_z">base z co-ordinate to use for all imagery in the linked section.</param>
        </member>
        <member name="M:CeGui.SectionSpecification.Render(CeGui.Window,CeGui.Rect,System.Single,CeGui.ColourRect,CeGui.Rect,System.Boolean)">
            <summary>
            Render the section specified by this SectionSpecification.
            </summary>
            <param name="srcWindow">Window object to be used when calculating pixel values from BaseDim values.</param>
            <param name="baseRect">Rect object to be used when calculating pixel values from BaseDim values.</param>
            <param name="base_z">base z co-ordinate to use for all imagery in the linked section.</param>
            <param name="modcols"></param>
            <param name="clipper"></param>
            <param name="clipToDisplay"></param>
        </member>
        <member name="M:CeGui.SectionSpecification.Render(CeGui.Window,CeGui.Rect,System.Single,CeGui.ColourRect,CeGui.Rect)">
            <summary>
            Render the section specified by this SectionSpecification.
            </summary>
            <param name="srcWindow">Window object to be used when calculating pixel values from BaseDim values.</param>
            <param name="baseRect">Rect object to be used when calculating pixel values from BaseDim values.</param>
            <param name="base_z">base z co-ordinate to use for all imagery in the linked section.</param>
            <param name="modcols"></param>
            <param name="clipper"></param>
        </member>
        <member name="M:CeGui.SectionSpecification.Render(CeGui.Window,CeGui.Rect,System.Single,CeGui.ColourRect)">
            <summary>
            Render the section specified by this SectionSpecification.
            </summary>
            <param name="srcWindow">Window object to be used when calculating pixel values from BaseDim values.</param>
            <param name="baseRect">Rect object to be used when calculating pixel values from BaseDim values.</param>
            <param name="base_z">base z co-ordinate to use for all imagery in the linked section.</param>
            <param name="modcols"></param>
        </member>
        <member name="M:CeGui.SectionSpecification.Render(CeGui.Window,CeGui.Rect,System.Single)">
            <summary>
            Render the section specified by this SectionSpecification.
            </summary>
            <param name="srcWindow">Window object to be used when calculating pixel values from BaseDim values.</param>
            <param name="baseRect">Rect object to be used when calculating pixel values from BaseDim values.</param>
            <param name="base_z">base z co-ordinate to use for all imagery in the linked section.</param>
        </member>
        <member name="M:CeGui.SectionSpecification.InitColorRectForOverride(CeGui.Window,CeGui.ColourRect)">
             <summary>
             Helper method to initialise a ColourRect with appropriate values according to the way the
             section sepcification is set up.
            
             This will try and get values from multiple places:
             	- a property attached to \a wnd
             	- the integral d_coloursOverride values.
             	- or default to colour(1,1,1,1);
             </summary>
             <param name="wnd"></param>
             <param name="cr"></param>
        </member>
        <member name="P:CeGui.SectionSpecification.OwnerWidgetLookFeel">
            <summary>
            Return the name of the WidgetLookFeel object containing the target section.
            </summary>
        </member>
        <member name="P:CeGui.SectionSpecification.SectionName">
            <summary>
            Return the name of the target ImagerySection.
            </summary>
        </member>
        <member name="P:CeGui.SectionSpecification.OverrideColors">
            <summary>
            Return the current override colours.
            </summary>
        </member>
        <member name="P:CeGui.SectionSpecification.UsingOverrideColors">
            <summary>
            return whether the use of override colours is enabled on this SectionSpecification.
            </summary>
        </member>
        <member name="P:CeGui.SectionSpecification.OverrideColorsPropertySource">
            <summary>
            Set the name of the property where override colour values can be obtained.
            </summary>
        </member>
        <member name="P:CeGui.SectionSpecification.OverrideColorsPropertyIsColorRect">
            <summary>
            Set whether the override colours property source represents a full ColourRect.
            </summary>
        </member>
        <member name="T:CeGui.NamedArea">
            <summary>
            NamedArea defines an area for a component which may later be obtained
            and referenced by a name unique to the WidgetLook holding the NamedArea.
            </summary>
        </member>
        <member name="M:CeGui.NamedArea.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:CeGui.NamedArea.Name">
            <summary>
            Gets the name of this NamedArea.
            </summary>
        </member>
        <member name="P:CeGui.NamedArea.Area">
            <summary>
            Gets/Sets the <see cref="T:CeGui.ComponentArea"/> of this NamedArea
            </summary>
        </member>
        <member name="T:CeGui.MouseCursor">
            <summary>
            	Class that allows access to the GUI system mouse cursor.
            </summary>
            <remarks>
            	The MouseCursor provides functionality to access the position and imagery of the 
            	mouse cursor / pointer.
            </remarks>
            In sync with original version as of:
            .h:		1.2
            .cpp:	1.2 
        </member>
        <member name="F:CeGui.MouseCursor.cursorImage">
            <summary>
            	Image that is currently set as the mouse cursor.
            </summary>
        </member>
        <member name="F:CeGui.MouseCursor.position">
            <summary>
            	Current location of the cursor.
            </summary>
        </member>
        <member name="F:CeGui.MouseCursor.isVisible">
            <summary>
            	True if the cursor will be drawn, else false.
            </summary>
        </member>
        <member name="F:CeGui.MouseCursor.constraints">
            <summary>
            	Specifies the area (in screen pixels) that the mouse can move around in.
            </summary>
        </member>
        <member name="F:CeGui.MouseCursor.instance">
            <summary>
            	Singlton instance of this class.
            </summary>
        </member>
        <member name="M:CeGui.MouseCursor.#ctor">
            <summary>
            	Default constructor.
            </summary>
        </member>
        <member name="M:CeGui.MouseCursor.Draw">
            <summary>
            	Makes the cursor draw itself.
            </summary>
        </member>
        <member name="M:CeGui.MouseCursor.Hide">
            <summary>
            	Hides the mouse cursor.
            </summary>
        </member>
        <member name="M:CeGui.MouseCursor.OffsetPosition(System.Drawing.PointF)">
            <summary>
            	Offset the mouse cursor position by the deltas specified in <paramref name="offset"/>.
            </summary>
            <param name="offset">Point which describes the amount to move the cursor in each axis.</param>
        </member>
        <member name="M:CeGui.MouseCursor.SetImage(System.String,System.String)">
            <summary>
            	Set the current mouse cursor image.
            </summary>
            <param name="imagesetName">
            	The name of the <see cref="T:CeGui.Imageset"/> that contains the desired <see cref="T:CeGui.Image"/>.
            </param>
            <param name="imageName">Name of a desired image within the specified image set.</param>
            <exception cref="T:CeGui.UnknownObjectException">
            	Thrown if <paramref name="imagesetName"/> is not known, or if <paramref name="imagesetName"/> 
            	contains no <see cref="T:CeGui.Image"/> named <paramref name="imageName"/>.
            </exception>
        </member>
        <member name="M:CeGui.MouseCursor.SetImage(CeGui.Image)">
            <summary>
            	Set the current mouse cursor image.
            </summary>
            <param name="image">Reference to an existing <see cref="T:CeGui.Image"/> object to use.</param>
        </member>
        <member name="M:CeGui.MouseCursor.Show">
            <summary>
            	Shows the mouse cursor.
            </summary>
        </member>
        <member name="M:CeGui.MouseCursor.ConstrainPosition">
            <summary>
            	Checks the mouse cursor position is within the current 'constrain' Rect and adjusts as required.
            </summary>
        </member>
        <member name="P:CeGui.MouseCursor.Instance">
            <summary>
            	Gets the singleton class instance.
            </summary>
            <value></value>
        </member>
        <member name="P:CeGui.MouseCursor.ConstraintArea">
            <summary>
            	Gets/Sets the current constraint area of the mouse cursor.
            </summary>
            <value><see cref="T:CeGui.Rect"/> object describing the active area that the mouse cursor is constrained to.</value>
        </member>
        <member name="P:CeGui.MouseCursor.IsVisible">
            <summary>
            	Returns whether the mouse cursor is visible.
            </summary>
            <value>True if the cursor is visible, false otherwise.</value>
        </member>
        <member name="P:CeGui.MouseCursor.Position">
            <summary>
            	Gets/Sets the current mouse cursor position.
            </summary>
            <value><see cref="T:System.Drawing.Point"/> object describing the mouse cursor position.</value>
        </member>
        <member name="T:CeGui.URect">
            <summary>Area rectangle class built using unified dimensions (UDims)</summary>
        </member>
        <member name="F:CeGui.URect.Zero">
            <summary>A unified rectangle that has been initialized to zero</summary>
        </member>
        <member name="M:CeGui.URect.#ctor(CeGui.UVector2,CeGui.UVector2)">
            <summary>Initializes a new unified rectangle</summary>
            <param name="min">Minimum coordinates to store in the rectangle</param>
            <param name="max">Maximum coordinates to store in the rectangle</param>
        </member>
        <member name="M:CeGui.URect.#ctor(CeGui.UDim,CeGui.UDim,CeGui.UDim,CeGui.UDim)">
            <summary>Initializes a new unified rectangle</summary>
            <param name="left">Left coordinate of the rectangle</param>
            <param name="top">Top coordinate of the rectangle</param>
            <param name="right">Right coordinate of the rectangle</param>
            <param name="bottom">Bottom coordinate of the rectangle</param>
        </member>
        <member name="M:CeGui.URect.AsAbsolute(System.Drawing.SizeF)">
            <summary>Converts the unified rectangle into an absolute rectangle</summary>
            <param name="bounds">Extents into which to project the unified rectangle</param>
            <returns>The absolute rectangle described by the unified rectangle</returns>
        </member>
        <member name="M:CeGui.URect.AsRelative(System.Drawing.SizeF)">
            <summary>Converts the unified rectangle into a relative rectangle</summary>
            <param name="bounds">Extents into which to project the unified rectangle</param>
            <returns>The relative rectangle described by the unified rectangle</returns>
        </member>
        <member name="M:CeGui.URect.Offset(CeGui.UVector2)">
            <summary>Moves the unified rectangle by the given offset</summary>
            <param name="offset">Offset to move by</param>
        </member>
        <member name="M:CeGui.URect.Unoffset(CeGui.UVector2)">
            <summary>Moves the unified rectangle against the given offset</summary>
            <param name="offset">Offset to move against</param>
        </member>
        <member name="M:CeGui.URect.op_Addition(CeGui.URect,CeGui.UVector2)">
            <summary>Moves the unified rectangle by the given offset</summary>
            <param name="rectangle">Rectangle to move</param>
            <param name="offset">Offset to move by</param>
            <returns>The unified rectangle moved by the given offset</returns>
        </member>
        <member name="M:CeGui.URect.op_Subtraction(CeGui.URect,CeGui.UVector2)">
            <summary>Moves the unified rectangle against the given offset</summary>
            <param name="rectangle">Rectangle to move</param>
            <param name="offset">Offset to move against</param>
            <returns>The unified rectangle moved against the given offset</returns>
        </member>
        <member name="M:CeGui.URect.op_Inequality(CeGui.URect,CeGui.URect)">
            <summary>Checks two unified rectangles for inequality</summary>
            <param name="first">First rectangle to be compared</param>
            <param name="second">Second rectangle to be compared</param>
            <returns>True if the instances differ or exactly one reference is set to null</returns>
        </member>
        <member name="M:CeGui.URect.op_Equality(CeGui.URect,CeGui.URect)">
            <summary>Checks two unified rectangles for equality</summary>
            <param name="first">First rectangle to be compared</param>
            <param name="second">Second rectangle to be compared</param>
            <returns>True if both instances are equal or both references are null</returns>
        </member>
        <member name="M:CeGui.URect.Equals(System.Object)">
            <summary>Checks whether another instance is equal to this instance</summary>
            <param name="other">Other instance to compare to this instance</param>
            <returns>True if the other instance is equal to this instance</returns>
        </member>
        <member name="M:CeGui.URect.Equals(CeGui.URect)">
            <summary>Checks whether another instance is equal to this instance</summary>
            <param name="other">Other instance to compare to this instance</param>
            <returns>True if the other instance is equal to this instance</returns>
        </member>
        <member name="M:CeGui.URect.GetHashCode">
            <summary>Obtains a hash code of this instance</summary>
            <returns>The hash code of the instance</returns>
        </member>
        <member name="F:CeGui.URect.Min">
            <summary>The minimum coordinates of the rectangle</summary>
        </member>
        <member name="F:CeGui.URect.Max">
            <summary>The maximum coordinates of the rectangle</summary>
        </member>
        <member name="P:CeGui.URect.Position">
            <summary>Location of the rectangle</summary>
        </member>
        <member name="P:CeGui.URect.Size">
            <summary>Size of the rectangle</summary>
        </member>
        <member name="P:CeGui.URect.Width">
            <summary>Width of the rectangle</summary>
        </member>
        <member name="P:CeGui.URect.Height">
            <summary>Height of the rectangle</summary>
        </member>
    </members>
</doc>
