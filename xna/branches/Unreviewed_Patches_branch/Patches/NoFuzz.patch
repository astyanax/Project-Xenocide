Index: Content/Content.contentproj
===================================================================
--- Content/Content.contentproj	(revision 1854)
+++ Content/Content.contentproj	(working copy)
@@ -537,6 +537,13 @@
       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
     </None>
   </ItemGroup>
+  <ItemGroup>
+    <Compile Include="Textures\Geoscape\IconSpriteMap.png">
+      <Name>IconSpriteMap</Name>
+      <Importer>TextureImporter</Importer>
+      <Processor>TextureProcessor</Processor>
+    </Compile>
+  </ItemGroup>
   <Import Project="$(MSBuildExtensionsPath)\Microsoft\XNA Game Studio\v3.0\Microsoft.Xna.GameStudio.ContentPipeline.targets" />
   <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
        Other similar extension points exist, see Microsoft.Common.targets.
Index: Content/Textures/Geoscape/iconSpriteMap.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: Content\Textures\Geoscape\iconSpriteMap.png
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Index: Source/UI/Scenes/Geoscape/GeoHud.cs
===================================================================
--- Source/UI/Scenes/Geoscape/GeoHud.cs	(revision 0)
+++ Source/UI/Scenes/Geoscape/GeoHud.cs	(revision 0)
@@ -0,0 +1,508 @@
+ï»¿#region Copyright
+/*
+--------------------------------------------------------------------------------
+This source file is part of Xenocide
+  by  Project Xenocide Team
+
+For the latest info on Xenocide, see http://www.projectxenocide.com/
+
+This work is licensed under the Creative Commons
+Attribution-NonCommercial-ShareAlike 2.5 License.
+
+To view a copy of this license, visit
+http://creativecommons.org/licenses/by-nc-sa/2.5/
+or send a letter to Creative Commons, 543 Howard Street, 5th Floor,
+San Francisco, California, 94105, USA.
+--------------------------------------------------------------------------------
+*/
+
+/*
+* @file BaseInfoScreen.cs
+* @date Created: 2009/10/20
+* @author File creator: John Perrin
+* @author Credits: none
+*/
+#endregion
+
+#region Using Statements
+using System;
+using System.Collections.Generic;
+using System.Text;
+using System.Diagnostics;
+
+
+using Microsoft.Xna.Framework;
+using Microsoft.Xna.Framework.Graphics;
+using Microsoft.Xna.Framework.Content;
+using Microsoft.Xna.Framework.Input;
+
+using ProjectXenocide.Utils;
+using ProjectXenocide.Model;
+using ProjectXenocide.Model.Geoscape;
+using ProjectXenocide.Model.Geoscape.Outposts;
+using ProjectXenocide.Model.Geoscape.Vehicles;
+using ProjectXenocide.Model.Geoscape.AI;
+using ProjectXenocide.UI.Scenes.Common;
+
+
+
+
+#endregion
+
+namespace ProjectXenocide.UI.Scenes.Geoscape
+{
+    /// <summary>
+    /// Used to draw an icon representation of a point of interest on the geoscape
+    /// </summary>
+    class GeoHud
+    {
+        #region privates
+        SpriteBatch hudSprites;
+       
+        MouseState mouseState;
+        SpriteFont hudFont;
+
+        String selectedItem = "";
+        string TempSelectedItem;
+        string tipText = string.Empty;
+    
+        Texture2D iconTex;
+        SpriteMap iconSprites;
+        Texture2D textBackGround;
+        Texture2D textBorder;
+
+        private const float OCCLUDEDISTANCE = 1.2f;
+        #endregion
+
+        /// <summary>
+        /// This holds a list of all icons so far detected in the current ron on the geoscape
+        /// </summary>
+        Dictionary<string, IconState> iconStates = new Dictionary<string, IconState>();
+
+        /// <summary>
+        /// A list of the different icon typs that can be drawn
+        /// </summary>
+        public enum hudIconTypes
+        {
+            XCorpBase = 0,
+            XCorpCraft = 2,
+            UfoFly = 4,
+            UfoLand = 6,
+            UfoCrash= 8,
+            TerrorSite = 10,
+            AlienBase = 12
+        }
+        /// <summary>
+        /// Represnets the cells in the icon spritemaps
+        /// </summary>
+        private enum hudIcons
+        {
+            XcomBaseInner,
+            XcomBaseOuter,
+            XcomCraftInner,
+            XcomCraftOuter,
+            UFOFlyInner,
+            UFOFlyOuter,
+            UFOLandInner,
+            UFOLandOuter,
+            UFOCrashInner,
+            UFOCrashOuter,
+            TerrorInner,
+            TerrorOuter,
+            AlienBaseInner,
+            AlienBaseOuter,
+            Free1,
+            Free2
+        }
+
+        /// <summary>
+        /// Load the graphic content of the scene
+        /// </summary>
+        /// <param name="content">content manager that fetches the content</param>
+        /// <param name="device">the display</param>
+        public void LoadContent(ContentManager content, GraphicsDevice device)
+        {
+            hudSprites = new SpriteBatch(device);
+            iconTex = content.Load<Texture2D>(@"Content\Textures\Geoscape\IconSpriteMap");
+            hudFont = content.Load<SpriteFont>(@"Content\SpriteFont1");
+            iconSprites = new SpriteMap(iconTex,4,4);
+            textBackGround = new Texture2D(device, 1, 1, 1, TextureUsage.None, SurfaceFormat.Color);
+            textBorder = new Texture2D(device, 1, 1, 1, TextureUsage.None, SurfaceFormat.Color);
+            
+            // create a semi-transparent background texture for the textbackgorund.
+            Color[] rgba = new Color[1];
+            rgba[0] = new Color(Color.DarkCyan , 0.5f);
+            textBackGround.SetData<Color>(rgba);
+
+            // create a slighly-transparent border texture for the textbackgorund.
+            rgba = new Color[1];
+            rgba[0] = new Color(Color.Cyan, 0.9f);
+            textBorder.SetData<Color>(rgba);
+        }
+
+        /// <summary>
+        /// Starts the icon rendering process
+        /// </summary>
+        public void Begin()
+        {
+            mouseState = Mouse.GetState();
+            TempSelectedItem = string.Empty;
+            tipText = string.Empty;
+            hudSprites.Begin();
+        }
+
+        /// <summary>
+        /// finishes the icon rendering process
+        /// </summary>
+        /// <returns></returns>
+        public string End()
+        {
+            selectedItem = TempSelectedItem;
+            hudSprites.End();
+            return tipText;
+        }
+
+        #region Icon Methods
+
+        /// <summary>
+        /// Checks to see if icon state for a particular geo object is already being held.  If not
+        /// create a new iconstate for it.
+        /// </summary>
+        /// <param name="iconName"></param>
+        /// <returns></returns>
+        private IconState GetIconState(string iconName)
+        {
+            IconState returnVal;
+       
+            if (iconStates.ContainsKey(iconName))
+            {
+                returnVal = iconStates[iconName];
+                
+            }
+            else
+            {
+                returnVal = new IconState();
+                iconStates.Add(iconName, returnVal);
+            }
+
+            return returnVal;
+        }
+
+        /// <summary>
+        ///  This is the method called by geoscape scene to draw an icon
+        /// </summary>
+        /// <param name="device"></param>
+        /// <param name="position"></param>
+        /// <param name="basicEffect"></param>
+        /// <param name="gameTime"></param>
+        /// <param name="distanceToCamera"></param>
+        /// <param name="objectName"></param>
+        /// <param name="iconType"></param>
+        public void DrawIcon(GraphicsDevice device,
+                                Vector3 position, 
+                                BasicEffect basicEffect, 
+                                GameTime gameTime, 
+                                float distanceToCamera,
+                                string objectName,
+                                hudIconTypes iconType)
+        {
+            Vector2 screenPos = Get2DProjection(position, device, basicEffect);
+            IconState myIcon = GetIconState(objectName);
+            bool blnHovering = Hovering(screenPos);
+            bool blnOcclude = distanceToCamera >= OCCLUDEDISTANCE;
+            
+            if (!blnOcclude)
+            {
+                if (blnHovering)
+                {
+                    PlayMouseOver(objectName);
+                    TempSelectedItem = objectName;
+                }
+
+                myIcon.Next(blnHovering, gameTime);
+
+
+                DrawHudIcon(iconType, screenPos, myIcon, objectName,device);
+            }
+            else
+            {
+                CreateBlip(iconType,screenPos);
+            }
+        }
+        #endregion
+
+        #region private methods
+        /// </summary>
+        /// <param name="geoposition">position on globe (in polar radians)</param>
+        /// <returns>World matrix used by Draw</returns>
+        private static Vector2 Get2DProjection(Vector3 geoObject, GraphicsDevice device, BasicEffect effect)
+        {
+            Matrix World;
+
+            geoObject.Z = 1.0f;
+
+            World = Matrix.CreateRotationX(-geoObject.Y)
+                * Matrix.CreateRotationY(geoObject.X)
+                * Matrix.CreateTranslation(GeoPosition.PolarToCartesian(geoObject));
+
+            Vector3 projectedPosition = device.Viewport.Project(Vector3.Zero, effect.Projection, effect.View, World);
+            return new Vector2(projectedPosition.X, projectedPosition.Y);
+        }
+
+        /// <summary>
+        /// Internal call to draw an icon.
+        /// </summary>
+        /// <param name="iconType"></param>
+        /// <param name="position"></param>
+        /// <param name="icon"></param>
+        /// <param name="text"></param>
+        private void DrawHudIcon(hudIconTypes iconType, Vector2 position, IconState icon, string text, GraphicsDevice device)
+        {
+            SpriteItem inner = iconSprites[(int)iconType];
+            SpriteItem outer = iconSprites[(int)iconType+1];
+            inner.Draw(hudSprites, position, new Color(1.0f, 1.0f, 1.0f, 1.0f), 0.0f, new Vector2((inner.Width / 2), (inner.Height / 2)), 1.0F, SpriteEffects.None, 0.0F);
+            outer.Draw(hudSprites, position, new Color(1.0f, 1.0f, 1.0f, 1.0f), icon.Rotation, new Vector2((outer.Width / 2), (outer.Height / 2)), icon.Scale, SpriteEffects.None, 0.0F);
+
+            // Get text to display on the icon
+            string iconText = icon.GetTextToDisplay(text);
+
+            if (iconText != string.Empty)
+            {
+                // Get the size of the text
+                Vector2 textSize = hudFont.MeasureString(iconText);
+
+                // Text position set to right hand side of icon, cast to int to prevent 'fuzzy' text
+                Vector2 absTextPosition = position;
+                absTextPosition.X = (int)(absTextPosition.X += 30);
+                absTextPosition.Y = (int)(absTextPosition.Y - (textSize.Y / 2));
+
+                // Dont let the text exceed right hand side of screen.
+                if ((hudFont.MeasureString(text).X + position.X + 50) >= device.Viewport.Width)
+                {
+                    absTextPosition.X = device.Viewport.Width - hudFont.MeasureString(text).X - 30;
+                    absTextPosition.Y += 30;
+                }
+
+                // Set the recectangles that border,and leftborder the text.
+                Rectangle background = new Rectangle(Convert.ToInt32(absTextPosition.X) - 5, Convert.ToInt32(absTextPosition.Y), Convert.ToInt32(textSize.X) + 10, Convert.ToInt32(textSize.Y));
+                Rectangle leftBorder = new Rectangle(Convert.ToInt32(absTextPosition.X) - 5, Convert.ToInt32(absTextPosition.Y), 1, Convert.ToInt32(textSize.Y));
+
+                // Draw these rectangles
+                hudSprites.Draw(textBackGround, background, Color.White);
+                hudSprites.Draw(textBorder, leftBorder, Color.White);
+
+                // Draws a 'border' around the text.  Alternative is sprite text font.
+                absTextPosition.X -= 1;
+                hudSprites.DrawString(hudFont, iconText, absTextPosition, Color.Black);
+                absTextPosition.X += 2;
+                hudSprites.DrawString(hudFont, iconText, absTextPosition, Color.Black);
+                absTextPosition.X -= 1;
+                absTextPosition.Y -= 1;
+                hudSprites.DrawString(hudFont, iconText, absTextPosition, Color.Black);
+                absTextPosition.Y += 2;
+                hudSprites.DrawString(hudFont, iconText, absTextPosition, Color.Black);
+                absTextPosition.Y -= 1;
+                // And now the text
+                hudSprites.DrawString(hudFont, iconText, absTextPosition, Color.White);
+            } 
+        }
+
+        /// <summary>
+        ///  Create a blip used to reprensent the object when it moves out of view on the geoscape
+        /// </summary>
+        /// <param name="position"></param>
+        /// <param name="color"></param>
+        private void CreateBlip(hudIconTypes iconType,Vector2 position)
+        {
+            Color oCol = Color.White;
+            switch (iconType)
+            {
+                case hudIconTypes.AlienBase:
+                    oCol =     new Color(Color.Pink,0.7f);
+                    break;
+                case hudIconTypes.XCorpBase:
+                    oCol = new Color(Color.Blue, 0.7f);
+                    break;
+                case hudIconTypes.XCorpCraft:
+                    oCol = new Color(Color.Green, 0.7f);
+                    break;
+                case hudIconTypes.TerrorSite:
+                    oCol = new Color(Color.Orange, 0.7f);
+                    break;
+                case hudIconTypes.UfoCrash:
+                    oCol = new Color(Color.White, 0.7f);
+                    break;
+                case hudIconTypes.UfoFly:
+                    oCol = new Color(Color.Red, 0.7f);
+                    break;
+                case hudIconTypes.UfoLand:
+                    oCol = new Color(Color.Yellow, 0.7f);
+                    break;
+            }
+            SpriteItem inner = iconSprites[(int)hudIcons.XcomCraftInner];
+            inner.Draw(hudSprites, position, oCol, 0.0f, new Vector2((inner.Width / 2), (inner.Height / 2)), 1.0F, SpriteEffects.None, 0.0F);
+        }
+
+        /// <summary>
+        /// Determines if the mouse point is psoitioned over a given position
+        /// </summary>
+        /// <param name="position"></param>
+        /// <returns></returns>
+        private bool Hovering(Vector2 position)
+        {
+            return mouseState.X >= position.X - 16 &&
+            mouseState.X <= position.X + 16 &&
+            mouseState.Y >= position.Y - 16 &&
+            mouseState.Y <= position.Y + 16 &&
+            TempSelectedItem == String.Empty;
+        }
+
+        /// <summary>
+        /// If selected object wasnt selected in the last pass, play the mouse over soundeffect.
+        /// </summary>
+        /// <param name="objectName"></param>
+        private void PlayMouseOver(string objectName)
+        {
+            if (selectedItem != objectName)
+            {
+                Xenocide.AudioSystem.PlaySound("Menu\\buttonover.ogg");
+            }
+        }
+
+        /// <summary>
+        /// Sound to play if the rendered icon text has changed.  Typewrite effect?
+        /// </summary>
+        /// <param name="objectName"></param>
+        private void PlayTextChanged()
+        {
+           Xenocide.AudioSystem.PlaySound("Menu\\buttonover.ogg");   
+        }
+        #endregion
+
+        #region IconStateClass
+        /// <summary>
+        /// IconState class, hold persistent information for each geoobject that relates to the current
+        /// state of it's on screen icon.
+        /// </summary>
+        public class IconState
+        {
+            public string GetTextToDisplay(string name)
+            {
+                string textToDraw = string.Empty;
+
+                // only do this if we have some text to draw.
+                if( ticks > 0)
+                {
+                    // Get the text we will be drawing
+                    if (ticks > name.Length)
+                        textToDraw = name.Substring(0, name.Length).ToUpper();
+                    else
+                        textToDraw = name.Substring(0, ticks).ToUpper() + "_";
+                }
+
+                if (oldText == textToDraw)
+                    changed = false;
+                else
+                    changed = true;
+         
+                oldText = textToDraw;
+                return textToDraw;
+            }
+
+            // called to update the state of the current icon based on screen input
+            public void Next(bool blnRover, GameTime time)
+            {
+                // if hovered and not at full scale, increment scale
+                if (blnRover &&
+                    Scale < 1.0f)
+                    scale += 0.10f;
+                else
+
+                // if not hovered and not at minimum scale, decrement scale
+                if (!blnRover &&
+                    Scale > 0.0f)
+                    scale -= 0.05f;
+                
+                // If Hovered
+                if (blnRover)
+                {
+                    //update rotation
+                    rotation -= 0.05f;
+                    if (rotation <= -360.0f)
+                        rotation += 360.0f;
+
+                    // if we werent hovered in the previous frame, stame time since hovered.
+                    if (!hovered)
+                    {
+                        timeCreated = time.TotalRealTime;
+                        hovered = true;
+                    }
+                    // set number of 'tick' (arbitarty time interval) since hovered.  This will become
+                    // how many characters of the name string to display
+                    ticks = (int)(( time.TotalRealTime.TotalMilliseconds - timeCreated.TotalMilliseconds ) / 50.0f);
+                }
+                else
+                {
+                    // hovered off, reset values
+                    hovered = false;
+                    ticks = 0;
+                }
+            }
+
+            #region Fields
+            /// <summary>
+            /// Icon current rotation
+            /// </summary>
+            float rotation = 0.0f;
+            public float Rotation
+            {
+                get { return rotation; }
+            }
+
+            float scale = 0.0f;
+            /// <summary>
+            /// Icon current scale
+            /// </summary>
+            public float Scale
+            {
+                get { return scale; }
+            }
+
+            /// <summary>
+            /// internal value that holds time since hover over occured.
+            /// </summary>
+            private TimeSpan timeCreated;
+
+            private int ticks = 0;
+            /// <summary>
+            /// Number of ticks since icon started
+            /// </summary>
+            public int Ticks
+            {
+                get { return Convert.ToInt32(ticks); }
+            }
+
+            /// <summary>
+            /// Use to remember the hover status
+            /// </summary>
+            private bool hovered;
+
+            /// <summary>
+            /// USed to remember previously rendered text
+            /// </summary>
+            private string oldText;
+
+            /// <summary>
+            /// Has the text changed in this pass?
+            /// </summary>
+            private bool changed;
+            public bool Changed
+            {
+                get { return changed; }
+            }
+
+            #endregion
+        } 
+        #endregion
+    }
+}
Index: Source/UI/Scenes/Geoscape/GeoscapeScene.cs
===================================================================
--- Source/UI/Scenes/Geoscape/GeoscapeScene.cs	(revision 1867)
+++ Source/UI/Scenes/Geoscape/GeoscapeScene.cs	(working copy)
@@ -57,9 +57,24 @@
         EarthGlobe  earth     = new EarthGlobe();
         SkyBox      skybox    = new SkyBox();
         GeoMarker   geomarker = new GeoMarker();
+		GeoHud      geoHud    = new GeoHud();
         Effect      effect;
         String      geoTechnique = String.Empty;
 
+		private GeoPosition centerLocation;
+
+		public GeoPosition CenterLocation
+		{
+			set { centerLocation = value; }
+		}
+
+		private string toolTipText = string.Empty;
+
+		public string ToolTipText
+		{
+			get { return toolTipText; }
+		}
+
         /// <summary>
         /// Constructor
         /// </summary>
@@ -108,17 +123,15 @@
         
         public override void LoadContent(ContentManager content, GraphicsDevice device)
         {
-            
-            {
                 InitializeEffect(device);
                 earth.LoadContent(device);
                 skybox.LoadContent(content, device);
                 geomarker.LoadContent(device);
+				geoHud.LoadContent(content, device);
                 effect = content.Load<Effect>(@"Content\Shaders\GeoscapeShader");
 
                 // figure out which shader we call to render the geoscape
                 geoTechnique = (Util.GetShaderVersion(device.GraphicsDeviceCapabilities) < 2) ? "RenderGlobeStandard" : "RenderGlobeWithBump";
-            }
         }
 
         private void InitializeEffect(GraphicsDevice device)
@@ -194,26 +207,33 @@
             effect.Parameters["Projection"].SetValue(basicEffect.Projection);
             effect.Parameters["LightDirection"].SetValue(basicEffect.DirectionalLight0.Direction);
 
-            earth.Draw(device, effect);
+			earth.Draw(device, effect);
 
             // Draw the X-Corp outposts
             geomarker.setupEffect(device, basicEffect);
+
             basicEffect.Alpha = 0.2f;
             basicEffect.DiffuseColor = new Vector3(0.0f, 1.0f, 0.0f);
+
+			GeoPosition pos = new GeoPosition(CameraPosition.X , CameraPosition.Y );
+
+			geoHud.Begin();
             foreach (Outpost outpost in Xenocide.GameState.GeoData.Outposts)
             {
-                geomarker.Draw(device, outpost.Position.Polar, basicEffect);
+				//geomarker.Draw(device, outpost.Position.Polar, basicEffect);
+				geoHud.DrawIcon(device, outpost.Position.Polar, basicEffect, gameTime, outpost.Position.Distance(pos),outpost.Name,GeoHud.hudIconTypes.XCorpBase);
             }
 
             // Draw the X-Corp craft
             basicEffect.DiffuseColor = new Vector3(0.0f, 0.0f, 1.0f);
             foreach (Outpost outpost in Xenocide.GameState.GeoData.Outposts)
             {
-                foreach (Craft craft in outpost.Fleet)
+                foreach (Aircraft craft in outpost.Fleet)
                 {
                     if (!craft.InBase)
                     {
-                        geomarker.Draw(device, craft.Position.Polar, basicEffect);
+                       // geomarker.Draw(device, craft.Position.Polar, basicEffect);
+						geoHud.DrawIcon(device, craft.Position.Polar, basicEffect, gameTime, craft.Position.Distance(pos), craft.Name, GeoHud.hudIconTypes.XCorpCraft);
                     }
                 }
             }
@@ -224,7 +244,14 @@
             {
                 if (ufo.IsKnownToXCorp)
                 {
-                    geomarker.Draw(device, ufo.Position.Polar, basicEffect);
+                    //geomarker.Draw(device, ufo.Position.Polar, basicEffect.
+					GeoHud.hudIconTypes iconType;
+					if (ufo.IsCrashed)
+						iconType = GeoHud.hudIconTypes.UfoCrash;
+					else
+						iconType = GeoHud.hudIconTypes.UfoFly;
+
+					geoHud.DrawIcon(device, ufo.Position.Polar, basicEffect, gameTime, ufo.Position.Distance(pos), ufo.Name, iconType);
                 }
             }
 
@@ -236,7 +263,14 @@
                 {
                     if (!ufo.IsKnownToXCorp)
                     {
-                        geomarker.Draw(device, ufo.Position.Polar, basicEffect);
+                       // geomarker.Draw(device, ufo.Position.Polar, basicEffect);
+						GeoHud.hudIconTypes iconType;
+						if (ufo.IsCrashed)
+							iconType = GeoHud.hudIconTypes.UfoCrash;
+						else
+							iconType = GeoHud.hudIconTypes.UfoFly;
+
+						geoHud.DrawIcon(device, ufo.Position.Polar, basicEffect, gameTime, ufo.Position.Distance(pos), ufo.Name, iconType);
                     }
                 }
             }
@@ -247,10 +281,24 @@
             {
                 if (site.IsKnownToXCorp)
                 {
-                    geomarker.Draw(device, site.Position.Polar, basicEffect);
+					GeoHud.hudIconTypes iconType = GeoHud.hudIconTypes.XCorpBase;
+
+					if (site.GetType() == typeof(OutpostAlienSite))
+					{
+						iconType = GeoHud.hudIconTypes.AlienBase;
+					}
+
+					if (site.GetType() == typeof(TerrorMissionAlienSite))
+					{
+						iconType = GeoHud.hudIconTypes.TerrorSite  ;
+					}
+
+					geoHud.DrawIcon(device, site.Position.Polar, basicEffect, gameTime, site.Position.Distance(pos), site.Name, iconType);
                 }
             }
 
+			toolTipText = geoHud.End();
+
             // Draw Nav Paths
 
             // Draw Radar
Index: Source/UI/Screens/GeoscapeScreen.cs
===================================================================
--- Source/UI/Screens/GeoscapeScreen.cs	(revision 1867)
+++ Source/UI/Screens/GeoscapeScreen.cs	(working copy)
@@ -108,12 +108,15 @@
             SetView(0.00f, 0.00f, 0.745f, 1f);
 
             // add text giving the time
-            gameTimeTop = AddStaticText(0.7574f, 0.08f, 0.2275f, 0.05f);
+			gameTimeTop = AddStaticText(0.7574f, 0.08f, 0.2275f, 0.05f);
             gameTimeHour = AddStaticText(0.79f, 0.10f, 0.4275f, 0.08f);
             gameTimeSec = AddStaticText(0.888f, 0.115f, 0.4275f, 0.08f);
             fundsText = AddStaticText(0.754f, 0.02f, 0.2275f, 0.04125f);
             fundsAmount = AddStaticText(0.84f, 0.015f, 0.2275f, 0.04125f);
+			sceneToolTip = AddStaticText(0.7475f, 0.25f, 0.3f, 0.3f);
 
+			sceneToolTip.VerticalAlignment = CeGui.VerticalAlignment.Top;
+
             // Set Font and color for text
             SetTimeFont(gameTimeTop, "GeoTime");
             SetTimeFont(gameTimeHour, "GeoTimeBig");
@@ -126,6 +129,7 @@
             timeHourButton = AddButton("BUTTON_TIME_X3600", 0.8675f, 0.18f, 0.050f, 0.04125f, "PlanetView\\speedfast.ogg");
             timeDayButton = AddButton("BUTTON_TIME_X86400", 0.9275f, 0.18f, 0.050f, 0.04125f, "PlanetView\\speedveryfast.ogg");
 
+			
             interceptButton = AddButton("BUTTON_INTERCEPT", 0.7475f, 0.51f, 0.2275f, 0.04125f);
             basesButton = AddButton("BUTTON_BASES", 0.7475f, 0.56f, 0.2275f, 0.04125f);
             researchButton = AddButton("BUTTON_RESEARCH", 0.7475f, 0.61f, 0.2275f, 0.04125f);
@@ -134,6 +138,7 @@
             xnetButton = AddButton("BUTTON_XNET", 0.7475f, 0.76f, 0.2275f, 0.04125f);
             optionsButton = AddButton("BUTTON_OPTIONS", 0.7475f, 0.81f, 0.2275f, 0.04125f);
 
+			
             // move camera buttons
             cameraUpButton = AddStaticImageButton("BUTTON_UP", 0.7890f, 0.885f, 0.020f, 0.03125f, "PanUpNormal", "PanUpPushed", "Menu\\buttonclick1_ok.ogg");
             cameraDownButton = AddStaticImageButton("BUTTON_DOWN", 0.7890f, 0.965f, 0.020f, 0.03125f, "PanDownNormal", "PanDownPushed", "Menu\\buttonclick1_ok.ogg");
@@ -213,6 +218,7 @@
         private CeGui.Widgets.StaticText gameTimeSec;
         private CeGui.Widgets.StaticText fundsText;
         private CeGui.Widgets.StaticText fundsAmount;
+		private CeGui.Widgets.StaticText sceneToolTip;
 
         //Used to keep track of time and avoid updating if needed.
         private string gameTimeText;
@@ -256,6 +262,11 @@
             // as this will make CeGui recompute all render quads.
             DateTime time = Xenocide.GameState.GeoData.GeoTime.Time;
             String newTime = time.ToString();
+
+			// render hover text even if game time is not ticking
+			sceneToolTip.Text = geoscapeScene.ToolTipText;
+			sceneToolTip.VerticalFormat = CeGui.VerticalTextFormat.Top;
+
             if (gameTimeText != newTime)
             {
                 CultureInfo culture = Thread.CurrentThread.CurrentCulture;
@@ -283,6 +294,10 @@
                 gameTimeHour.Text = time.ToString("HH:mm", culture);
                 gameTimeSec.Text = time.ToString(":ss", culture);
 
+
+
+				
+
                 //Set time
                 gameTimeText = newTime;
             }
@@ -297,6 +312,8 @@
         public override void SaveState()
         {
             oldCameraPosition = Scene.CameraPosition;
+
+
         }
 
         #endregion
@@ -576,6 +593,7 @@
         /// </summary>
         private static Vector3 oldCameraPosition = new Vector3(0.0f, 0.0f, 3.5f);
 
+
         #endregion fields
     }
 }
Index: Source/Utils/SpiteMap.cs
===================================================================
--- Source/Utils/SpiteMap.cs	(revision 0)
+++ Source/Utils/SpiteMap.cs	(revision 0)
@@ -0,0 +1,106 @@
+ï»¿/*
+ * SpriteItem and SpriteMap classes are from the Ziggyware tutorials section.
+ * 
+ * http://www.ziggyware.com/readarticle.php?article_id=141
+ * 
+ * /*
+* @file SpriteMap.cs
+* @date Created: 2009/10/21
+* @author File creator: John Perrin
+* @author Credits: none
+*/
+
+
+using Microsoft.Xna.Framework;
+using Microsoft.Xna.Framework.Graphics;
+
+namespace ProjectXenocide.Utils
+{
+	/// <summary>
+	/// This structure just stores a texture and rectangle specifying the area within the
+	/// texture which will be rendered.
+	/// </summary>
+	public struct SpriteItem
+	{
+		private Texture2D tex;
+		private Rectangle srcrect;
+
+		public SpriteItem(Texture2D texture, Rectangle srcrect)
+		{
+			this.tex = texture;
+			this.srcrect = srcrect;
+		}
+
+		public int Width
+		{
+			get { return srcrect.Width; }
+		}
+
+		public int Height
+		{
+			get { return srcrect.Height; }
+		}
+
+		public void Draw(SpriteBatch batch, Rectangle destrect, Color color)
+		{
+			batch.Draw(tex, destrect, srcrect, color);
+		}
+
+		public void Draw(SpriteBatch batch, Vector2 pos, Color color)
+		{
+			batch.Draw(tex, pos, srcrect, color);
+		}
+
+		public void Draw(SpriteBatch batch, Rectangle destrect, Color color, float rotation, Vector2 origin, SpriteEffects effect, float layerdepth)
+		{
+			batch.Draw(tex, destrect, srcrect, color, rotation, origin, effect, layerdepth);
+		}
+
+		public void Draw(SpriteBatch batch, Vector2 pos, Color color, float rotation, Vector2 origin, float scale, SpriteEffects effect, float layerdepth)
+		{
+			batch.Draw(tex, pos, srcrect, color, rotation, origin, scale, effect, layerdepth);
+		}
+
+		public void Draw(SpriteBatch batch, Vector2 pos, Color color, float rotation, Vector2 origin, Vector2 scale, SpriteEffects effect, float layerdepth)
+		{
+			batch.Draw(tex, pos, srcrect, color, rotation, origin, scale, effect, layerdepth);
+		}
+	}
+
+	public class SpriteMap
+	{
+		private Texture2D tex;
+		private int gridx, gridy;
+		private int mulx, muly;
+
+		public SpriteMap(Texture2D texture, int gridx, int gridy)
+		{
+			this.tex = texture;
+			this.gridx = gridx;
+			this.gridy = gridy;
+
+			// Calculate the width and height of each tile within the sprite map.
+			this.mulx = tex.Width / gridx;
+			this.muly = tex.Height / gridy;
+		}
+
+		public SpriteItem this[int frame]
+		{
+			get
+			{
+				// Extract the right area of the sprite for the given frame.
+				int x = frame % gridx;
+				int y = frame / gridx;
+				Rectangle srcrect = new Rectangle(x * mulx, y * muly, mulx, muly);
+
+				// Create a SpriteItem object and return it to the caller.
+				return new SpriteItem(tex, srcrect);
+			}
+		}
+
+		public void Dispose()
+		{
+			tex.Dispose();
+		}
+	}
+}
